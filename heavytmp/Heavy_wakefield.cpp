/**
 * Copyright (c) 2017 Enzien Audio, Ltd.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, and/or
 * sublicense copies of the Software, strictly on a non-commercial basis,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 * 
 * DO NOT MODIFY. THIS CODE IS MACHINE GENERATED BY THE ENZIEN AUDIO HEAVY COMPILER
 */

#include "Heavy_wakefield.hpp"

#define Context(_c) reinterpret_cast<Heavy_wakefield *>(_c)



/*
 * C Functions
 */

extern "C" {
  HV_EXPORT HeavyContextInterface *hv_wakefield_new(double sampleRate) {
    return new Heavy_wakefield(sampleRate);
  }

  HV_EXPORT HeavyContextInterface *hv_wakefield_new_with_options(double sampleRate,
      int poolKb, int inQueueKb, int outQueueKb) {
    return new Heavy_wakefield(sampleRate, poolKb, inQueueKb, outQueueKb);
  }
} // extern "C"







/*
 * Class Functions
 */

Heavy_wakefield::Heavy_wakefield(double sampleRate, int poolKb, int inQueueKb, int outQueueKb)
    : HeavyContext(sampleRate, poolKb, inQueueKb, outQueueKb) {
  numBytes += sPhasor_k_init(&sPhasor_1IMCa, 0.0f, sampleRate);
  numBytes += sPhasor_k_init(&sPhasor_RIqN6, 0.0f, sampleRate);
  numBytes += sPhasor_k_init(&sPhasor_qjSQ2, 0.0f, sampleRate);
  numBytes += sPhasor_k_init(&sPhasor_Gfaxu, 0.0f, sampleRate);
  numBytes += sPhasor_k_init(&sPhasor_0vXTl, 0.1f, sampleRate);
  numBytes += sPhasor_init(&sPhasor_UluKl, sampleRate);
  numBytes += sCPole_init(&sCPole_v9h3j);
  numBytes += cVar_init_f(&cVar_9NFjv, 0.0f);
  numBytes += sVarf_init(&sVarf_67ym6, 0.0f, 0.0f, false);
  numBytes += cVar_init_f(&cVar_7dWL4, 0.0f);
  numBytes += cVar_init_f(&cVar_5hbma, 0.0f);
  numBytes += cDelay_init(this, &cDelay_v8ZuM, 0.0f);
  numBytes += cBinop_init(&cBinop_EF2Sc, 0.0f); // __mul
  numBytes += cVar_init_f(&cVar_YS56E, 1000.0f);
  numBytes += cVar_init_f(&cVar_fos2S, 0.0f);
  numBytes += cBinop_init(&cBinop_rTnJV, 0.0f); // __add
  numBytes += cBinop_init(&cBinop_WHUIU, 0.0f); // __div
  numBytes += cBinop_init(&cBinop_0oX0u, 0.0f); // __sub
  numBytes += cVar_init_f(&cVar_L7LpR, 0.0f);
  numBytes += cBinop_init(&cBinop_NzJcu, 0.0f); // __mul
  numBytes += cBinop_init(&cBinop_tnmao, 0.0f); // __add
  numBytes += cSlice_init(&cSlice_Kv0OY, 1, -1);
  numBytes += cSlice_init(&cSlice_QFGzm, 1, -1);
  numBytes += cVar_init_f(&cVar_t4MMg, 0.0f);
  numBytes += cBinop_init(&cBinop_QKb85, 20.0f); // __div
  numBytes += cBinop_init(&cBinop_Mrmjk, 0.0f); // __mul
  numBytes += cBinop_init(&cBinop_xycem, 0.0f); // __sub
  numBytes += cVar_init_f(&cVar_lOsqV, 20.0f);
  numBytes += cSlice_init(&cSlice_FWSDw, 1, 1);
  numBytes += cSlice_init(&cSlice_n37uc, 0, 1);
  numBytes += cVar_init_f(&cVar_ZTFUx, 20.0f);
  numBytes += cBinop_init(&cBinop_L5JO0, 0.0f); // __mul
  numBytes += cDelay_init(this, &cDelay_s4Z1z, 0.0f);
  numBytes += cVar_init_f(&cVar_JOTXY, 0.0f);
  numBytes += cVar_init_f(&cVar_hSBAr, 0.0f);
  numBytes += cDelay_init(this, &cDelay_gPYKw, 1.0f);
  numBytes += cRandom_init(&cRandom_8H3aC, -809513300);
  numBytes += cDelay_init(this, &cDelay_DBt9z, 1500.0f);
  numBytes += sVarf_init(&sVarf_Nwd47, 0.0f, 0.0f, false);
  numBytes += cVar_init_f(&cVar_Wh6OP, 0.0f);
  numBytes += cVar_init_f(&cVar_DvzVb, 0.0f);
  numBytes += cVar_init_f(&cVar_YFUfl, 0.0f);
  numBytes += cIf_init(&cIf_VMssB, false);
  numBytes += sVarf_init(&sVarf_5bgQx, 1.0f, 0.0f, false);
  numBytes += sVarf_init(&sVarf_e79PD, 0.0f, 0.0f, false);
  numBytes += sVarf_init(&sVarf_Kerkt, 0.0f, 0.0f, false);
  numBytes += cVar_init_f(&cVar_AY8Uh, 1.0f);
  numBytes += sVarf_init(&sVarf_xcMfN, 0.0f, 0.0f, false);
  numBytes += cVar_init_f(&cVar_SqakV, 0.0f);
  numBytes += cVar_init_f(&cVar_JtjSa, 0.0f);
  numBytes += cVar_init_f(&cVar_Abyfp, 0.0f);
  numBytes += sVarf_init(&sVarf_756gX, 0.0f, 0.0f, false);
  numBytes += cDelay_init(this, &cDelay_NOM4H, 1.0f);
  numBytes += cVar_init_f(&cVar_eYgpj, 0.0f);
  numBytes += cDelay_init(this, &cDelay_2wyuM, 1500.0f);
  numBytes += cRandom_init(&cRandom_Eqsie, -724000021);
  numBytes += cVar_init_f(&cVar_5KHRm, 0.0f);
  numBytes += cBinop_init(&cBinop_di92Z, 0.0f); // __sub
  numBytes += cBinop_init(&cBinop_wpvkJ, 0.0f); // __mul
  numBytes += cSlice_init(&cSlice_0kY4R, 1, -1);
  numBytes += cSlice_init(&cSlice_6pahf, 1, -1);
  numBytes += cVar_init_f(&cVar_gB4iq, 0.0f);
  numBytes += cBinop_init(&cBinop_dC7h4, 0.0f); // __sub
  numBytes += cVar_init_f(&cVar_8SYZx, 0.0f);
  numBytes += cBinop_init(&cBinop_KxOFP, 0.0f); // __div
  numBytes += cBinop_init(&cBinop_Yzewn, 20.0f); // __div
  numBytes += cBinop_init(&cBinop_7sp4G, 0.0f); // __add
  numBytes += cVar_init_f(&cVar_hUv6z, 0.0f);
  numBytes += cBinop_init(&cBinop_VfAcm, 0.0f); // __mul
  numBytes += cBinop_init(&cBinop_je0M5, 0.0f); // __mul
  numBytes += cDelay_init(this, &cDelay_NQ2cl, 0.0f);
  numBytes += cVar_init_f(&cVar_YYd6X, 20.0f);
  numBytes += cBinop_init(&cBinop_tTpWz, 0.0f); // __add
  numBytes += cVar_init_f(&cVar_P7BSw, 0.0f);
  numBytes += cSlice_init(&cSlice_KdFy6, 1, 1);
  numBytes += cSlice_init(&cSlice_6G4Ne, 0, 1);
  numBytes += cVar_init_f(&cVar_UUIfF, 20.0f);
  numBytes += cVar_init_f(&cVar_qry79, 0.0f);
  numBytes += cRandom_init(&cRandom_i6i0T, 1530960948);
  numBytes += cBinop_init(&cBinop_1m7VF, 0.0f); // __mul
  numBytes += cBinop_init(&cBinop_Ljkt1, 0.0f); // __sub
  numBytes += cBinop_init(&cBinop_R1BvH, 0.0f); // __add
  numBytes += cBinop_init(&cBinop_V3wzR, 20.0f); // __div
  numBytes += cVar_init_f(&cVar_kkITx, 0.0f);
  numBytes += cVar_init_f(&cVar_YvAcp, 0.0f);
  numBytes += cVar_init_f(&cVar_otqTp, 0.0f);
  numBytes += cVar_init_f(&cVar_TCL62, 20.0f);
  numBytes += cBinop_init(&cBinop_tttSb, 0.0f); // __div
  numBytes += cBinop_init(&cBinop_WMU34, 0.0f); // __add
  numBytes += cBinop_init(&cBinop_c3E6V, 0.0f); // __mul
  numBytes += cSlice_init(&cSlice_c86qt, 1, 1);
  numBytes += cSlice_init(&cSlice_CkCNY, 0, 1);
  numBytes += cVar_init_f(&cVar_fyVOD, 0.0f);
  numBytes += cVar_init_f(&cVar_GNuH5, 0.0f);
  numBytes += cVar_init_f(&cVar_Er09o, 20.0f);
  numBytes += cBinop_init(&cBinop_p67Wp, 0.0f); // __mul
  numBytes += cDelay_init(this, &cDelay_DV4v4, 0.0f);
  numBytes += cSlice_init(&cSlice_W2s1l, 1, -1);
  numBytes += cSlice_init(&cSlice_9PT4h, 1, -1);
  numBytes += cBinop_init(&cBinop_id7zw, 0.0f); // __sub
  numBytes += cDelay_init(this, &cDelay_3XHiq, 1.0f);
  numBytes += cVar_init_f(&cVar_f0sUV, 0.0f);
  numBytes += cDelay_init(this, &cDelay_hJrwJ, 1500.0f);
  numBytes += sVarf_init(&sVarf_4srE8, 0.0f, 0.0f, false);
  numBytes += cVar_init_f(&cVar_lgx4Q, 0.0f);
  numBytes += cVar_init_f(&cVar_oSHID, 0.0f);
  numBytes += sVarf_init(&sVarf_VMnUs, 1.0f, 0.0f, false);
  numBytes += sVarf_init(&sVarf_8XRWS, 1500.0f, 0.0f, false);
  numBytes += cVar_init_f(&cVar_cbmhF, 0.0f);
  numBytes += cVar_init_f(&cVar_8vTS2, 0.0f);
  numBytes += cDelay_init(this, &cDelay_vFF79, 1500.0f);
  numBytes += cBinop_init(&cBinop_rRtYV, 0.0f); // __mul
  numBytes += cVar_init_f(&cVar_2MN9w, 0.0f);
  numBytes += cBinop_init(&cBinop_Ct36G, 0.0f); // __sub
  numBytes += cBinop_init(&cBinop_TOTli, 0.0f); // __mul
  numBytes += cVar_init_f(&cVar_1tnL9, 20.0f);
  numBytes += cBinop_init(&cBinop_1VCY6, 0.0f); // __mul
  numBytes += cDelay_init(this, &cDelay_BN0sE, 0.0f);
  numBytes += cBinop_init(&cBinop_58ToI, 0.0f); // __add
  numBytes += cVar_init_f(&cVar_z6Tfu, 20.0f);
  numBytes += cSlice_init(&cSlice_uzVoJ, 1, 1);
  numBytes += cSlice_init(&cSlice_dtbRh, 0, 1);
  numBytes += cBinop_init(&cBinop_TQalo, 0.0f); // __div
  numBytes += cSlice_init(&cSlice_MZ2oU, 1, -1);
  numBytes += cSlice_init(&cSlice_wk0II, 1, -1);
  numBytes += cBinop_init(&cBinop_JiUhU, 20.0f); // __div
  numBytes += cVar_init_f(&cVar_GZprb, 0.0f);
  numBytes += cVar_init_f(&cVar_WyxSB, 0.0f);
  numBytes += cVar_init_f(&cVar_FIyz7, 0.0f);
  numBytes += cVar_init_f(&cVar_9FeUh, 0.0f);
  numBytes += cBinop_init(&cBinop_jdQpl, 0.0f); // __sub
  numBytes += cBinop_init(&cBinop_Kt2kt, 0.0f); // __add
  numBytes += cVar_init_f(&cVar_Ktkhx, 0.0f);
  numBytes += cRandom_init(&cRandom_XLdXp, 1965899188);
  numBytes += sVarf_init(&sVarf_2Ke1c, 0.0f, 0.0f, false);
  numBytes += cDelay_init(this, &cDelay_setoU, 1.0f);
  numBytes += sVarf_init(&sVarf_SqjYg, 0.0f, 0.0f, false);
  
  // schedule a message to trigger all loadbangs via the __hv_init receiver
  scheduleMessageForReceiver(0xCE5CC65B, msg_initWithBang(HV_MESSAGE_ON_STACK(1), 0));
}

Heavy_wakefield::~Heavy_wakefield() {
  // nothing to free
}

HvTable *Heavy_wakefield::getTableForHash(hv_uint32_t tableHash) {
  return nullptr;
}

void Heavy_wakefield::scheduleMessageForReceiver(hv_uint32_t receiverHash, HvMessage *m) {
  switch (receiverHash) {
    case 0xCE5CC65B: { // __hv_init
      mq_addMessageByTimestamp(&mq, m, 0, &cReceive_WVAce_sendMessage);
      break;
    }
    case 0xFDE4431F: { // slider1
      mq_addMessageByTimestamp(&mq, m, 0, &cReceive_sp8wQ_sendMessage);
      break;
    }
    case 0x39459ED7: { // slider2
      mq_addMessageByTimestamp(&mq, m, 0, &cReceive_IvTNs_sendMessage);
      break;
    }
    case 0x3E036442: { // slider3
      mq_addMessageByTimestamp(&mq, m, 0, &cReceive_yickW_sendMessage);
      break;
    }
    case 0xF2D8757F: { // slider4
      mq_addMessageByTimestamp(&mq, m, 0, &cReceive_aOLLR_sendMessage);
      break;
    }
    case 0x71A232F1: { // slider5
      mq_addMessageByTimestamp(&mq, m, 0, &cReceive_vnFPf_sendMessage);
      break;
    }
    default: return;
  }
}

int Heavy_wakefield::getParameterInfo(int index, HvParameterInfo *info) {
  if (info != nullptr) {
    switch (index) {
      default: {
        info->name = "invalid parameter index";
        info->hash = 0;
        info->type = HvParameterType::HV_PARAM_TYPE_PARAMETER;
        info->minVal = 0.0f;
        info->maxVal = 0.0f;
        info->defaultVal = 0.0f;
        break;
      }
    }
  }
  return 0;
}



/*
 * Send Function Implementations
 */


void Heavy_wakefield::cReceive_aOLLR_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_7dWL4, 0, m, &cVar_7dWL4_sendMessage);
}

void Heavy_wakefield::cVar_9NFjv_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
}

void Heavy_wakefield::cReceive_vnFPf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_lgx4Q, 0, m, &cVar_lgx4Q_sendMessage);
}

void Heavy_wakefield::cSend_Z2yUY_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  if (_c->getSendHook() != nullptr) _c->getSendHook()(_c, "slider5", 0x71A232F1, m);
  cReceive_vnFPf_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cReceive_WVAce_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_gfsoF_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_ZTFUx, 0, m, &cVar_ZTFUx_sendMessage);
  cMsg_DBjBa_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_Er09o, 0, m, &cVar_Er09o_sendMessage);
  cMsg_yyyVj_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_YYd6X, 0, m, &cVar_YYd6X_sendMessage);
  cMsg_mWZkI_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_1tnL9, 0, m, &cVar_1tnL9_sendMessage);
  cMsg_DXKWd_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_hSBAr, 0, m, &cVar_hSBAr_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_lOsqV, 0, m, &cVar_lOsqV_sendMessage);
  cMsg_yjEQb_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_otqTp, 0, m, &cVar_otqTp_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_TCL62, 0, m, &cVar_TCL62_sendMessage);
  cMsg_WHrY2_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_P7BSw, 0, m, &cVar_P7BSw_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_UUIfF, 0, m, &cVar_UUIfF_sendMessage);
  cMsg_mpt53_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_9FeUh, 0, m, &cVar_9FeUh_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_z6Tfu, 0, m, &cVar_z6Tfu_sendMessage);
  cMsg_3h0mR_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_YS56E, 0, m, &cVar_YS56E_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_AY8Uh, 0, m, &cVar_AY8Uh_sendMessage);
  cMsg_gslwk_sendMessage(_c, 0, m);
  cSwitchcase_gn3LI_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cSend_duszf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  if (_c->getSendHook() != nullptr) _c->getSendHook()(_c, "slider4", 0xF2D8757F, m);
  cReceive_aOLLR_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_7dWL4_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sVarf_onMessage(_c, &Context(_c)->sVarf_8XRWS, m);
}

void Heavy_wakefield::cReceive_yickW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_cbmhF, 0, m, &cVar_cbmhF_sendMessage);
}

void Heavy_wakefield::cVar_5hbma_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSend_Z2yUY_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_gn3LI_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_fywD9_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_fywD9_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_0OQRE_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cBinop_ZMxXM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_v8ZuM, 2, m, &cDelay_v8ZuM_sendMessage);
}

void Heavy_wakefield::cCast_0OQRE_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_fywD9_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_v8ZuM, 0, m, &cDelay_v8ZuM_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_qry79, 0, m, &cVar_qry79_sendMessage);
}

void Heavy_wakefield::cSystem_nQZFG_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_Wy7Ju_sendMessage);
}

void Heavy_wakefield::cMsg_3h0mR_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_nQZFG_sendMessage);
}

void Heavy_wakefield::cDelay_v8ZuM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_v8ZuM, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_v8ZuM, 0, m, &cDelay_v8ZuM_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_qry79, 0, m, &cVar_qry79_sendMessage);
}

void Heavy_wakefield::cBinop_EF2Sc_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_ZMxXM_sendMessage);
}

void Heavy_wakefield::cMsg_fywD9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_v8ZuM, 0, m, &cDelay_v8ZuM_sendMessage);
}

void Heavy_wakefield::cBinop_Wy7Ju_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_EF2Sc, HV_BINOP_MULTIPLY, 1, m, &cBinop_EF2Sc_sendMessage);
}

void Heavy_wakefield::cVar_YS56E_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_EF2Sc, HV_BINOP_MULTIPLY, 0, m, &cBinop_EF2Sc_sendMessage);
}

void Heavy_wakefield::cReceive_sp8wQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_YFUfl, 0, m, &cVar_YFUfl_sendMessage);
}

void Heavy_wakefield::cBinop_JyBRD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sPhasor_k_onMessage(_c, &Context(_c)->sPhasor_1IMCa, 0, m);
}

void Heavy_wakefield::cBinop_3VafA_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_Wh6OP, 0, m, &cVar_Wh6OP_sendMessage);
  sVarf_onMessage(_c, &Context(_c)->sVarf_Nwd47, m);
}

void Heavy_wakefield::cVar_fos2S_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_t4MMg, 0, m, &cVar_t4MMg_sendMessage);
}

void Heavy_wakefield::cMsg_5sIA3_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 20.0f);
  cBinop_onMessage(_c, &Context(_c)->cBinop_Mrmjk, HV_BINOP_MULTIPLY, 0, m, &cBinop_Mrmjk_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_QKb85, HV_BINOP_DIVIDE, 1, m, &cBinop_QKb85_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_ZTFUx, 0, m, &cVar_ZTFUx_sendMessage);
}

void Heavy_wakefield::cBinop_rTnJV_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_t4MMg, 1, m, &cVar_t4MMg_sendMessage);
}

void Heavy_wakefield::cMsg_ejRpv_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_Pj6G7_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_1rI9W_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_PEn4i_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_XvJE2_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_QKb85, HV_BINOP_DIVIDE, 0, m, &cBinop_QKb85_sendMessage);
}

void Heavy_wakefield::cCast_xP21g_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_4dpmP_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_WHUIU_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_tnmao, HV_BINOP_ADD, 1, m, &cBinop_tnmao_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_rTnJV, HV_BINOP_ADD, 1, m, &cBinop_rTnJV_sendMessage);
}

void Heavy_wakefield::cCast_3xdpd_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_fos2S, 1, m, &cVar_fos2S_sendMessage);
}

void Heavy_wakefield::cBinop_0oX0u_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_WHUIU, HV_BINOP_DIVIDE, 0, m, &cBinop_WHUIU_sendMessage);
}

void Heavy_wakefield::cVar_L7LpR_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_xycem, HV_BINOP_SUBTRACT, 0, m, &cBinop_xycem_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_LESS_THAN_EQL, 0.0f, 0, m, &cBinop_7Od2R_sendMessage);
}

void Heavy_wakefield::cBinop_NzJcu_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_3RPP9_sendMessage);
}

void Heavy_wakefield::cCast_EdHfp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_8VX1v_sendMessage);
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_vb6sG_sendMessage);
}

void Heavy_wakefield::cCast_BJLBt_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_t4MMg, 0, m, &cVar_t4MMg_sendMessage);
}

void Heavy_wakefield::cSwitchcase_7tiIj_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_BJLBt_sendMessage);
      break;
    }
    case 0x3F800000: { // "1.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_EdHfp_sendMessage);
      break;
    }
    default: {
      break;
    }
  }
}

void Heavy_wakefield::cBinop_tnmao_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_hSBAr, 0, m, &cVar_hSBAr_sendMessage);
}

void Heavy_wakefield::cMsg_PdC4B_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_Pj6G7_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_7Od2R_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_7tiIj_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cSlice_Kv0OY_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_3ooXL_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_Ard2p_sendMessage);
      break;
    }
    case 1: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_3ooXL_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_Ard2p_sendMessage);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSwitchcase_TxbAK_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cSlice_onMessage(_c, &Context(_c)->cSlice_QFGzm, 0, m, &cSlice_QFGzm_sendMessage);
      break;
    }
    case 0x3E004DAB: { // "set"
      cSlice_onMessage(_c, &Context(_c)->cSlice_Kv0OY, 0, m, &cSlice_Kv0OY_sendMessage);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_NQiBW_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_FWSDw, 0, m, &cSlice_FWSDw_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_n37uc, 0, m, &cSlice_n37uc_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_25bSX_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_xP21g_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cSlice_QFGzm_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cMsg_PdC4B_sendMessage(_c, 0, m);
      break;
    }
    case 1: {
      cMsg_PdC4B_sendMessage(_c, 0, m);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cVar_t4MMg_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_rTnJV, HV_BINOP_ADD, 0, m, &cBinop_rTnJV_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_tnmao, HV_BINOP_ADD, 0, m, &cBinop_tnmao_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_3VafA_sendMessage);
}

void Heavy_wakefield::cBinop_QKb85_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_WHUIU, HV_BINOP_DIVIDE, 1, m, &cBinop_WHUIU_sendMessage);
}

void Heavy_wakefield::cBinop_Mrmjk_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_jsyUW_sendMessage);
}

void Heavy_wakefield::cMsg_PEn4i_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_Pj6G7_onMessage(_c, NULL, 0, m, NULL);
  cBinop_onMessage(_c, &Context(_c)->cBinop_tnmao, HV_BINOP_ADD, 1, m, &cBinop_tnmao_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_rTnJV, HV_BINOP_ADD, 1, m, &cBinop_rTnJV_sendMessage);
}

void Heavy_wakefield::cSystem_FQPu1_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_Mrmjk, HV_BINOP_MULTIPLY, 1, m, &cBinop_Mrmjk_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_NzJcu, HV_BINOP_MULTIPLY, 1, m, &cBinop_NzJcu_sendMessage);
}

void Heavy_wakefield::cMsg_DXKWd_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_FQPu1_sendMessage);
}

void Heavy_wakefield::cCast_25bSX_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_ejRpv_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_8VX1v_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_PEn4i_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_oW1Zx_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_NzJcu, HV_BINOP_MULTIPLY, 0, m, &cBinop_NzJcu_sendMessage);
}

void Heavy_wakefield::cCast_NQiBW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_JOTXY, 0, m, &cVar_JOTXY_sendMessage);
}

void Heavy_wakefield::cCast_ZdABW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_5sIA3_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_kg4HZ_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_ZdABW_sendMessage);
      break;
    }
    default: {
      cBinop_onMessage(_c, &Context(_c)->cBinop_Mrmjk, HV_BINOP_MULTIPLY, 0, m, &cBinop_Mrmjk_sendMessage);
      cBinop_onMessage(_c, &Context(_c)->cBinop_QKb85, HV_BINOP_DIVIDE, 1, m, &cBinop_QKb85_sendMessage);
      cVar_onMessage(_c, &Context(_c)->cVar_ZTFUx, 0, m, &cVar_ZTFUx_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cBinop_xycem_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_L7LpR, 1, m, &cVar_L7LpR_sendMessage);
}

void Heavy_wakefield::cVar_lOsqV_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_kg4HZ_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cSlice_FWSDw_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_oW1Zx_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_XvJE2_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_n37uc_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_3xdpd_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_c1fSq_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cMsg_gfsoF_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_MmdQ6_sendMessage);
}

void Heavy_wakefield::cSystem_MmdQ6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_QlpTT_sendMessage);
}

void Heavy_wakefield::cBinop_Lv4L4_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_s4Z1z, 2, m, &cDelay_s4Z1z_sendMessage);
}

void Heavy_wakefield::cVar_ZTFUx_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_L5JO0, HV_BINOP_MULTIPLY, 0, m, &cBinop_L5JO0_sendMessage);
}

void Heavy_wakefield::cMsg_iP4L1_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_s4Z1z, 0, m, &cDelay_s4Z1z_sendMessage);
}

void Heavy_wakefield::cCast_GxKUP_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_iP4L1_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_s4Z1z, 0, m, &cDelay_s4Z1z_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_L7LpR, 0, m, &cVar_L7LpR_sendMessage);
}

void Heavy_wakefield::cBinop_QlpTT_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_L5JO0, HV_BINOP_MULTIPLY, 1, m, &cBinop_L5JO0_sendMessage);
}

void Heavy_wakefield::cBinop_L5JO0_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_Lv4L4_sendMessage);
}

void Heavy_wakefield::cDelay_s4Z1z_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_s4Z1z, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_s4Z1z, 0, m, &cDelay_s4Z1z_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_L7LpR, 0, m, &cVar_L7LpR_sendMessage);
}

void Heavy_wakefield::cSwitchcase_Pj6G7_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_iP4L1_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_iP4L1_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_GxKUP_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cVar_JOTXY_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_oW1Zx_sendMessage);
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_XvJE2_sendMessage);
}

void Heavy_wakefield::cCast_c1fSq_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_0oX0u, HV_BINOP_SUBTRACT, 0, m, &cBinop_0oX0u_sendMessage);
}

void Heavy_wakefield::cCast_Ard2p_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_1rI9W_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_tnmao, HV_BINOP_ADD, 0, m, &cBinop_tnmao_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_t4MMg, 1, m, &cVar_t4MMg_sendMessage);
}

void Heavy_wakefield::cCast_vb6sG_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_fos2S, 0, m, &cVar_fos2S_sendMessage);
}

void Heavy_wakefield::cCast_3ooXL_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_PdC4B_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_3RPP9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_L7LpR, 1, m, &cVar_L7LpR_sendMessage);
}

void Heavy_wakefield::cVar_hSBAr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_0oX0u, HV_BINOP_SUBTRACT, 1, m, &cBinop_0oX0u_sendMessage);
}

void Heavy_wakefield::cMsg_4dpmP_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cVar_onMessage(_c, &Context(_c)->cVar_JOTXY, 1, m, &cVar_JOTXY_sendMessage);
}

void Heavy_wakefield::cBinop_jsyUW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_xycem, HV_BINOP_SUBTRACT, 1, m, &cBinop_xycem_sendMessage);
}

void Heavy_wakefield::cSwitchcase_NK4en_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_q2SLd_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_q2SLd_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_gPYKw, 1, m, &cDelay_gPYKw_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_7nrbA_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cDelay_gPYKw_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_gPYKw, m);
  cMsg_v3xgY_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_q2SLd_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_gPYKw, 0, m, &cDelay_gPYKw_sendMessage);
}

void Heavy_wakefield::cCast_7nrbA_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_gPYKw, 0, m, &cDelay_gPYKw_sendMessage);
}

void Heavy_wakefield::cUnop_LirPc_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 40.0f, 0, m, &cBinop_JyBRD_sendMessage);
}

void Heavy_wakefield::cRandom_8H3aC_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MULTIPLY, 220.0f, 0, m, &cBinop_jGEuW_sendMessage);
}

void Heavy_wakefield::cBinop_jGEuW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cUnop_onMessage(_c, HV_UNOP_FLOOR, m, &cUnop_LirPc_sendMessage);
}

void Heavy_wakefield::cMsg_v3xgY_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1000.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_TxbAK_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_31qzD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_DBt9z, 0, m, &cDelay_DBt9z_sendMessage);
}

void Heavy_wakefield::cCast_gdScj_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_DBt9z, 0, m, &cDelay_DBt9z_sendMessage);
}

void Heavy_wakefield::cSwitchcase_qHCbW_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_31qzD_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_31qzD_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_DBt9z, 1, m, &cDelay_DBt9z_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_gdScj_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cDelay_DBt9z_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_DBt9z, m);
  cMsg_LXXqh_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_LXXqh_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_TxbAK_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_2Toct_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_TxbAK_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cVar_Wh6OP_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
}

void Heavy_wakefield::cVar_DvzVb_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSend_AIjsQ_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_1n63J_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_9NFjv, 0, m, &cVar_9NFjv_sendMessage);
  cSwitchcase_FIH9z_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cVar_YFUfl_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sVarf_onMessage(_c, &Context(_c)->sVarf_SqjYg, m);
}

void Heavy_wakefield::cBinop_muRgF_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cIf_onMessage(_c, &Context(_c)->cIf_VMssB, 1, m, &cIf_VMssB_sendMessage);
}

void Heavy_wakefield::cIf_VMssB_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cMsg_b59SS_sendMessage(_c, 0, m);
      break;
    }
    case 1: {
      cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 2.0f, 0, m, &cBinop_HWvS4_sendMessage);
      cMsg_z9YIS_sendMessage(_c, 0, m);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cMsg_EWtkZ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 2.0f);
  msg_setElementToFrom(m, 1, n, 0);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_SUBTRACT, 0.0f, 0, m, &cBinop_jOmQS_sendMessage);
}

void Heavy_wakefield::cMsg_gslwk_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_Dh5YM_sendMessage);
}

void Heavy_wakefield::cSystem_Dh5YM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_fIP0p_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_jOmQS_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sVarf_onMessage(_c, &Context(_c)->sVarf_xcMfN, m);
}

void Heavy_wakefield::cMsg_OSEed_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 2.0f);
  msg_setElementToFrom(m, 1, n, 0);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 0.0f, 0, m, &cBinop_nPYlv_sendMessage);
}

void Heavy_wakefield::cMsg_b59SS_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 2.0f, 0, m, &cBinop_HWvS4_sendMessage);
  sVarf_onMessage(_c, &Context(_c)->sVarf_5bgQx, m);
  sVarf_onMessage(_c, &Context(_c)->sVarf_Kerkt, m);
}

void Heavy_wakefield::cBinop_nPYlv_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_EWtkZ_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_Zexmn_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sVarf_onMessage(_c, &Context(_c)->sVarf_5bgQx, m);
  sVarf_onMessage(_c, &Context(_c)->sVarf_Kerkt, m);
}

void Heavy_wakefield::cMsg_z9YIS_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setElementToFrom(m, 1, n, 0);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 0.0f, 0, m, &cBinop_Zexmn_sendMessage);
}

void Heavy_wakefield::cVar_AY8Uh_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_GREATER_THAN_EQL, 1e-05f, 0, m, &cBinop_muRgF_sendMessage);
  cIf_onMessage(_c, &Context(_c)->cIf_VMssB, 0, m, &cIf_VMssB_sendMessage);
}

void Heavy_wakefield::cBinop_HWvS4_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_OSEed_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_fIP0p_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setElementToFrom(m, 1, n, 0);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 0.0f, 0, m, &cBinop_rL9I5_sendMessage);
}

void Heavy_wakefield::cBinop_rL9I5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sVarf_onMessage(_c, &Context(_c)->sVarf_e79PD, m);
}

void Heavy_wakefield::cVar_SqakV_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sVarf_onMessage(_c, &Context(_c)->sVarf_67ym6, m);
}

void Heavy_wakefield::cVar_JtjSa_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_AY8Uh, 0, m, &cVar_AY8Uh_sendMessage);
}

void Heavy_wakefield::cVar_Abyfp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSend_duszf_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_QSQ2k_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_qry79, 1, m, &cVar_qry79_sendMessage);
}

void Heavy_wakefield::cBinop_Rk3VK_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sPhasor_k_onMessage(_c, &Context(_c)->sPhasor_qjSQ2, 0, m);
}

void Heavy_wakefield::cBinop_pQMK0_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_eYgpj, 0, m, &cVar_eYgpj_sendMessage);
  sVarf_onMessage(_c, &Context(_c)->sVarf_756gX, m);
}

void Heavy_wakefield::cMsg_hz6ka_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_N8fN9_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cDelay_NOM4H_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_NOM4H, m);
  cMsg_1ckYr_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_cTMqr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_NOM4H, 0, m, &cDelay_NOM4H_sendMessage);
}

void Heavy_wakefield::cMsg_f97J6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_NOM4H, 0, m, &cDelay_NOM4H_sendMessage);
}

void Heavy_wakefield::cSwitchcase_BGBvp_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_f97J6_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_f97J6_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_NOM4H, 1, m, &cDelay_NOM4H_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_cTMqr_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cVar_eYgpj_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
}

void Heavy_wakefield::cMsg_hNvuY_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_2wyuM, 0, m, &cDelay_2wyuM_sendMessage);
}

void Heavy_wakefield::cCast_zpqUW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_2wyuM, 0, m, &cDelay_2wyuM_sendMessage);
}

void Heavy_wakefield::cSwitchcase_Xpo4m_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_hNvuY_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_hNvuY_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_2wyuM, 1, m, &cDelay_2wyuM_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_zpqUW_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cDelay_2wyuM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_2wyuM, m);
  cMsg_hz6ka_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cUnop_VKlc6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 40.0f, 0, m, &cBinop_Rk3VK_sendMessage);
}

void Heavy_wakefield::cRandom_Eqsie_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MULTIPLY, 220.0f, 0, m, &cBinop_2sEDz_sendMessage);
}

void Heavy_wakefield::cBinop_2sEDz_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cUnop_onMessage(_c, HV_UNOP_FLOOR, m, &cUnop_VKlc6_sendMessage);
}

void Heavy_wakefield::cCast_10glQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_gB4iq, 0, m, &cVar_gB4iq_sendMessage);
}

void Heavy_wakefield::cBinop_GW3Pi_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_8SYZx, 1, m, &cVar_8SYZx_sendMessage);
}

void Heavy_wakefield::cCast_sEPUY_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_9Fw1c_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_fbTJf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_dC7h4, HV_BINOP_SUBTRACT, 1, m, &cBinop_dC7h4_sendMessage);
}

void Heavy_wakefield::cMsg_FL4ht_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_UfiIp_onMessage(_c, NULL, 0, m, NULL);
  cBinop_onMessage(_c, &Context(_c)->cBinop_7sp4G, HV_BINOP_ADD, 1, m, &cBinop_7sp4G_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_tTpWz, HV_BINOP_ADD, 1, m, &cBinop_tTpWz_sendMessage);
}

void Heavy_wakefield::cVar_5KHRm_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_hUv6z, 0, m, &cVar_hUv6z_sendMessage);
}

void Heavy_wakefield::cBinop_di92Z_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_KxOFP, HV_BINOP_DIVIDE, 0, m, &cBinop_KxOFP_sendMessage);
}

void Heavy_wakefield::cCast_KmGJr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_FL4ht_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_wpvkJ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_fbTJf_sendMessage);
}

void Heavy_wakefield::cSlice_0kY4R_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cMsg_HJ6bk_sendMessage(_c, 0, m);
      break;
    }
    case 1: {
      cMsg_HJ6bk_sendMessage(_c, 0, m);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_6pahf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Eckjr_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_y4fyw_sendMessage);
      break;
    }
    case 1: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Eckjr_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_y4fyw_sendMessage);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSwitchcase_N8fN9_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cSlice_onMessage(_c, &Context(_c)->cSlice_0kY4R, 0, m, &cSlice_0kY4R_sendMessage);
      break;
    }
    case 0x3E004DAB: { // "set"
      cSlice_onMessage(_c, &Context(_c)->cSlice_6pahf, 0, m, &cSlice_6pahf_sendMessage);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_10glQ_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_KdFy6, 0, m, &cSlice_KdFy6_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_6G4Ne, 0, m, &cSlice_6G4Ne_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_d6PPH_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_sEPUY_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cCast_XMgpK_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_W9k71_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_3XxRX_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_XMgpK_sendMessage);
      break;
    }
    default: {
      cBinop_onMessage(_c, &Context(_c)->cBinop_wpvkJ, HV_BINOP_MULTIPLY, 0, m, &cBinop_wpvkJ_sendMessage);
      cBinop_onMessage(_c, &Context(_c)->cBinop_Yzewn, HV_BINOP_DIVIDE, 1, m, &cBinop_Yzewn_sendMessage);
      cVar_onMessage(_c, &Context(_c)->cVar_YYd6X, 0, m, &cVar_YYd6X_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cCast_jsBe3_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_di92Z, HV_BINOP_SUBTRACT, 0, m, &cBinop_di92Z_sendMessage);
}

void Heavy_wakefield::cCast_pw47p_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_5KHRm, 0, m, &cVar_5KHRm_sendMessage);
}

void Heavy_wakefield::cCast_y4fyw_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_KmGJr_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_7sp4G, HV_BINOP_ADD, 0, m, &cBinop_7sp4G_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_hUv6z, 1, m, &cVar_hUv6z_sendMessage);
}

void Heavy_wakefield::cVar_gB4iq_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_FQ7Tv_sendMessage);
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_0NnOY_sendMessage);
}

void Heavy_wakefield::cBinop_dC7h4_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_8SYZx, 1, m, &cVar_8SYZx_sendMessage);
}

void Heavy_wakefield::cVar_8SYZx_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_dC7h4, HV_BINOP_SUBTRACT, 0, m, &cBinop_dC7h4_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_LESS_THAN_EQL, 0.0f, 0, m, &cBinop_oPLhX_sendMessage);
}

void Heavy_wakefield::cMsg_pTOIz_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_UfiIp_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_Eckjr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_HJ6bk_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_KxOFP_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_7sp4G, HV_BINOP_ADD, 1, m, &cBinop_7sp4G_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_tTpWz, HV_BINOP_ADD, 1, m, &cBinop_tTpWz_sendMessage);
}

void Heavy_wakefield::cMsg_9Fw1c_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cVar_onMessage(_c, &Context(_c)->cVar_gB4iq, 1, m, &cVar_gB4iq_sendMessage);
}

void Heavy_wakefield::cCast_N3dVS_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_5KHRm, 1, m, &cVar_5KHRm_sendMessage);
}

void Heavy_wakefield::cMsg_HJ6bk_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_UfiIp_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_0Mz4O_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_0d0l2_sendMessage);
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_pw47p_sendMessage);
}

void Heavy_wakefield::cCast_nEmDI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_hUv6z, 0, m, &cVar_hUv6z_sendMessage);
}

void Heavy_wakefield::cSwitchcase_qkiWf_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_nEmDI_sendMessage);
      break;
    }
    case 0x3F800000: { // "1.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_0Mz4O_sendMessage);
      break;
    }
    default: {
      break;
    }
  }
}

void Heavy_wakefield::cMsg_W9k71_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 20.0f);
  cBinop_onMessage(_c, &Context(_c)->cBinop_wpvkJ, HV_BINOP_MULTIPLY, 0, m, &cBinop_wpvkJ_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_Yzewn, HV_BINOP_DIVIDE, 1, m, &cBinop_Yzewn_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_YYd6X, 0, m, &cVar_YYd6X_sendMessage);
}

void Heavy_wakefield::cMsg_WHrY2_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_Qg8US_sendMessage);
}

void Heavy_wakefield::cSystem_Qg8US_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_wpvkJ, HV_BINOP_MULTIPLY, 1, m, &cBinop_wpvkJ_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_VfAcm, HV_BINOP_MULTIPLY, 1, m, &cBinop_VfAcm_sendMessage);
}

void Heavy_wakefield::cCast_d6PPH_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_pTOIz_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_Yzewn_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_KxOFP, HV_BINOP_DIVIDE, 1, m, &cBinop_KxOFP_sendMessage);
}

void Heavy_wakefield::cBinop_7sp4G_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_P7BSw, 0, m, &cVar_P7BSw_sendMessage);
}

void Heavy_wakefield::cVar_hUv6z_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_tTpWz, HV_BINOP_ADD, 0, m, &cBinop_tTpWz_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_7sp4G, HV_BINOP_ADD, 0, m, &cBinop_7sp4G_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_pQMK0_sendMessage);
}

void Heavy_wakefield::cCast_0NnOY_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_Yzewn, HV_BINOP_DIVIDE, 0, m, &cBinop_Yzewn_sendMessage);
}

void Heavy_wakefield::cBinop_VfAcm_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_GW3Pi_sendMessage);
}

void Heavy_wakefield::cSystem_iUizp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_M1eXG_sendMessage);
}

void Heavy_wakefield::cMsg_yyyVj_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_iUizp_sendMessage);
}

void Heavy_wakefield::cSwitchcase_UfiIp_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_FE83A_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_FE83A_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_2jGF4_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cMsg_FE83A_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_NQ2cl, 0, m, &cDelay_NQ2cl_sendMessage);
}

void Heavy_wakefield::cBinop_je0M5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_YNLN3_sendMessage);
}

void Heavy_wakefield::cCast_2jGF4_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_FE83A_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_NQ2cl, 0, m, &cDelay_NQ2cl_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_8SYZx, 0, m, &cVar_8SYZx_sendMessage);
}

void Heavy_wakefield::cBinop_YNLN3_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_NQ2cl, 2, m, &cDelay_NQ2cl_sendMessage);
}

void Heavy_wakefield::cDelay_NQ2cl_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_NQ2cl, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_NQ2cl, 0, m, &cDelay_NQ2cl_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_8SYZx, 0, m, &cVar_8SYZx_sendMessage);
}

void Heavy_wakefield::cVar_YYd6X_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_je0M5, HV_BINOP_MULTIPLY, 0, m, &cBinop_je0M5_sendMessage);
}

void Heavy_wakefield::cBinop_M1eXG_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_je0M5, HV_BINOP_MULTIPLY, 1, m, &cBinop_je0M5_sendMessage);
}

void Heavy_wakefield::cBinop_oPLhX_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_qkiWf_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_tTpWz_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_hUv6z, 1, m, &cVar_hUv6z_sendMessage);
}

void Heavy_wakefield::cVar_P7BSw_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_di92Z, HV_BINOP_SUBTRACT, 1, m, &cBinop_di92Z_sendMessage);
}

void Heavy_wakefield::cCast_0d0l2_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_FL4ht_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSlice_KdFy6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_FQ7Tv_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_0NnOY_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_6G4Ne_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_N3dVS_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_jsBe3_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cCast_FQ7Tv_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_VfAcm, HV_BINOP_MULTIPLY, 0, m, &cBinop_VfAcm_sendMessage);
}

void Heavy_wakefield::cVar_UUIfF_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_3XxRX_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_zc8r5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_N8fN9_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_1ckYr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1000.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_N8fN9_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cVar_qry79_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 1.0f, 0, m, &cBinop_QSQ2k_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MOD_UNIPOLAR, 4.0f, 0, m, &cBinop_1n63J_sendMessage);
}

void Heavy_wakefield::cBinop_AoR4g_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sPhasor_k_onMessage(_c, &Context(_c)->sPhasor_RIqN6, 0, m);
}

void Heavy_wakefield::cUnop_OECDN_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 40.0f, 0, m, &cBinop_AoR4g_sendMessage);
}

void Heavy_wakefield::cBinop_4RCEg_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cUnop_onMessage(_c, HV_UNOP_FLOOR, m, &cUnop_OECDN_sendMessage);
}

void Heavy_wakefield::cRandom_i6i0T_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MULTIPLY, 220.0f, 0, m, &cBinop_4RCEg_sendMessage);
}

void Heavy_wakefield::cCast_BeRJ5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_wGpAu_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_R1BvH, HV_BINOP_ADD, 0, m, &cBinop_R1BvH_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_GNuH5, 1, m, &cVar_GNuH5_sendMessage);
}

void Heavy_wakefield::cCast_07VTp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_Ljkt1, HV_BINOP_SUBTRACT, 0, m, &cBinop_Ljkt1_sendMessage);
}

void Heavy_wakefield::cBinop_LZJKB_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_id7zw, HV_BINOP_SUBTRACT, 1, m, &cBinop_id7zw_sendMessage);
}

void Heavy_wakefield::cCast_Zciur_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_deGH6_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_pal6f_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_YvAcp, 0, m, &cVar_YvAcp_sendMessage);
}

void Heavy_wakefield::cBinop_1m7VF_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_LZJKB_sendMessage);
}

void Heavy_wakefield::cBinop_Ljkt1_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_tttSb, HV_BINOP_DIVIDE, 0, m, &cBinop_tttSb_sendMessage);
}

void Heavy_wakefield::cMsg_nosFp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_zEJdy_onMessage(_c, NULL, 0, m, NULL);
  cBinop_onMessage(_c, &Context(_c)->cBinop_R1BvH, HV_BINOP_ADD, 1, m, &cBinop_R1BvH_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_WMU34, HV_BINOP_ADD, 1, m, &cBinop_WMU34_sendMessage);
}

void Heavy_wakefield::cBinop_R1BvH_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_otqTp, 0, m, &cVar_otqTp_sendMessage);
}

void Heavy_wakefield::cBinop_V3wzR_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_tttSb, HV_BINOP_DIVIDE, 1, m, &cBinop_tttSb_sendMessage);
}

void Heavy_wakefield::cSystem_9YfXv_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_1m7VF, HV_BINOP_MULTIPLY, 1, m, &cBinop_1m7VF_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_c3E6V, HV_BINOP_MULTIPLY, 1, m, &cBinop_c3E6V_sendMessage);
}

void Heavy_wakefield::cMsg_yjEQb_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_9YfXv_sendMessage);
}

void Heavy_wakefield::cBinop_Un4OQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_0gMdd_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cVar_kkITx_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_id7zw, HV_BINOP_SUBTRACT, 0, m, &cBinop_id7zw_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_LESS_THAN_EQL, 0.0f, 0, m, &cBinop_Un4OQ_sendMessage);
}

void Heavy_wakefield::cCast_cv9j0_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_SbSjp_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_YvAcp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_bO9co_sendMessage);
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_dXlWT_sendMessage);
}

void Heavy_wakefield::cVar_otqTp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_Ljkt1, HV_BINOP_SUBTRACT, 1, m, &cBinop_Ljkt1_sendMessage);
}

void Heavy_wakefield::cMsg_SbSjp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_zEJdy_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_74EQh_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_s1t3J_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_K0SBG_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_74EQh_sendMessage);
      break;
    }
    default: {
      cBinop_onMessage(_c, &Context(_c)->cBinop_1m7VF, HV_BINOP_MULTIPLY, 0, m, &cBinop_1m7VF_sendMessage);
      cBinop_onMessage(_c, &Context(_c)->cBinop_V3wzR, HV_BINOP_DIVIDE, 1, m, &cBinop_V3wzR_sendMessage);
      cVar_onMessage(_c, &Context(_c)->cVar_Er09o, 0, m, &cVar_Er09o_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cCast_vqWcD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_fyVOD, 1, m, &cVar_fyVOD_sendMessage);
}

void Heavy_wakefield::cVar_TCL62_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_K0SBG_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_tttSb_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_R1BvH, HV_BINOP_ADD, 1, m, &cBinop_R1BvH_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_WMU34, HV_BINOP_ADD, 1, m, &cBinop_WMU34_sendMessage);
}

void Heavy_wakefield::cCast_dXlWT_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_V3wzR, HV_BINOP_DIVIDE, 0, m, &cBinop_V3wzR_sendMessage);
}

void Heavy_wakefield::cCast_bO9co_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_c3E6V, HV_BINOP_MULTIPLY, 0, m, &cBinop_c3E6V_sendMessage);
}

void Heavy_wakefield::cMsg_s1t3J_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 20.0f);
  cBinop_onMessage(_c, &Context(_c)->cBinop_1m7VF, HV_BINOP_MULTIPLY, 0, m, &cBinop_1m7VF_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_V3wzR, HV_BINOP_DIVIDE, 1, m, &cBinop_V3wzR_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_Er09o, 0, m, &cVar_Er09o_sendMessage);
}

void Heavy_wakefield::cBinop_WMU34_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_GNuH5, 1, m, &cVar_GNuH5_sendMessage);
}

void Heavy_wakefield::cCast_oHTrx_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_nosFp_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_c3E6V_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_3JWVq_sendMessage);
}

void Heavy_wakefield::cCast_wGpAu_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_nosFp_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSlice_c86qt_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_bO9co_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_dXlWT_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_CkCNY_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_vqWcD_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_07VTp_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cMsg_nZJoW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cVar_onMessage(_c, &Context(_c)->cVar_YvAcp, 1, m, &cVar_YvAcp_sendMessage);
}

void Heavy_wakefield::cVar_fyVOD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_GNuH5, 0, m, &cVar_GNuH5_sendMessage);
}

void Heavy_wakefield::cBinop_3JWVq_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_kkITx, 1, m, &cVar_kkITx_sendMessage);
}

void Heavy_wakefield::cMsg_deGH6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_zEJdy_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_G72Pa_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_oHTrx_sendMessage);
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_EPsag_sendMessage);
}

void Heavy_wakefield::cCast_X7Z8F_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_GNuH5, 0, m, &cVar_GNuH5_sendMessage);
}

void Heavy_wakefield::cSwitchcase_0gMdd_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_X7Z8F_sendMessage);
      break;
    }
    case 0x3F800000: { // "1.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_G72Pa_sendMessage);
      break;
    }
    default: {
      break;
    }
  }
}

void Heavy_wakefield::cCast_EPsag_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_fyVOD, 0, m, &cVar_fyVOD_sendMessage);
}

void Heavy_wakefield::cCast_Y7QS8_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_nZJoW_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_GNuH5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_WMU34, HV_BINOP_ADD, 0, m, &cBinop_WMU34_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_R1BvH, HV_BINOP_ADD, 0, m, &cBinop_R1BvH_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_93AqC_sendMessage);
}

void Heavy_wakefield::cVar_Er09o_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_p67Wp, HV_BINOP_MULTIPLY, 0, m, &cBinop_p67Wp_sendMessage);
}

void Heavy_wakefield::cBinop_p67Wp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_p8o5l_sendMessage);
}

void Heavy_wakefield::cBinop_zAuTD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_p67Wp, HV_BINOP_MULTIPLY, 1, m, &cBinop_p67Wp_sendMessage);
}

void Heavy_wakefield::cSwitchcase_zEJdy_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_2gi8R_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_2gi8R_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_bi9mN_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cMsg_DBjBa_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_ksQ0w_sendMessage);
}

void Heavy_wakefield::cSystem_ksQ0w_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_zAuTD_sendMessage);
}

void Heavy_wakefield::cCast_bi9mN_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_2gi8R_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_DV4v4, 0, m, &cDelay_DV4v4_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_kkITx, 0, m, &cVar_kkITx_sendMessage);
}

void Heavy_wakefield::cBinop_p8o5l_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_DV4v4, 2, m, &cDelay_DV4v4_sendMessage);
}

void Heavy_wakefield::cDelay_DV4v4_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_DV4v4, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_DV4v4, 0, m, &cDelay_DV4v4_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_kkITx, 0, m, &cVar_kkITx_sendMessage);
}

void Heavy_wakefield::cMsg_2gi8R_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_DV4v4, 0, m, &cDelay_DV4v4_sendMessage);
}

void Heavy_wakefield::cSlice_W2s1l_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_cv9j0_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_BeRJ5_sendMessage);
      break;
    }
    case 1: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_cv9j0_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_BeRJ5_sendMessage);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSwitchcase_VKo7f_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cSlice_onMessage(_c, &Context(_c)->cSlice_9PT4h, 0, m, &cSlice_9PT4h_sendMessage);
      break;
    }
    case 0x3E004DAB: { // "set"
      cSlice_onMessage(_c, &Context(_c)->cSlice_W2s1l, 0, m, &cSlice_W2s1l_sendMessage);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_pal6f_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_c86qt, 0, m, &cSlice_c86qt_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_CkCNY, 0, m, &cSlice_CkCNY_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Zciur_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Y7QS8_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cSlice_9PT4h_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cMsg_SbSjp_sendMessage(_c, 0, m);
      break;
    }
    case 1: {
      cMsg_SbSjp_sendMessage(_c, 0, m);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cBinop_id7zw_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_kkITx, 1, m, &cVar_kkITx_sendMessage);
}

void Heavy_wakefield::cMsg_ufL35_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_VKo7f_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_T6tN0_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_3XHiq, 0, m, &cDelay_3XHiq_sendMessage);
}

void Heavy_wakefield::cSwitchcase_FXnCc_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_T6tN0_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_T6tN0_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_3XHiq, 1, m, &cDelay_3XHiq_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Df37m_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cDelay_3XHiq_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_3XHiq, m);
  cMsg_1R3dc_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_Df37m_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_3XHiq, 0, m, &cDelay_3XHiq_sendMessage);
}

void Heavy_wakefield::cVar_f0sUV_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
}

void Heavy_wakefield::cCast_lPPT6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_hJrwJ, 0, m, &cDelay_hJrwJ_sendMessage);
}

void Heavy_wakefield::cMsg_w3zgI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_hJrwJ, 0, m, &cDelay_hJrwJ_sendMessage);
}

void Heavy_wakefield::cSwitchcase_O6zGJ_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_w3zgI_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_w3zgI_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_hJrwJ, 1, m, &cDelay_hJrwJ_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_lPPT6_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cDelay_hJrwJ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_hJrwJ, m);
  cMsg_MGY8v_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_93AqC_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_f0sUV, 0, m, &cVar_f0sUV_sendMessage);
  sVarf_onMessage(_c, &Context(_c)->sVarf_4srE8, m);
}

void Heavy_wakefield::cMsg_1R3dc_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1000.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_VKo7f_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_MGY8v_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_VKo7f_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cSend_AIjsQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  if (_c->getSendHook() != nullptr) _c->getSendHook()(_c, "slider1", 0xFDE4431F, m);
  cReceive_sp8wQ_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_lgx4Q_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sVarf_onMessage(_c, &Context(_c)->sVarf_VMnUs, m);
}

void Heavy_wakefield::cVar_oSHID_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSend_8Jlq1_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_cbmhF_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sPhasor_k_onMessage(_c, &Context(_c)->sPhasor_0vXTl, 0, m);
}

void Heavy_wakefield::cSend_OYhJi_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  if (_c->getSendHook() != nullptr) _c->getSendHook()(_c, "slider3", 0x3E036442, m);
  cReceive_yickW_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cReceive_IvTNs_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_SqakV, 0, m, &cVar_SqakV_sendMessage);
}

void Heavy_wakefield::cVar_8vTS2_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSend_OYhJi_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSend_8Jlq1_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  if (_c->getSendHook() != nullptr) _c->getSendHook()(_c, "slider2", 0x39459ED7, m);
  cReceive_IvTNs_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_ezpq3_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_fkMOM_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cDelay_vFF79_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_vFF79, m);
  cMsg_ezpq3_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_JPfUt_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_FLPKq_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_FLPKq_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_vFF79, 1, m, &cDelay_vFF79_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Dw2CE_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cMsg_FLPKq_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_vFF79, 0, m, &cDelay_vFF79_sendMessage);
}

void Heavy_wakefield::cCast_Dw2CE_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_vFF79, 0, m, &cDelay_vFF79_sendMessage);
}

void Heavy_wakefield::cBinop_rRtYV_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_Q20mr_sendMessage);
}

void Heavy_wakefield::cVar_2MN9w_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_jdQpl, HV_BINOP_SUBTRACT, 0, m, &cBinop_jdQpl_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_LESS_THAN_EQL, 0.0f, 0, m, &cBinop_PzLB9_sendMessage);
}

void Heavy_wakefield::cMsg_iSasi_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_n7gkb_onMessage(_c, NULL, 0, m, NULL);
  cBinop_onMessage(_c, &Context(_c)->cBinop_58ToI, HV_BINOP_ADD, 1, m, &cBinop_58ToI_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_Kt2kt, HV_BINOP_ADD, 1, m, &cBinop_Kt2kt_sendMessage);
}

void Heavy_wakefield::cCast_XKPOH_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_JiUhU, HV_BINOP_DIVIDE, 0, m, &cBinop_JiUhU_sendMessage);
}

void Heavy_wakefield::cBinop_Ct36G_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_TQalo, HV_BINOP_DIVIDE, 0, m, &cBinop_TQalo_sendMessage);
}

void Heavy_wakefield::cCast_t3myB_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_WyxSB, 1, m, &cVar_WyxSB_sendMessage);
}

void Heavy_wakefield::cBinop_TOTli_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_rgNAm_sendMessage);
}

void Heavy_wakefield::cMsg_pDCY9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_n7gkb_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_eDkIr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_SDM0F_sendMessage);
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_DTLgh_sendMessage);
}

void Heavy_wakefield::cCast_PX6DZ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_GZprb, 0, m, &cVar_GZprb_sendMessage);
}

void Heavy_wakefield::cSwitchcase_f9exh_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_PX6DZ_sendMessage);
      break;
    }
    case 0x3F800000: { // "1.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_eDkIr_sendMessage);
      break;
    }
    default: {
      break;
    }
  }
}

void Heavy_wakefield::cCast_SDM0F_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_iSasi_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_1tnL9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_1VCY6, HV_BINOP_MULTIPLY, 0, m, &cBinop_1VCY6_sendMessage);
}

void Heavy_wakefield::cCast_eWLks_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_pTNaf_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_BN0sE, 0, m, &cDelay_BN0sE_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_2MN9w, 0, m, &cVar_2MN9w_sendMessage);
}

void Heavy_wakefield::cSystem_XPaRd_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_y90xQ_sendMessage);
}

void Heavy_wakefield::cMsg_mWZkI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_XPaRd_sendMessage);
}

void Heavy_wakefield::cBinop_y90xQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_1VCY6, HV_BINOP_MULTIPLY, 1, m, &cBinop_1VCY6_sendMessage);
}

void Heavy_wakefield::cSwitchcase_n7gkb_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_pTNaf_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_pTNaf_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_eWLks_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cBinop_1VCY6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_246cf_sendMessage);
}

void Heavy_wakefield::cMsg_pTNaf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_BN0sE, 0, m, &cDelay_BN0sE_sendMessage);
}

void Heavy_wakefield::cDelay_BN0sE_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_BN0sE, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_BN0sE, 0, m, &cDelay_BN0sE_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_2MN9w, 0, m, &cVar_2MN9w_sendMessage);
}

void Heavy_wakefield::cBinop_246cf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_BN0sE, 2, m, &cDelay_BN0sE_sendMessage);
}

void Heavy_wakefield::cMsg_0qETS_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 20.0f);
  cBinop_onMessage(_c, &Context(_c)->cBinop_rRtYV, HV_BINOP_MULTIPLY, 0, m, &cBinop_rRtYV_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_JiUhU, HV_BINOP_DIVIDE, 1, m, &cBinop_JiUhU_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_1tnL9, 0, m, &cVar_1tnL9_sendMessage);
}

void Heavy_wakefield::cBinop_Q20mr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_jdQpl, HV_BINOP_SUBTRACT, 1, m, &cBinop_jdQpl_sendMessage);
}

void Heavy_wakefield::cBinop_58ToI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_9FeUh, 0, m, &cVar_9FeUh_sendMessage);
}

void Heavy_wakefield::cCast_yNG8l_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_pDCY9_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_kTWq5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_FIyz7, 0, m, &cVar_FIyz7_sendMessage);
}

void Heavy_wakefield::cVar_z6Tfu_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_zRSvm_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cSlice_uzVoJ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_A432E_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_XKPOH_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_dtbRh_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_t3myB_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_tZrUC_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cBinop_TQalo_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_58ToI, HV_BINOP_ADD, 1, m, &cBinop_58ToI_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_Kt2kt, HV_BINOP_ADD, 1, m, &cBinop_Kt2kt_sendMessage);
}

void Heavy_wakefield::cSlice_MZ2oU_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_xs7pd_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_DLxVF_sendMessage);
      break;
    }
    case 1: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_xs7pd_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_DLxVF_sendMessage);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_wk0II_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cMsg_rgSmX_sendMessage(_c, 0, m);
      break;
    }
    case 1: {
      cMsg_rgSmX_sendMessage(_c, 0, m);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSwitchcase_fkMOM_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cSlice_onMessage(_c, &Context(_c)->cSlice_wk0II, 0, m, &cSlice_wk0II_sendMessage);
      break;
    }
    case 0x3E004DAB: { // "set"
      cSlice_onMessage(_c, &Context(_c)->cSlice_MZ2oU, 0, m, &cSlice_MZ2oU_sendMessage);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_kTWq5_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_uzVoJ, 0, m, &cSlice_uzVoJ_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_dtbRh, 0, m, &cSlice_dtbRh_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_yNG8l_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_WkqC0_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cBinop_JiUhU_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_TQalo, HV_BINOP_DIVIDE, 1, m, &cBinop_TQalo_sendMessage);
}

void Heavy_wakefield::cBinop_PzLB9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_f9exh_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_5JwMx_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_iSasi_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_mpt53_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_a8nL9_sendMessage);
}

void Heavy_wakefield::cSystem_a8nL9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_rRtYV, HV_BINOP_MULTIPLY, 1, m, &cBinop_rRtYV_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_TOTli, HV_BINOP_MULTIPLY, 1, m, &cBinop_TOTli_sendMessage);
}

void Heavy_wakefield::cCast_aQFrz_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_0qETS_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_zRSvm_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_aQFrz_sendMessage);
      break;
    }
    default: {
      cBinop_onMessage(_c, &Context(_c)->cBinop_rRtYV, HV_BINOP_MULTIPLY, 0, m, &cBinop_rRtYV_sendMessage);
      cBinop_onMessage(_c, &Context(_c)->cBinop_JiUhU, HV_BINOP_DIVIDE, 1, m, &cBinop_JiUhU_sendMessage);
      cVar_onMessage(_c, &Context(_c)->cVar_1tnL9, 0, m, &cVar_1tnL9_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cCast_A432E_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_TOTli, HV_BINOP_MULTIPLY, 0, m, &cBinop_TOTli_sendMessage);
}

void Heavy_wakefield::cCast_WkqC0_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_BlMF0_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_GZprb_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_Kt2kt, HV_BINOP_ADD, 0, m, &cBinop_Kt2kt_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_58ToI, HV_BINOP_ADD, 0, m, &cBinop_58ToI_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_8zXeA_sendMessage);
}

void Heavy_wakefield::cVar_WyxSB_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_GZprb, 0, m, &cVar_GZprb_sendMessage);
}

void Heavy_wakefield::cCast_tZrUC_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_Ct36G, HV_BINOP_SUBTRACT, 0, m, &cBinop_Ct36G_sendMessage);
}

void Heavy_wakefield::cMsg_rgSmX_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_n7gkb_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cVar_FIyz7_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_A432E_sendMessage);
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_XKPOH_sendMessage);
}

void Heavy_wakefield::cCast_xs7pd_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_rgSmX_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_rgNAm_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_2MN9w, 1, m, &cVar_2MN9w_sendMessage);
}

void Heavy_wakefield::cMsg_BlMF0_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cVar_onMessage(_c, &Context(_c)->cVar_FIyz7, 1, m, &cVar_FIyz7_sendMessage);
}

void Heavy_wakefield::cVar_9FeUh_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_Ct36G, HV_BINOP_SUBTRACT, 1, m, &cBinop_Ct36G_sendMessage);
}

void Heavy_wakefield::cCast_DLxVF_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_5JwMx_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_58ToI, HV_BINOP_ADD, 0, m, &cBinop_58ToI_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_GZprb, 1, m, &cVar_GZprb_sendMessage);
}

void Heavy_wakefield::cBinop_jdQpl_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_2MN9w, 1, m, &cVar_2MN9w_sendMessage);
}

void Heavy_wakefield::cCast_DTLgh_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_WyxSB, 0, m, &cVar_WyxSB_sendMessage);
}

void Heavy_wakefield::cBinop_Kt2kt_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_GZprb, 1, m, &cVar_GZprb_sendMessage);
}

void Heavy_wakefield::cBinop_qw2XK_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sPhasor_k_onMessage(_c, &Context(_c)->sPhasor_Gfaxu, 0, m);
}

void Heavy_wakefield::cBinop_8zXeA_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_Ktkhx, 0, m, &cVar_Ktkhx_sendMessage);
  sVarf_onMessage(_c, &Context(_c)->sVarf_2Ke1c, m);
}

void Heavy_wakefield::cVar_Ktkhx_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
}

void Heavy_wakefield::cBinop_RU5UD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cUnop_onMessage(_c, HV_UNOP_FLOOR, m, &cUnop_vW8Ng_sendMessage);
}

void Heavy_wakefield::cUnop_vW8Ng_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 40.0f, 0, m, &cBinop_qw2XK_sendMessage);
}

void Heavy_wakefield::cRandom_XLdXp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MULTIPLY, 220.0f, 0, m, &cBinop_RU5UD_sendMessage);
}

void Heavy_wakefield::cMsg_HiKFw_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_fkMOM_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_tgGut_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1000.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_fkMOM_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_u5GoE_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_setoU, 0, m, &cDelay_setoU_sendMessage);
}

void Heavy_wakefield::cSwitchcase_7SoFL_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_u5GoE_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_u5GoE_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_setoU, 1, m, &cDelay_setoU_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_4Oosd_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cDelay_setoU_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_setoU, m);
  cMsg_tgGut_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_4Oosd_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_setoU, 0, m, &cDelay_setoU_sendMessage);
}

void Heavy_wakefield::cCast_7rhQx_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_HiKFw_sendMessage(_c, 0, m);
  cSwitchcase_7SoFL_onMessage(_c, NULL, 0, m, NULL);
  cSwitchcase_JPfUt_onMessage(_c, NULL, 0, m, NULL);
  cRandom_onMessage(_c, &Context(_c)->cRandom_XLdXp, 0, m, &cRandom_XLdXp_sendMessage);
}

void Heavy_wakefield::cCast_t9Jji_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_zc8r5_sendMessage(_c, 0, m);
  cSwitchcase_BGBvp_onMessage(_c, NULL, 0, m, NULL);
  cSwitchcase_Xpo4m_onMessage(_c, NULL, 0, m, NULL);
  cRandom_onMessage(_c, &Context(_c)->cRandom_Eqsie, 0, m, &cRandom_Eqsie_sendMessage);
}

void Heavy_wakefield::cCast_ilktn_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_ufL35_sendMessage(_c, 0, m);
  cSwitchcase_FXnCc_onMessage(_c, NULL, 0, m, NULL);
  cSwitchcase_O6zGJ_onMessage(_c, NULL, 0, m, NULL);
  cRandom_onMessage(_c, &Context(_c)->cRandom_i6i0T, 0, m, &cRandom_i6i0T_sendMessage);
}

void Heavy_wakefield::cCast_xPH6F_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_2Toct_sendMessage(_c, 0, m);
  cSwitchcase_NK4en_onMessage(_c, NULL, 0, m, NULL);
  cSwitchcase_qHCbW_onMessage(_c, NULL, 0, m, NULL);
  cRandom_onMessage(_c, &Context(_c)->cRandom_8H3aC, 0, m, &cRandom_8H3aC_sendMessage);
}

void Heavy_wakefield::cSwitchcase_FIH9z_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_xPH6F_sendMessage);
      break;
    }
    case 0x3F800000: { // "1.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_ilktn_sendMessage);
      break;
    }
    case 0x40000000: { // "2.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_t9Jji_sendMessage);
      break;
    }
    case 0x40400000: { // "3.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_7rhQx_sendMessage);
      break;
    }
    default: {
      break;
    }
  }
}




/*
 * Context Process Implementation
 */

int Heavy_wakefield::process(float **inputBuffers, float **outputBuffers, int n) {
  while (hLp_hasData(&inQueue)) {
    hv_uint32_t numBytes = 0;
    ReceiverMessagePair *p = reinterpret_cast<ReceiverMessagePair *>(hLp_getReadBuffer(&inQueue, &numBytes));
    hv_assert(numBytes >= sizeof(ReceiverMessagePair));
    scheduleMessageForReceiver(p->receiverHash, &p->msg);
    hLp_consume(&inQueue);
  }
  const int n4 = n & ~HV_N_SIMD_MASK; // ensure that the block size is a multiple of HV_N_SIMD

  // temporary signal vars
  hv_bufferf_t Bf0, Bf1, Bf2, Bf3, Bf4, Bf5, Bf6, Bf7;

  // input and output vars
  hv_bufferf_t O0, O1;

  // declare and init the zero buffer
  hv_bufferf_t ZERO; __hv_zero_f(VOf(ZERO));

  hv_uint32_t nextBlock = blockStartTimestamp;
  for (int n = 0; n < n4; n += HV_N_SIMD) {

    // process all of the messages for this block
    nextBlock += HV_N_SIMD;
    while (mq_hasMessageBefore(&mq, nextBlock)) {
      MessageNode *const node = mq_peek(&mq);
      node->sendMessage(this, node->let, node->m);
      mq_pop(&mq);
    }

    

    // zero output buffers
    __hv_zero_f(VOf(O0));
    __hv_zero_f(VOf(O1));

    // process all signal functions
    __hv_phasor_k_f(&sPhasor_1IMCa, VOf(Bf0));
    __hv_varread_f(&sVarf_Nwd47, VOf(Bf1));
    __hv_mul_f(VIf(Bf0), VIf(Bf1), VOf(Bf1));
    __hv_phasor_k_f(&sPhasor_RIqN6, VOf(Bf0));
    __hv_varread_f(&sVarf_4srE8, VOf(Bf2));
    __hv_mul_f(VIf(Bf0), VIf(Bf2), VOf(Bf2));
    __hv_add_f(VIf(Bf1), VIf(Bf2), VOf(Bf2));
    __hv_phasor_k_f(&sPhasor_qjSQ2, VOf(Bf1));
    __hv_varread_f(&sVarf_756gX, VOf(Bf0));
    __hv_mul_f(VIf(Bf1), VIf(Bf0), VOf(Bf0));
    __hv_add_f(VIf(Bf2), VIf(Bf0), VOf(Bf0));
    __hv_phasor_k_f(&sPhasor_Gfaxu, VOf(Bf2));
    __hv_varread_f(&sVarf_2Ke1c, VOf(Bf1));
    __hv_mul_f(VIf(Bf2), VIf(Bf1), VOf(Bf1));
    __hv_add_f(VIf(Bf0), VIf(Bf1), VOf(Bf1));
    __hv_phasor_k_f(&sPhasor_0vXTl, VOf(Bf0));
    __hv_var_k_f(VOf(Bf2), 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f);
    __hv_sub_f(VIf(Bf0), VIf(Bf2), VOf(Bf2));
    __hv_abs_f(VIf(Bf2), VOf(Bf2));
    __hv_var_k_f(VOf(Bf0), 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f);
    __hv_sub_f(VIf(Bf2), VIf(Bf0), VOf(Bf0));
    __hv_var_k_f(VOf(Bf2), 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f);
    __hv_mul_f(VIf(Bf0), VIf(Bf2), VOf(Bf2));
    __hv_mul_f(VIf(Bf2), VIf(Bf2), VOf(Bf0));
    __hv_mul_f(VIf(Bf2), VIf(Bf0), VOf(Bf3));
    __hv_mul_f(VIf(Bf3), VIf(Bf0), VOf(Bf0));
    __hv_var_k_f(VOf(Bf4), 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f);
    __hv_var_k_f(VOf(Bf5), 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f);
    __hv_mul_f(VIf(Bf3), VIf(Bf5), VOf(Bf5));
    __hv_sub_f(VIf(Bf2), VIf(Bf5), VOf(Bf5));
    __hv_fma_f(VIf(Bf0), VIf(Bf4), VIf(Bf5), VOf(Bf5));
    __hv_varread_f(&sVarf_67ym6, VOf(Bf4));
    __hv_varread_f(&sVarf_SqjYg, VOf(Bf0));
    __hv_fma_f(VIf(Bf5), VIf(Bf4), VIf(Bf0), VOf(Bf0));
    __hv_phasor_f(&sPhasor_UluKl, VIf(Bf0), VOf(Bf0));
    __hv_var_k_f(VOf(Bf4), 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f);
    __hv_sub_f(VIf(Bf0), VIf(Bf4), VOf(Bf4));
    __hv_abs_f(VIf(Bf4), VOf(Bf4));
    __hv_var_k_f(VOf(Bf0), 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f);
    __hv_sub_f(VIf(Bf4), VIf(Bf0), VOf(Bf0));
    __hv_var_k_f(VOf(Bf4), 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f);
    __hv_mul_f(VIf(Bf0), VIf(Bf4), VOf(Bf4));
    __hv_mul_f(VIf(Bf4), VIf(Bf4), VOf(Bf0));
    __hv_mul_f(VIf(Bf4), VIf(Bf0), VOf(Bf5));
    __hv_mul_f(VIf(Bf5), VIf(Bf0), VOf(Bf0));
    __hv_var_k_f(VOf(Bf2), 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f);
    __hv_var_k_f(VOf(Bf3), 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f);
    __hv_mul_f(VIf(Bf5), VIf(Bf3), VOf(Bf3));
    __hv_sub_f(VIf(Bf4), VIf(Bf3), VOf(Bf3));
    __hv_fma_f(VIf(Bf0), VIf(Bf2), VIf(Bf3), VOf(Bf3));
    __hv_varread_f(&sVarf_VMnUs, VOf(Bf2));
    __hv_add_f(VIf(Bf3), VIf(Bf2), VOf(Bf2));
    __hv_varread_f(&sVarf_8XRWS, VOf(Bf3));
    __hv_mul_f(VIf(Bf2), VIf(Bf3), VOf(Bf3));
    __hv_var_k_f(VOf(Bf2), 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f);
    __hv_zero_f(VOf(Bf0));
    __hv_max_f(VIf(Bf3), VIf(Bf0), VOf(Bf0));
    __hv_varread_f(&sVarf_e79PD, VOf(Bf3));
    __hv_mul_f(VIf(Bf0), VIf(Bf3), VOf(Bf3));
    __hv_var_k_f(VOf(Bf0), 6.28318f, 6.28318f, 6.28318f, 6.28318f, 6.28318f, 6.28318f, 6.28318f, 6.28318f);
    __hv_mul_f(VIf(Bf3), VIf(Bf0), VOf(Bf0));
    __hv_varread_f(&sVarf_Kerkt, VOf(Bf4));
    __hv_mul_f(VIf(Bf0), VIf(Bf4), VOf(Bf4));
    __hv_sub_f(VIf(Bf4), VIf(Bf2), VOf(Bf4));
    __hv_varread_f(&sVarf_5bgQx, VOf(Bf0));
    __hv_zero_f(VOf(Bf5));
    __hv_neq_f(VIf(Bf0), VIf(Bf5), VOf(Bf5));
    __hv_and_f(VIf(Bf4), VIf(Bf5), VOf(Bf5));
    __hv_zero_f(VOf(Bf4));
    __hv_min_f(VIf(Bf5), VIf(Bf4), VOf(Bf4));
    __hv_add_f(VIf(Bf2), VIf(Bf4), VOf(Bf2));
    __hv_varread_f(&sVarf_xcMfN, VOf(Bf5));
    __hv_mul_f(VIf(Bf2), VIf(Bf5), VOf(Bf5));
    __hv_mul_f(VIf(Bf1), VIf(Bf5), VOf(Bf5));
    __hv_floor_f(VIf(Bf3), VOf(Bf1));
    __hv_sub_f(VIf(Bf3), VIf(Bf1), VOf(Bf1));
    __hv_var_k_f(VOf(Bf2), 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f);
    __hv_sub_f(VIf(Bf1), VIf(Bf2), VOf(Bf2));
    __hv_abs_f(VIf(Bf2), VOf(Bf2));
    __hv_var_k_f(VOf(Bf1), 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f);
    __hv_sub_f(VIf(Bf2), VIf(Bf1), VOf(Bf1));
    __hv_var_k_f(VOf(Bf2), 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f);
    __hv_mul_f(VIf(Bf1), VIf(Bf2), VOf(Bf2));
    __hv_mul_f(VIf(Bf2), VIf(Bf2), VOf(Bf1));
    __hv_mul_f(VIf(Bf2), VIf(Bf1), VOf(Bf0));
    __hv_mul_f(VIf(Bf0), VIf(Bf1), VOf(Bf1));
    __hv_var_k_f(VOf(Bf6), 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f);
    __hv_var_k_f(VOf(Bf7), 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f);
    __hv_mul_f(VIf(Bf0), VIf(Bf7), VOf(Bf7));
    __hv_sub_f(VIf(Bf2), VIf(Bf7), VOf(Bf7));
    __hv_fma_f(VIf(Bf1), VIf(Bf6), VIf(Bf7), VOf(Bf7));
    __hv_mul_f(VIf(Bf4), VIf(Bf7), VOf(Bf7));
    __hv_var_k_f(VOf(Bf6), 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f);
    __hv_sub_f(VIf(Bf3), VIf(Bf6), VOf(Bf6));
    __hv_floor_f(VIf(Bf6), VOf(Bf3));
    __hv_sub_f(VIf(Bf6), VIf(Bf3), VOf(Bf3));
    __hv_var_k_f(VOf(Bf6), 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f);
    __hv_sub_f(VIf(Bf3), VIf(Bf6), VOf(Bf6));
    __hv_abs_f(VIf(Bf6), VOf(Bf6));
    __hv_var_k_f(VOf(Bf3), 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f);
    __hv_sub_f(VIf(Bf6), VIf(Bf3), VOf(Bf3));
    __hv_var_k_f(VOf(Bf6), 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f);
    __hv_mul_f(VIf(Bf3), VIf(Bf6), VOf(Bf6));
    __hv_mul_f(VIf(Bf6), VIf(Bf6), VOf(Bf3));
    __hv_mul_f(VIf(Bf6), VIf(Bf3), VOf(Bf1));
    __hv_mul_f(VIf(Bf1), VIf(Bf3), VOf(Bf3));
    __hv_var_k_f(VOf(Bf2), 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f);
    __hv_var_k_f(VOf(Bf0), 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f);
    __hv_mul_f(VIf(Bf1), VIf(Bf0), VOf(Bf0));
    __hv_sub_f(VIf(Bf6), VIf(Bf0), VOf(Bf0));
    __hv_fma_f(VIf(Bf3), VIf(Bf2), VIf(Bf0), VOf(Bf0));
    __hv_mul_f(VIf(Bf4), VIf(Bf0), VOf(Bf0));
    __hv_cpole_f(&sCPole_v9h3j, VIf(Bf5), VIf(ZERO), VIf(Bf7), VIf(Bf0), VOf(Bf0), VOf(Bf7));
    __hv_add_f(VIf(Bf7), VIf(O1), VOf(O1));
    __hv_add_f(VIf(Bf7), VIf(O0), VOf(O0));

    // save output vars to output buffer
    __hv_store_f(outputBuffers[0]+n, VIf(O0));
    __hv_store_f(outputBuffers[1]+n, VIf(O1));
  }

  blockStartTimestamp = nextBlock;

  return n4; // return the number of frames processed
}

int Heavy_wakefield::processInline(float *inputBuffers, float *outputBuffers, int n4) {
  hv_assert(!(n4 & HV_N_SIMD_MASK)); // ensure that n4 is a multiple of HV_N_SIMD

  // define the heavy input buffer for 0 channel(s)
  float **const bIn = NULL;

  // define the heavy output buffer for 2 channel(s)
  float **const bOut = reinterpret_cast<float **>(hv_alloca(2*sizeof(float *)));
  bOut[0] = outputBuffers+(0*n4);
  bOut[1] = outputBuffers+(1*n4);

  int n = process(bIn, bOut, n4);
  return n;
}

int Heavy_wakefield::processInlineInterleaved(float *inputBuffers, float *outputBuffers, int n4) {
  hv_assert(n4 & ~HV_N_SIMD_MASK); // ensure that n4 is a multiple of HV_N_SIMD

  // define the heavy input buffer for 0 channel(s), uninterleave
  float *const bIn = NULL;

  // define the heavy output buffer for 2 channel(s)
  float *const bOut = reinterpret_cast<float *>(hv_alloca(2*n4*sizeof(float)));

  int n = processInline(bIn, bOut, n4);

  // interleave the heavy output into the output buffer
  #if HV_SIMD_AVX
  for (int i = 0, j = 0; j < n4; j += 8, i += 16) {
    __m256 x = _mm256_load_ps(bOut+j);    // LLLLLLLL
    __m256 y = _mm256_load_ps(bOut+n4+j); // RRRRRRRR
    __m256 a = _mm256_unpacklo_ps(x, y);  // LRLRLRLR
    __m256 b = _mm256_unpackhi_ps(x, y);  // LRLRLRLR
    _mm256_store_ps(outputBuffers+i, a);
    _mm256_store_ps(outputBuffers+8+i, b);
  }
  #elif HV_SIMD_SSE
  for (int i = 0, j = 0; j < n4; j += 4, i += 8) {
    __m128 x = _mm_load_ps(bOut+j);    // LLLL
    __m128 y = _mm_load_ps(bOut+n4+j); // RRRR
    __m128 a = _mm_unpacklo_ps(x, y);  // LRLR
    __m128 b = _mm_unpackhi_ps(x, y);  // LRLR
    _mm_store_ps(outputBuffers+i, a);
    _mm_store_ps(outputBuffers+4+i, b);
  }
  #elif HV_SIMD_NEON
  // https://community.arm.com/groups/processors/blog/2012/03/13/coding-for-neon--part-5-rearranging-vectors
  for (int i = 0, j = 0; j < n4; j += 4, i += 8) {
    float32x4_t x = vld1q_f32(bOut+j);
    float32x4_t y = vld1q_f32(bOut+n4+j);
    float32x4x2_t z = {x, y};
    vst2q_f32(outputBuffers+i, z); // interleave and store
  }
  #else // HV_SIMD_NONE
  for (int i = 0; i < 2; ++i) {
    for (int j = 0; j < n4; ++j) {
      outputBuffers[i+2*j] = bOut[i*n4+j];
    }
  }
  #endif

  return n;
}
