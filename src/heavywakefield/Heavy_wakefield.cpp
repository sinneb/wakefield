/**
 * Copyright (c) 2017 Enzien Audio, Ltd.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, and/or
 * sublicense copies of the Software, strictly on a non-commercial basis,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 * 
 * DO NOT MODIFY. THIS CODE IS MACHINE GENERATED BY THE ENZIEN AUDIO HEAVY COMPILER
 */

#include "Heavy_wakefield.hpp"

#define Context(_c) reinterpret_cast<Heavy_wakefield *>(_c)



/*
 * C Functions
 */

extern "C" {
  HV_EXPORT HeavyContextInterface *hv_wakefield_new(double sampleRate) {
    return new Heavy_wakefield(sampleRate);
  }

  HV_EXPORT HeavyContextInterface *hv_wakefield_new_with_options(double sampleRate,
      int poolKb, int inQueueKb, int outQueueKb) {
    return new Heavy_wakefield(sampleRate, poolKb, inQueueKb, outQueueKb);
  }
} // extern "C"







/*
 * Class Functions
 */

Heavy_wakefield::Heavy_wakefield(double sampleRate, int poolKb, int inQueueKb, int outQueueKb)
    : HeavyContext(sampleRate, poolKb, inQueueKb, outQueueKb) {
  numBytes += sPhasor_k_init(&sPhasor_ftsRB, 0.0f, sampleRate);
  numBytes += sPhasor_k_init(&sPhasor_Q8cNj, 0.0f, sampleRate);
  numBytes += sPhasor_k_init(&sPhasor_xdUes, 0.0f, sampleRate);
  numBytes += sPhasor_k_init(&sPhasor_HIn0f, 0.0f, sampleRate);
  numBytes += sPhasor_k_init(&sPhasor_hOSTE, 3.0f, sampleRate);
  numBytes += sCPole_init(&sCPole_B0Kyn);
  numBytes += cVar_init_f(&cVar_FQ0fc, 0.0f);
  numBytes += cDelay_init(this, &cDelay_ZleGm, 1.0f);
  numBytes += cBinop_init(&cBinop_AdgI3, 0.0f); // __mul
  numBytes += cBinop_init(&cBinop_UdLmg, 0.0f); // __sub
  numBytes += cSlice_init(&cSlice_GjNtD, 0, 1);
  numBytes += cSlice_init(&cSlice_VKgFa, 1, 1);
  numBytes += cBinop_init(&cBinop_yvTdX, 0.0f); // __add
  numBytes += cVar_init_f(&cVar_Co3Xx, 0.0f);
  numBytes += cBinop_init(&cBinop_Qw0EI, 0.0f); // __mul
  numBytes += cBinop_init(&cBinop_sHegG, 0.0f); // __add
  numBytes += cSlice_init(&cSlice_KHk21, 1, -1);
  numBytes += cSlice_init(&cSlice_8ifZD, 1, -1);
  numBytes += cBinop_init(&cBinop_UAMN7, 20.0f); // __div
  numBytes += cVar_init_f(&cVar_sIYGu, 20.0f);
  numBytes += cVar_init_f(&cVar_uKzLw, 0.0f);
  numBytes += cVar_init_f(&cVar_njtzp, 0.0f);
  numBytes += cBinop_init(&cBinop_GeXf3, 0.0f); // __div
  numBytes += cVar_init_f(&cVar_Jp3ps, 0.0f);
  numBytes += cVar_init_f(&cVar_AYuVQ, 0.0f);
  numBytes += cDelay_init(this, &cDelay_4H1Ca, 0.0f);
  numBytes += cVar_init_f(&cVar_6cuFK, 20.0f);
  numBytes += cBinop_init(&cBinop_ykJms, 0.0f); // __mul
  numBytes += cBinop_init(&cBinop_W0Zw0, 0.0f); // __sub
  numBytes += sVarf_init(&sVarf_cZQaS, 0.0f, 0.0f, false);
  numBytes += cVar_init_f(&cVar_z3VcB, 0.0f);
  numBytes += cRandom_init(&cRandom_DRWVZ, 781028793);
  numBytes += cDelay_init(this, &cDelay_es5os, 1500.0f);
  numBytes += cVar_init_f(&cVar_amRDD, 1000.0f);
  numBytes += cDelay_init(this, &cDelay_Z312h, 0.0f);
  numBytes += cBinop_init(&cBinop_6cO5X, 0.0f); // __mul
  numBytes += cVar_init_f(&cVar_7Dnb5, 0.0f);
  numBytes += sVarf_init(&sVarf_3eq55, 0.0f, 0.0f, false);
  numBytes += sVarf_init(&sVarf_Ybc5G, 0.0f, 0.0f, false);
  numBytes += sVarf_init(&sVarf_uBN1s, 1.0f, 0.0f, false);
  numBytes += sVarf_init(&sVarf_F2I5S, 0.0f, 0.0f, false);
  numBytes += cVar_init_f(&cVar_AytYM, 1.0f);
  numBytes += cIf_init(&cIf_HVs9K, false);
  numBytes += cVar_init_f(&cVar_6It7r, 0.0f);
  numBytes += cDelay_init(this, &cDelay_g4yLe, 1.0f);
  numBytes += cRandom_init(&cRandom_q0zlZ, 645143611);
  numBytes += cVar_init_f(&cVar_FU8k6, 0.0f);
  numBytes += cBinop_init(&cBinop_h3nYr, 0.0f); // __add
  numBytes += cVar_init_f(&cVar_vFJg8, 20.0f);
  numBytes += cVar_init_f(&cVar_k18M1, 0.0f);
  numBytes += cBinop_init(&cBinop_hF84I, 0.0f); // __sub
  numBytes += cVar_init_f(&cVar_qsZJR, 0.0f);
  numBytes += cVar_init_f(&cVar_onxLx, 0.0f);
  numBytes += cSlice_init(&cSlice_kbEEk, 1, -1);
  numBytes += cSlice_init(&cSlice_HMnZk, 1, -1);
  numBytes += cVar_init_f(&cVar_GFfKi, 0.0f);
  numBytes += cBinop_init(&cBinop_ZUdXn, 20.0f); // __div
  numBytes += cBinop_init(&cBinop_GIFo1, 0.0f); // __add
  numBytes += cVar_init_f(&cVar_zLGs5, 20.0f);
  numBytes += cBinop_init(&cBinop_vhwTC, 0.0f); // __mul
  numBytes += cDelay_init(this, &cDelay_wV3ap, 0.0f);
  numBytes += cBinop_init(&cBinop_5sYis, 0.0f); // __sub
  numBytes += cSlice_init(&cSlice_vzjTw, 1, 1);
  numBytes += cSlice_init(&cSlice_IrQNI, 0, 1);
  numBytes += cBinop_init(&cBinop_GgmOQ, 0.0f); // __mul
  numBytes += cVar_init_f(&cVar_k76tD, 0.0f);
  numBytes += cBinop_init(&cBinop_LCuNU, 0.0f); // __mul
  numBytes += cBinop_init(&cBinop_3sgQp, 0.0f); // __div
  numBytes += cDelay_init(this, &cDelay_pmBUO, 1500.0f);
  numBytes += sVarf_init(&sVarf_JAzpx, 0.0f, 0.0f, false);
  numBytes += cVar_init_f(&cVar_LdUpL, 0.0f);
  numBytes += cVar_init_f(&cVar_pmV1D, 0.0f);
  numBytes += cVar_init_f(&cVar_LFA0Q, 20.0f);
  numBytes += cVar_init_f(&cVar_qgQI9, 0.0f);
  numBytes += cBinop_init(&cBinop_fWyM5, 20.0f); // __div
  numBytes += cBinop_init(&cBinop_WGgwD, 0.0f); // __mul
  numBytes += cBinop_init(&cBinop_qqCA1, 0.0f); // __mul
  numBytes += cSlice_init(&cSlice_oie8N, 1, -1);
  numBytes += cSlice_init(&cSlice_iXewc, 1, -1);
  numBytes += cDelay_init(this, &cDelay_35VIn, 0.0f);
  numBytes += cVar_init_f(&cVar_A58DI, 20.0f);
  numBytes += cBinop_init(&cBinop_9FyxJ, 0.0f); // __mul
  numBytes += cBinop_init(&cBinop_TsxbX, 0.0f); // __add
  numBytes += cVar_init_f(&cVar_44YAN, 0.0f);
  numBytes += cVar_init_f(&cVar_HHqDI, 0.0f);
  numBytes += cBinop_init(&cBinop_avrwU, 0.0f); // __div
  numBytes += cBinop_init(&cBinop_8uNOu, 0.0f); // __sub
  numBytes += cBinop_init(&cBinop_CNzJm, 0.0f); // __sub
  numBytes += cSlice_init(&cSlice_7mMO5, 0, 1);
  numBytes += cSlice_init(&cSlice_e5d2D, 1, 1);
  numBytes += cBinop_init(&cBinop_Uuh5y, 0.0f); // __add
  numBytes += cDelay_init(this, &cDelay_fA6mn, 1.0f);
  numBytes += sVarf_init(&sVarf_Xa5rC, 0.0f, 0.0f, false);
  numBytes += cVar_init_f(&cVar_XUL8o, 0.0f);
  numBytes += cDelay_init(this, &cDelay_e4CWo, 1500.0f);
  numBytes += cRandom_init(&cRandom_zpe8E, -792238218);
  numBytes += cDelay_init(this, &cDelay_vvWlW, 1.0f);
  numBytes += sVarf_init(&sVarf_Pg8kc, 0.0f, 0.0f, false);
  numBytes += cDelay_init(this, &cDelay_hmeAQ, 1500.0f);
  numBytes += cRandom_init(&cRandom_vnUT7, 1441140459);
  numBytes += cVar_init_f(&cVar_KHwPZ, 0.0f);
  numBytes += cSlice_init(&cSlice_PETJs, 1, -1);
  numBytes += cSlice_init(&cSlice_FQfEY, 1, -1);
  numBytes += cBinop_init(&cBinop_SYnR3, 0.0f); // __add
  numBytes += cBinop_init(&cBinop_LJxxJ, 0.0f); // __sub
  numBytes += cBinop_init(&cBinop_lS1jG, 0.0f); // __add
  numBytes += cBinop_init(&cBinop_p6nlH, 0.0f); // __sub
  numBytes += cVar_init_f(&cVar_txZAV, 20.0f);
  numBytes += cVar_init_f(&cVar_F6U3X, 0.0f);
  numBytes += cBinop_init(&cBinop_0TVSM, 20.0f); // __div
  numBytes += cBinop_init(&cBinop_GVCLx, 0.0f); // __mul
  numBytes += cSlice_init(&cSlice_jFrtB, 1, 1);
  numBytes += cSlice_init(&cSlice_BUtG2, 0, 1);
  numBytes += cVar_init_f(&cVar_2fSK1, 0.0f);
  numBytes += cBinop_init(&cBinop_gNXqo, 0.0f); // __div
  numBytes += cVar_init_f(&cVar_pTuc0, 0.0f);
  numBytes += cVar_init_f(&cVar_43xC9, 0.0f);
  numBytes += cVar_init_f(&cVar_WASwT, 0.0f);
  numBytes += cBinop_init(&cBinop_tXFLZ, 0.0f); // __mul
  numBytes += cDelay_init(this, &cDelay_HA4FC, 0.0f);
  numBytes += cBinop_init(&cBinop_mBJlg, 0.0f); // __mul
  numBytes += cVar_init_f(&cVar_mSpPd, 20.0f);
  
  // schedule a message to trigger all loadbangs via the __hv_init receiver
  scheduleMessageForReceiver(0xCE5CC65B, msg_initWithBang(HV_MESSAGE_ON_STACK(1), 0));
}

Heavy_wakefield::~Heavy_wakefield() {
  // nothing to free
}

HvTable *Heavy_wakefield::getTableForHash(hv_uint32_t tableHash) {
  return nullptr;
}

void Heavy_wakefield::scheduleMessageForReceiver(hv_uint32_t receiverHash, HvMessage *m) {
  switch (receiverHash) {
    case 0xCE5CC65B: { // __hv_init
      mq_addMessageByTimestamp(&mq, m, 0, &cReceive_xvJXb_sendMessage);
      break;
    }
    case 0x823193A6: { // thefloat
      mq_addMessageByTimestamp(&mq, m, 0, &cReceive_5CqqX_sendMessage);
      break;
    }
    default: return;
  }
}

int Heavy_wakefield::getParameterInfo(int index, HvParameterInfo *info) {
  if (info != nullptr) {
    switch (index) {
      default: {
        info->name = "invalid parameter index";
        info->hash = 0;
        info->type = HvParameterType::HV_PARAM_TYPE_PARAMETER;
        info->minVal = 0.0f;
        info->maxVal = 0.0f;
        info->defaultVal = 0.0f;
        break;
      }
    }
  }
  return 0;
}



/*
 * Send Function Implementations
 */


void Heavy_wakefield::cVar_FQ0fc_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
}

void Heavy_wakefield::cReceive_5CqqX_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_6It7r, 0, m, &cVar_6It7r_sendMessage);
}

void Heavy_wakefield::cMsg_803a1_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_Ekwk9_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_wQ4Su_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_ZleGm, 0, m, &cDelay_ZleGm_sendMessage);
}

void Heavy_wakefield::cSwitchcase_xqeAn_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_wQ4Su_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_wQ4Su_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_ZleGm, 1, m, &cDelay_ZleGm_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_eC6MF_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cDelay_ZleGm_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_ZleGm, m);
  cMsg_CDJY8_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_eC6MF_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_ZleGm, 0, m, &cDelay_ZleGm_sendMessage);
}

void Heavy_wakefield::cCast_Cblx0_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_HsGUF_sendMessage);
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_5x797_sendMessage);
}

void Heavy_wakefield::cCast_L9FmR_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_uKzLw, 0, m, &cVar_uKzLw_sendMessage);
}

void Heavy_wakefield::cSwitchcase_pk2YN_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_L9FmR_sendMessage);
      break;
    }
    case 0x3F800000: { // "1.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Cblx0_sendMessage);
      break;
    }
    default: {
      break;
    }
  }
}

void Heavy_wakefield::cCast_5VPka_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_jyJSC_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_AdgI3_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_BDpRM_sendMessage);
}

void Heavy_wakefield::cBinop_UdLmg_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_GeXf3, HV_BINOP_DIVIDE, 0, m, &cBinop_GeXf3_sendMessage);
}

void Heavy_wakefield::cCast_yqrnD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_EafXp_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_yvTdX, HV_BINOP_ADD, 0, m, &cBinop_yvTdX_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_uKzLw, 1, m, &cVar_uKzLw_sendMessage);
}

void Heavy_wakefield::cMsg_oiXMf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_p9bvN_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_Sm7iO_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_uvsUX_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSlice_GjNtD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_Xc8ne_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_AVTBo_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_VKgFa_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_ezzso_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_c4Xgy_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cBinop_yvTdX_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_njtzp, 0, m, &cVar_njtzp_sendMessage);
}

void Heavy_wakefield::cVar_Co3Xx_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_uKzLw, 0, m, &cVar_uKzLw_sendMessage);
}

void Heavy_wakefield::cBinop_Qw0EI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_uei9c_sendMessage);
}

void Heavy_wakefield::cBinop_uei9c_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_W0Zw0, HV_BINOP_SUBTRACT, 1, m, &cBinop_W0Zw0_sendMessage);
}

void Heavy_wakefield::cBinop_sHegG_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_uKzLw, 1, m, &cVar_uKzLw_sendMessage);
}

void Heavy_wakefield::cSlice_KHk21_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cMsg_uvsUX_sendMessage(_c, 0, m);
      break;
    }
    case 1: {
      cMsg_uvsUX_sendMessage(_c, 0, m);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSwitchcase_Ekwk9_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cSlice_onMessage(_c, &Context(_c)->cSlice_KHk21, 0, m, &cSlice_KHk21_sendMessage);
      break;
    }
    case 0x3E004DAB: { // "set"
      cSlice_onMessage(_c, &Context(_c)->cSlice_8ifZD, 0, m, &cSlice_8ifZD_sendMessage);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_LB1pW_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_VKgFa, 0, m, &cSlice_VKgFa_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_GjNtD, 0, m, &cSlice_GjNtD_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_vvgGs_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_5VPka_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cSlice_8ifZD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Sm7iO_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_yqrnD_sendMessage);
      break;
    }
    case 1: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Sm7iO_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_yqrnD_sendMessage);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cCast_Xc8ne_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_Co3Xx, 1, m, &cVar_Co3Xx_sendMessage);
}

void Heavy_wakefield::cBinop_UAMN7_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_GeXf3, HV_BINOP_DIVIDE, 1, m, &cBinop_GeXf3_sendMessage);
}

void Heavy_wakefield::cCast_ezzso_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_AdgI3, HV_BINOP_MULTIPLY, 0, m, &cBinop_AdgI3_sendMessage);
}

void Heavy_wakefield::cVar_sIYGu_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_1rhmu_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_FlYOr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_R6alg_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_1rhmu_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_FlYOr_sendMessage);
      break;
    }
    default: {
      cBinop_onMessage(_c, &Context(_c)->cBinop_Qw0EI, HV_BINOP_MULTIPLY, 0, m, &cBinop_Qw0EI_sendMessage);
      cBinop_onMessage(_c, &Context(_c)->cBinop_UAMN7, HV_BINOP_DIVIDE, 1, m, &cBinop_UAMN7_sendMessage);
      cVar_onMessage(_c, &Context(_c)->cVar_6cuFK, 0, m, &cVar_6cuFK_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cCast_EafXp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_j1aVN_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_uKzLw_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_sHegG, HV_BINOP_ADD, 0, m, &cBinop_sHegG_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_yvTdX, HV_BINOP_ADD, 0, m, &cBinop_yvTdX_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_lkf3x_sendMessage);
}

void Heavy_wakefield::cVar_njtzp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_UdLmg, HV_BINOP_SUBTRACT, 1, m, &cBinop_UdLmg_sendMessage);
}

void Heavy_wakefield::cBinop_GeXf3_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_yvTdX, HV_BINOP_ADD, 1, m, &cBinop_yvTdX_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_sHegG, HV_BINOP_ADD, 1, m, &cBinop_sHegG_sendMessage);
}

void Heavy_wakefield::cMsg_R6alg_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 20.0f);
  cBinop_onMessage(_c, &Context(_c)->cBinop_Qw0EI, HV_BINOP_MULTIPLY, 0, m, &cBinop_Qw0EI_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_UAMN7, HV_BINOP_DIVIDE, 1, m, &cBinop_UAMN7_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_6cuFK, 0, m, &cVar_6cuFK_sendMessage);
}

void Heavy_wakefield::cVar_Jp3ps_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_W0Zw0, HV_BINOP_SUBTRACT, 0, m, &cBinop_W0Zw0_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_LESS_THAN_EQL, 0.0f, 0, m, &cBinop_5dnHB_sendMessage);
}

void Heavy_wakefield::cVar_AYuVQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_ezzso_sendMessage);
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_c4Xgy_sendMessage);
}

void Heavy_wakefield::cCast_HsGUF_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_j1aVN_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_BDpRM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_Jp3ps, 1, m, &cVar_Jp3ps_sendMessage);
}

void Heavy_wakefield::cDelay_4H1Ca_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_4H1Ca, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_4H1Ca, 0, m, &cDelay_4H1Ca_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_Jp3ps, 0, m, &cVar_Jp3ps_sendMessage);
}

void Heavy_wakefield::cCast_KJzHX_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_noECo_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_4H1Ca, 0, m, &cDelay_4H1Ca_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_Jp3ps, 0, m, &cVar_Jp3ps_sendMessage);
}

void Heavy_wakefield::cSwitchcase_p9bvN_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_noECo_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_noECo_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_KJzHX_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cSystem_ffGQg_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_ariWu_sendMessage);
}

void Heavy_wakefield::cMsg_DnW96_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_ffGQg_sendMessage);
}

void Heavy_wakefield::cVar_6cuFK_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_ykJms, HV_BINOP_MULTIPLY, 0, m, &cBinop_ykJms_sendMessage);
}

void Heavy_wakefield::cBinop_ok2x4_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_4H1Ca, 2, m, &cDelay_4H1Ca_sendMessage);
}

void Heavy_wakefield::cBinop_ykJms_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_ok2x4_sendMessage);
}

void Heavy_wakefield::cBinop_ariWu_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_ykJms, HV_BINOP_MULTIPLY, 1, m, &cBinop_ykJms_sendMessage);
}

void Heavy_wakefield::cMsg_noECo_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_4H1Ca, 0, m, &cDelay_4H1Ca_sendMessage);
}

void Heavy_wakefield::cCast_5x797_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_Co3Xx, 0, m, &cVar_Co3Xx_sendMessage);
}

void Heavy_wakefield::cBinop_W0Zw0_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_Jp3ps, 1, m, &cVar_Jp3ps_sendMessage);
}

void Heavy_wakefield::cSystem_PszzM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_Qw0EI, HV_BINOP_MULTIPLY, 1, m, &cBinop_Qw0EI_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_AdgI3, HV_BINOP_MULTIPLY, 1, m, &cBinop_AdgI3_sendMessage);
}

void Heavy_wakefield::cMsg_pk63J_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_PszzM_sendMessage);
}

void Heavy_wakefield::cCast_c4Xgy_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_UAMN7, HV_BINOP_DIVIDE, 0, m, &cBinop_UAMN7_sendMessage);
}

void Heavy_wakefield::cCast_AVTBo_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_UdLmg, HV_BINOP_SUBTRACT, 0, m, &cBinop_UdLmg_sendMessage);
}

void Heavy_wakefield::cMsg_jyJSC_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cVar_onMessage(_c, &Context(_c)->cVar_AYuVQ, 1, m, &cVar_AYuVQ_sendMessage);
}

void Heavy_wakefield::cMsg_j1aVN_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_p9bvN_onMessage(_c, NULL, 0, m, NULL);
  cBinop_onMessage(_c, &Context(_c)->cBinop_yvTdX, HV_BINOP_ADD, 1, m, &cBinop_yvTdX_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_sHegG, HV_BINOP_ADD, 1, m, &cBinop_sHegG_sendMessage);
}

void Heavy_wakefield::cBinop_5dnHB_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_pk2YN_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_LB1pW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_AYuVQ, 0, m, &cVar_AYuVQ_sendMessage);
}

void Heavy_wakefield::cMsg_uvsUX_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_p9bvN_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_vvgGs_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_oiXMf_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_CDJY8_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1000.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_Ekwk9_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_lkf3x_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_z3VcB, 0, m, &cVar_z3VcB_sendMessage);
  sVarf_onMessage(_c, &Context(_c)->sVarf_cZQaS, m);
}

void Heavy_wakefield::cVar_z3VcB_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
}

void Heavy_wakefield::cBinop_4U574_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cUnop_onMessage(_c, HV_UNOP_FLOOR, m, &cUnop_MxZAH_sendMessage);
}

void Heavy_wakefield::cUnop_MxZAH_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 220.0f, 0, m, &cBinop_Y6XQ6_sendMessage);
}

void Heavy_wakefield::cRandom_DRWVZ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MULTIPLY, 440.0f, 0, m, &cBinop_4U574_sendMessage);
}

void Heavy_wakefield::cMsg_Rl8Ln_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_es5os, 0, m, &cDelay_es5os_sendMessage);
}

void Heavy_wakefield::cCast_oKiF6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_es5os, 0, m, &cDelay_es5os_sendMessage);
}

void Heavy_wakefield::cDelay_es5os_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_es5os, m);
  cMsg_803a1_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_NHifJ_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_Rl8Ln_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_Rl8Ln_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_es5os, 1, m, &cDelay_es5os_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_oKiF6_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cBinop_Y6XQ6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sPhasor_k_onMessage(_c, &Context(_c)->sPhasor_Q8cNj, 0, m);
}

void Heavy_wakefield::cMsg_tP4LJ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_Ekwk9_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cSystem_oeoEr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_RPmKt_sendMessage);
}

void Heavy_wakefield::cMsg_f08iC_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_oeoEr_sendMessage);
}

void Heavy_wakefield::cSwitchcase_K3dgo_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_eCQ10_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_eCQ10_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_acgcO_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cVar_amRDD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_6cO5X, HV_BINOP_MULTIPLY, 0, m, &cBinop_6cO5X_sendMessage);
}

void Heavy_wakefield::cDelay_Z312h_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_Z312h, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_Z312h, 0, m, &cDelay_Z312h_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_7Dnb5, 0, m, &cVar_7Dnb5_sendMessage);
}

void Heavy_wakefield::cBinop_mEwli_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_Z312h, 2, m, &cDelay_Z312h_sendMessage);
}

void Heavy_wakefield::cBinop_RPmKt_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_6cO5X, HV_BINOP_MULTIPLY, 1, m, &cBinop_6cO5X_sendMessage);
}

void Heavy_wakefield::cBinop_6cO5X_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_mEwli_sendMessage);
}

void Heavy_wakefield::cCast_acgcO_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_eCQ10_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_Z312h, 0, m, &cDelay_Z312h_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_7Dnb5, 0, m, &cVar_7Dnb5_sendMessage);
}

void Heavy_wakefield::cMsg_eCQ10_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_Z312h, 0, m, &cDelay_Z312h_sendMessage);
}

void Heavy_wakefield::cBinop_Y4SHA_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_FQ0fc, 0, m, &cVar_FQ0fc_sendMessage);
  cSwitchcase_BvpO4_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cVar_7Dnb5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 1.0f, 0, m, &cBinop_N3ilr_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MOD_UNIPOLAR, 4.0f, 0, m, &cBinop_Y4SHA_sendMessage);
}

void Heavy_wakefield::cMsg_3v0YC_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 2.0f, 0, m, &cBinop_vH3hF_sendMessage);
  sVarf_onMessage(_c, &Context(_c)->sVarf_uBN1s, m);
  sVarf_onMessage(_c, &Context(_c)->sVarf_Ybc5G, m);
}

void Heavy_wakefield::cBinop_EGCWF_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_mMjso_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_FVre6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setElementToFrom(m, 1, n, 0);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 0.0f, 0, m, &cBinop_770on_sendMessage);
}

void Heavy_wakefield::cMsg_lSlxc_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setElementToFrom(m, 1, n, 0);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 0.0f, 0, m, &cBinop_yzS0h_sendMessage);
}

void Heavy_wakefield::cBinop_R3mz3_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sVarf_onMessage(_c, &Context(_c)->sVarf_3eq55, m);
}

void Heavy_wakefield::cBinop_yzS0h_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sVarf_onMessage(_c, &Context(_c)->sVarf_F2I5S, m);
}

void Heavy_wakefield::cMsg_ba8e0_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 2.0f);
  msg_setElementToFrom(m, 1, n, 0);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 0.0f, 0, m, &cBinop_EGCWF_sendMessage);
}

void Heavy_wakefield::cVar_AytYM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_GREATER_THAN_EQL, 1e-05f, 0, m, &cBinop_6VlNq_sendMessage);
  cIf_onMessage(_c, &Context(_c)->cIf_HVs9K, 0, m, &cIf_HVs9K_sendMessage);
}

void Heavy_wakefield::cIf_HVs9K_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cMsg_3v0YC_sendMessage(_c, 0, m);
      break;
    }
    case 1: {
      cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 2.0f, 0, m, &cBinop_vH3hF_sendMessage);
      cMsg_FVre6_sendMessage(_c, 0, m);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cBinop_6VlNq_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cIf_onMessage(_c, &Context(_c)->cIf_HVs9K, 1, m, &cIf_HVs9K_sendMessage);
}

void Heavy_wakefield::cBinop_770on_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sVarf_onMessage(_c, &Context(_c)->sVarf_uBN1s, m);
  sVarf_onMessage(_c, &Context(_c)->sVarf_Ybc5G, m);
}

void Heavy_wakefield::cMsg_mMjso_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 2.0f);
  msg_setElementToFrom(m, 1, n, 0);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_SUBTRACT, 0.0f, 0, m, &cBinop_R3mz3_sendMessage);
}

void Heavy_wakefield::cMsg_4iC6S_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_LPBfj_sendMessage);
}

void Heavy_wakefield::cSystem_LPBfj_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_lSlxc_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_vH3hF_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_ba8e0_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_6It7r_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sPhasor_k_onMessage(_c, &Context(_c)->sPhasor_hOSTE, 0, m);
}

void Heavy_wakefield::cBinop_JKYdA_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_FU8k6, 0, m, &cVar_FU8k6_sendMessage);
  sVarf_onMessage(_c, &Context(_c)->sVarf_JAzpx, m);
}

void Heavy_wakefield::cBinop_ZTS2L_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sPhasor_k_onMessage(_c, &Context(_c)->sPhasor_xdUes, 0, m);
}

void Heavy_wakefield::cMsg_mLNoD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_PQSkd_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_CDwXm_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_g4yLe, 0, m, &cDelay_g4yLe_sendMessage);
}

void Heavy_wakefield::cSwitchcase_TwGmR_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_A98jH_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_A98jH_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_g4yLe, 1, m, &cDelay_g4yLe_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_CDwXm_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cDelay_g4yLe_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_g4yLe, m);
  cMsg_voB3v_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_A98jH_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_g4yLe, 0, m, &cDelay_g4yLe_sendMessage);
}

void Heavy_wakefield::cRandom_q0zlZ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MULTIPLY, 440.0f, 0, m, &cBinop_w28jL_sendMessage);
}

void Heavy_wakefield::cUnop_DRcZO_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 220.0f, 0, m, &cBinop_ZTS2L_sendMessage);
}

void Heavy_wakefield::cBinop_w28jL_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cUnop_onMessage(_c, HV_UNOP_FLOOR, m, &cUnop_DRcZO_sendMessage);
}

void Heavy_wakefield::cMsg_voB3v_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1000.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_PQSkd_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cVar_FU8k6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
}

void Heavy_wakefield::cMsg_LHXhq_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 20.0f);
  cBinop_onMessage(_c, &Context(_c)->cBinop_GgmOQ, HV_BINOP_MULTIPLY, 0, m, &cBinop_GgmOQ_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_ZUdXn, HV_BINOP_DIVIDE, 1, m, &cBinop_ZUdXn_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_zLGs5, 0, m, &cVar_zLGs5_sendMessage);
}

void Heavy_wakefield::cCast_X6lUA_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_kWxat_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_h3nYr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_qsZJR, 0, m, &cVar_qsZJR_sendMessage);
}

void Heavy_wakefield::cVar_vFJg8_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_e9gWP_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_rTCcM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_wHw8U_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_yMmmK_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cVar_onMessage(_c, &Context(_c)->cVar_k18M1, 1, m, &cVar_k18M1_sendMessage);
}

void Heavy_wakefield::cCast_Xx1jF_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_GFfKi, 0, m, &cVar_GFfKi_sendMessage);
}

void Heavy_wakefield::cCast_tacmX_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_LFRlu_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_h3nYr, HV_BINOP_ADD, 0, m, &cBinop_h3nYr_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_k76tD, 1, m, &cVar_k76tD_sendMessage);
}

void Heavy_wakefield::cVar_k18M1_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_Lo5W5_sendMessage);
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_iHbXH_sendMessage);
}

void Heavy_wakefield::cBinop_hF84I_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_onxLx, 1, m, &cVar_onxLx_sendMessage);
}

void Heavy_wakefield::cMsg_kWxat_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_AF3A7_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_LFRlu_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_wHw8U_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_qsZJR_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_5sYis, HV_BINOP_SUBTRACT, 1, m, &cBinop_5sYis_sendMessage);
}

void Heavy_wakefield::cCast_fgCS9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_rTCcM_sendMessage);
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Xx1jF_sendMessage);
}

void Heavy_wakefield::cCast_uClm7_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_k76tD, 0, m, &cVar_k76tD_sendMessage);
}

void Heavy_wakefield::cSwitchcase_65TjJ_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_uClm7_sendMessage);
      break;
    }
    case 0x3F800000: { // "1.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_fgCS9_sendMessage);
      break;
    }
    default: {
      break;
    }
  }
}

void Heavy_wakefield::cVar_onxLx_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_hF84I, HV_BINOP_SUBTRACT, 0, m, &cBinop_hF84I_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_LESS_THAN_EQL, 0.0f, 0, m, &cBinop_RjCdW_sendMessage);
}

void Heavy_wakefield::cCast_k7fqY_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_k18M1, 0, m, &cVar_k18M1_sendMessage);
}

void Heavy_wakefield::cSlice_kbEEk_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cMsg_kWxat_sendMessage(_c, 0, m);
      break;
    }
    case 1: {
      cMsg_kWxat_sendMessage(_c, 0, m);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_HMnZk_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_X6lUA_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_tacmX_sendMessage);
      break;
    }
    case 1: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_X6lUA_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_tacmX_sendMessage);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSwitchcase_PQSkd_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cSlice_onMessage(_c, &Context(_c)->cSlice_kbEEk, 0, m, &cSlice_kbEEk_sendMessage);
      break;
    }
    case 0x3E004DAB: { // "set"
      cSlice_onMessage(_c, &Context(_c)->cSlice_HMnZk, 0, m, &cSlice_HMnZk_sendMessage);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_k7fqY_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_vzjTw, 0, m, &cSlice_vzjTw_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_IrQNI, 0, m, &cSlice_IrQNI_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_3Q7KD_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_e8Mld_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cBinop_RjCdW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_65TjJ_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_WREyK_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_LHXhq_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_e9gWP_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_WREyK_sendMessage);
      break;
    }
    default: {
      cBinop_onMessage(_c, &Context(_c)->cBinop_GgmOQ, HV_BINOP_MULTIPLY, 0, m, &cBinop_GgmOQ_sendMessage);
      cBinop_onMessage(_c, &Context(_c)->cBinop_ZUdXn, HV_BINOP_DIVIDE, 1, m, &cBinop_ZUdXn_sendMessage);
      cVar_onMessage(_c, &Context(_c)->cVar_zLGs5, 0, m, &cVar_zLGs5_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cCast_lDrJd_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_5sYis, HV_BINOP_SUBTRACT, 0, m, &cBinop_5sYis_sendMessage);
}

void Heavy_wakefield::cVar_GFfKi_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_k76tD, 0, m, &cVar_k76tD_sendMessage);
}

void Heavy_wakefield::cBinop_7gx0c_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_onxLx, 1, m, &cVar_onxLx_sendMessage);
}

void Heavy_wakefield::cCast_e8Mld_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_yMmmK_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_ZUdXn_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_3sgQp, HV_BINOP_DIVIDE, 1, m, &cBinop_3sgQp_sendMessage);
}

void Heavy_wakefield::cBinop_GIFo1_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_k76tD, 1, m, &cVar_k76tD_sendMessage);
}

void Heavy_wakefield::cVar_zLGs5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_vhwTC, HV_BINOP_MULTIPLY, 0, m, &cBinop_vhwTC_sendMessage);
}

void Heavy_wakefield::cBinop_vhwTC_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_5gqMQ_sendMessage);
}

void Heavy_wakefield::cBinop_5gqMQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_wV3ap, 2, m, &cDelay_wV3ap_sendMessage);
}

void Heavy_wakefield::cSystem_jCgHO_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_Hb29x_sendMessage);
}

void Heavy_wakefield::cMsg_MrqMM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_jCgHO_sendMessage);
}

void Heavy_wakefield::cDelay_wV3ap_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_wV3ap, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_wV3ap, 0, m, &cDelay_wV3ap_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_onxLx, 0, m, &cVar_onxLx_sendMessage);
}

void Heavy_wakefield::cCast_9XrAY_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_rf6Ta_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_wV3ap, 0, m, &cDelay_wV3ap_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_onxLx, 0, m, &cVar_onxLx_sendMessage);
}

void Heavy_wakefield::cMsg_rf6Ta_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_wV3ap, 0, m, &cDelay_wV3ap_sendMessage);
}

void Heavy_wakefield::cSwitchcase_AF3A7_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_rf6Ta_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_rf6Ta_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_9XrAY_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cBinop_Hb29x_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_vhwTC, HV_BINOP_MULTIPLY, 1, m, &cBinop_vhwTC_sendMessage);
}

void Heavy_wakefield::cBinop_5sYis_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_3sgQp, HV_BINOP_DIVIDE, 0, m, &cBinop_3sgQp_sendMessage);
}

void Heavy_wakefield::cCast_vOoZA_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_GFfKi, 1, m, &cVar_GFfKi_sendMessage);
}

void Heavy_wakefield::cCast_3Q7KD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_hLsVw_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSlice_vzjTw_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_Lo5W5_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_iHbXH_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_IrQNI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_vOoZA_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_lDrJd_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cMsg_hLsVw_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_AF3A7_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_XsNYN_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_hF84I, HV_BINOP_SUBTRACT, 1, m, &cBinop_hF84I_sendMessage);
}

void Heavy_wakefield::cMsg_wHw8U_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_AF3A7_onMessage(_c, NULL, 0, m, NULL);
  cBinop_onMessage(_c, &Context(_c)->cBinop_h3nYr, HV_BINOP_ADD, 1, m, &cBinop_h3nYr_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_GIFo1, HV_BINOP_ADD, 1, m, &cBinop_GIFo1_sendMessage);
}

void Heavy_wakefield::cSystem_FQs7V_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_GgmOQ, HV_BINOP_MULTIPLY, 1, m, &cBinop_GgmOQ_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_LCuNU, HV_BINOP_MULTIPLY, 1, m, &cBinop_LCuNU_sendMessage);
}

void Heavy_wakefield::cMsg_qplx5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_FQs7V_sendMessage);
}

void Heavy_wakefield::cBinop_GgmOQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_XsNYN_sendMessage);
}

void Heavy_wakefield::cVar_k76tD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_GIFo1, HV_BINOP_ADD, 0, m, &cBinop_GIFo1_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_h3nYr, HV_BINOP_ADD, 0, m, &cBinop_h3nYr_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_JKYdA_sendMessage);
}

void Heavy_wakefield::cCast_Lo5W5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_LCuNU, HV_BINOP_MULTIPLY, 0, m, &cBinop_LCuNU_sendMessage);
}

void Heavy_wakefield::cCast_iHbXH_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_ZUdXn, HV_BINOP_DIVIDE, 0, m, &cBinop_ZUdXn_sendMessage);
}

void Heavy_wakefield::cBinop_LCuNU_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_7gx0c_sendMessage);
}

void Heavy_wakefield::cBinop_3sgQp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_h3nYr, HV_BINOP_ADD, 1, m, &cBinop_h3nYr_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_GIFo1, HV_BINOP_ADD, 1, m, &cBinop_GIFo1_sendMessage);
}

void Heavy_wakefield::cDelay_pmBUO_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_pmBUO, m);
  cMsg_dzudZ_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_rXmsW_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_h15hQ_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_h15hQ_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_pmBUO, 1, m, &cDelay_pmBUO_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_HXU26_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cMsg_h15hQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_pmBUO, 0, m, &cDelay_pmBUO_sendMessage);
}

void Heavy_wakefield::cCast_HXU26_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_pmBUO, 0, m, &cDelay_pmBUO_sendMessage);
}

void Heavy_wakefield::cMsg_dzudZ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_PQSkd_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_hy0la_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sPhasor_k_onMessage(_c, &Context(_c)->sPhasor_ftsRB, 0, m);
}

void Heavy_wakefield::cVar_LdUpL_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_8uNOu, HV_BINOP_SUBTRACT, 0, m, &cBinop_8uNOu_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_LESS_THAN_EQL, 0.0f, 0, m, &cBinop_LopJy_sendMessage);
}

void Heavy_wakefield::cCast_yXFGM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_HHqDI, 1, m, &cVar_HHqDI_sendMessage);
}

void Heavy_wakefield::cVar_pmV1D_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_Uuh5y, HV_BINOP_ADD, 0, m, &cBinop_Uuh5y_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_TsxbX, HV_BINOP_ADD, 0, m, &cBinop_TsxbX_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_1ziMk_sendMessage);
}

void Heavy_wakefield::cVar_LFA0Q_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_Z0hzp_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_TNaqv_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_dWjcn_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_ABXxf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_nm19K_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_qgQI9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_CNzJm, HV_BINOP_SUBTRACT, 1, m, &cBinop_CNzJm_sendMessage);
}

void Heavy_wakefield::cCast_0DMOr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_8bj2E_sendMessage);
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Vu8FI_sendMessage);
}

void Heavy_wakefield::cCast_agxl3_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_pmV1D, 0, m, &cVar_pmV1D_sendMessage);
}

void Heavy_wakefield::cSwitchcase_CD5iP_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_agxl3_sendMessage);
      break;
    }
    case 0x3F800000: { // "1.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_0DMOr_sendMessage);
      break;
    }
    default: {
      break;
    }
  }
}

void Heavy_wakefield::cBinop_LopJy_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_CD5iP_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_IHVdZ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_TNaqv_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_TsxbX, HV_BINOP_ADD, 0, m, &cBinop_TsxbX_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_pmV1D, 1, m, &cVar_pmV1D_sendMessage);
}

void Heavy_wakefield::cCast_mD61D_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_gohHs_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_uuO79_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_PB6zy_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_dWjcn_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_qN7Xf_onMessage(_c, NULL, 0, m, NULL);
  cBinop_onMessage(_c, &Context(_c)->cBinop_TsxbX, HV_BINOP_ADD, 1, m, &cBinop_TsxbX_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_Uuh5y, HV_BINOP_ADD, 1, m, &cBinop_Uuh5y_sendMessage);
}

void Heavy_wakefield::cMsg_PB6zy_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_qN7Xf_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_fWyM5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_avrwU, HV_BINOP_DIVIDE, 1, m, &cBinop_avrwU_sendMessage);
}

void Heavy_wakefield::cCast_ybuYN_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_44YAN, 0, m, &cVar_44YAN_sendMessage);
}

void Heavy_wakefield::cBinop_WGgwD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_TmKNz_sendMessage);
}

void Heavy_wakefield::cCast_MeYeQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_fWyM5, HV_BINOP_DIVIDE, 0, m, &cBinop_fWyM5_sendMessage);
}

void Heavy_wakefield::cCast_8bj2E_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_dWjcn_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_qqCA1_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_rCChL_sendMessage);
}

void Heavy_wakefield::cSlice_oie8N_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cMsg_nm19K_sendMessage(_c, 0, m);
      break;
    }
    case 1: {
      cMsg_nm19K_sendMessage(_c, 0, m);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSwitchcase_1lemr_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cSlice_onMessage(_c, &Context(_c)->cSlice_oie8N, 0, m, &cSlice_oie8N_sendMessage);
      break;
    }
    case 0x3E004DAB: { // "set"
      cSlice_onMessage(_c, &Context(_c)->cSlice_iXewc, 0, m, &cSlice_iXewc_sendMessage);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_ybuYN_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_e5d2D, 0, m, &cSlice_e5d2D_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_7mMO5, 0, m, &cSlice_7mMO5_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_uuO79_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_mD61D_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cSlice_iXewc_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_ABXxf_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_IHVdZ_sendMessage);
      break;
    }
    case 1: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_ABXxf_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_IHVdZ_sendMessage);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cDelay_35VIn_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_35VIn, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_35VIn, 0, m, &cDelay_35VIn_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_LdUpL, 0, m, &cVar_LdUpL_sendMessage);
}

void Heavy_wakefield::cVar_A58DI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_9FyxJ, HV_BINOP_MULTIPLY, 0, m, &cBinop_9FyxJ_sendMessage);
}

void Heavy_wakefield::cBinop_9FyxJ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_MnlLO_sendMessage);
}

void Heavy_wakefield::cCast_CzTbB_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_jJJX1_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_35VIn, 0, m, &cDelay_35VIn_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_LdUpL, 0, m, &cVar_LdUpL_sendMessage);
}

void Heavy_wakefield::cBinop_MnlLO_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_35VIn, 2, m, &cDelay_35VIn_sendMessage);
}

void Heavy_wakefield::cSystem_GRt2V_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_Xqeov_sendMessage);
}

void Heavy_wakefield::cMsg_Pt1qb_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_GRt2V_sendMessage);
}

void Heavy_wakefield::cSwitchcase_qN7Xf_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_jJJX1_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_jJJX1_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_CzTbB_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cMsg_jJJX1_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_35VIn, 0, m, &cDelay_35VIn_sendMessage);
}

void Heavy_wakefield::cBinop_Xqeov_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_9FyxJ, HV_BINOP_MULTIPLY, 1, m, &cBinop_9FyxJ_sendMessage);
}

void Heavy_wakefield::cMsg_7KwZt_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 20.0f);
  cBinop_onMessage(_c, &Context(_c)->cBinop_WGgwD, HV_BINOP_MULTIPLY, 0, m, &cBinop_WGgwD_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_fWyM5, HV_BINOP_DIVIDE, 1, m, &cBinop_fWyM5_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_A58DI, 0, m, &cVar_A58DI_sendMessage);
}

void Heavy_wakefield::cMsg_PdWMV_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_FgV5Q_sendMessage);
}

void Heavy_wakefield::cSystem_FgV5Q_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_WGgwD, HV_BINOP_MULTIPLY, 1, m, &cBinop_WGgwD_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_qqCA1, HV_BINOP_MULTIPLY, 1, m, &cBinop_qqCA1_sendMessage);
}

void Heavy_wakefield::cBinop_TsxbX_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_qgQI9, 0, m, &cVar_qgQI9_sendMessage);
}

void Heavy_wakefield::cBinop_TmKNz_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_8uNOu, HV_BINOP_SUBTRACT, 1, m, &cBinop_8uNOu_sendMessage);
}

void Heavy_wakefield::cVar_44YAN_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_OrFBV_sendMessage);
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_MeYeQ_sendMessage);
}

void Heavy_wakefield::cCast_byzq9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_7KwZt_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_Z0hzp_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_byzq9_sendMessage);
      break;
    }
    default: {
      cBinop_onMessage(_c, &Context(_c)->cBinop_WGgwD, HV_BINOP_MULTIPLY, 0, m, &cBinop_WGgwD_sendMessage);
      cBinop_onMessage(_c, &Context(_c)->cBinop_fWyM5, HV_BINOP_DIVIDE, 1, m, &cBinop_fWyM5_sendMessage);
      cVar_onMessage(_c, &Context(_c)->cVar_A58DI, 0, m, &cVar_A58DI_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cVar_HHqDI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_pmV1D, 0, m, &cVar_pmV1D_sendMessage);
}

void Heavy_wakefield::cMsg_gohHs_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cVar_onMessage(_c, &Context(_c)->cVar_44YAN, 1, m, &cVar_44YAN_sendMessage);
}

void Heavy_wakefield::cBinop_avrwU_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_TsxbX, HV_BINOP_ADD, 1, m, &cBinop_TsxbX_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_Uuh5y, HV_BINOP_ADD, 1, m, &cBinop_Uuh5y_sendMessage);
}

void Heavy_wakefield::cMsg_nm19K_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_qN7Xf_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_8uNOu_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_LdUpL, 1, m, &cVar_LdUpL_sendMessage);
}

void Heavy_wakefield::cCast_OrFBV_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_qqCA1, HV_BINOP_MULTIPLY, 0, m, &cBinop_qqCA1_sendMessage);
}

void Heavy_wakefield::cBinop_CNzJm_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_avrwU, HV_BINOP_DIVIDE, 0, m, &cBinop_avrwU_sendMessage);
}

void Heavy_wakefield::cCast_fxA02_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_CNzJm, HV_BINOP_SUBTRACT, 0, m, &cBinop_CNzJm_sendMessage);
}

void Heavy_wakefield::cSlice_7mMO5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_yXFGM_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_fxA02_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_e5d2D_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_OrFBV_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_MeYeQ_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cBinop_rCChL_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_LdUpL, 1, m, &cVar_LdUpL_sendMessage);
}

void Heavy_wakefield::cBinop_Uuh5y_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_pmV1D, 1, m, &cVar_pmV1D_sendMessage);
}

void Heavy_wakefield::cCast_Vu8FI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_HHqDI, 0, m, &cVar_HHqDI_sendMessage);
}

void Heavy_wakefield::cMsg_ETfMt_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_fA6mn, 0, m, &cDelay_fA6mn_sendMessage);
}

void Heavy_wakefield::cDelay_fA6mn_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_fA6mn, m);
  cMsg_mCC3W_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_K3AZq_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_fA6mn, 0, m, &cDelay_fA6mn_sendMessage);
}

void Heavy_wakefield::cSwitchcase_rvY7N_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_ETfMt_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_ETfMt_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_fA6mn, 1, m, &cDelay_fA6mn_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_K3AZq_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cMsg_mCC3W_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1000.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_1lemr_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_pWUI2_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_1lemr_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cVar_XUL8o_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
}

void Heavy_wakefield::cCast_aFqoR_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_e4CWo, 0, m, &cDelay_e4CWo_sendMessage);
}

void Heavy_wakefield::cSwitchcase_gAqMN_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_lh4it_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_lh4it_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_e4CWo, 1, m, &cDelay_e4CWo_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_aFqoR_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cDelay_e4CWo_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_e4CWo, m);
  cMsg_mjOBz_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_lh4it_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_e4CWo, 0, m, &cDelay_e4CWo_sendMessage);
}

void Heavy_wakefield::cUnop_ikWJZ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 220.0f, 0, m, &cBinop_hy0la_sendMessage);
}

void Heavy_wakefield::cBinop_XZYgp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cUnop_onMessage(_c, HV_UNOP_FLOOR, m, &cUnop_ikWJZ_sendMessage);
}

void Heavy_wakefield::cRandom_zpe8E_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MULTIPLY, 440.0f, 0, m, &cBinop_XZYgp_sendMessage);
}

void Heavy_wakefield::cMsg_mjOBz_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_1lemr_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_1ziMk_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_XUL8o, 0, m, &cVar_XUL8o_sendMessage);
  sVarf_onMessage(_c, &Context(_c)->sVarf_Xa5rC, m);
}

void Heavy_wakefield::cReceive_xvJXb_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_Pt1qb_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_A58DI, 0, m, &cVar_A58DI_sendMessage);
  cMsg_DnW96_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_6cuFK, 0, m, &cVar_6cuFK_sendMessage);
  cMsg_MrqMM_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_zLGs5, 0, m, &cVar_zLGs5_sendMessage);
  cMsg_w58iy_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_mSpPd, 0, m, &cVar_mSpPd_sendMessage);
  cMsg_PdWMV_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_qgQI9, 0, m, &cVar_qgQI9_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_LFA0Q, 0, m, &cVar_LFA0Q_sendMessage);
  cMsg_pk63J_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_njtzp, 0, m, &cVar_njtzp_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_sIYGu, 0, m, &cVar_sIYGu_sendMessage);
  cMsg_qplx5_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_qsZJR, 0, m, &cVar_qsZJR_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_vFJg8, 0, m, &cVar_vFJg8_sendMessage);
  cMsg_ksn5B_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_F6U3X, 0, m, &cVar_F6U3X_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_txZAV, 0, m, &cVar_txZAV_sendMessage);
  cMsg_f08iC_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_amRDD, 0, m, &cVar_amRDD_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_AytYM, 0, m, &cVar_AytYM_sendMessage);
  cMsg_4iC6S_sendMessage(_c, 0, m);
  cSwitchcase_K3dgo_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_N3ilr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_7Dnb5, 1, m, &cVar_7Dnb5_sendMessage);
}

void Heavy_wakefield::cBinop_RFAxd_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_KHwPZ, 0, m, &cVar_KHwPZ_sendMessage);
  sVarf_onMessage(_c, &Context(_c)->sVarf_Pg8kc, m);
}

void Heavy_wakefield::cSwitchcase_lubKV_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_woNax_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_woNax_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_vvWlW, 1, m, &cDelay_vvWlW_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_lyP5K_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cCast_lyP5K_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_vvWlW, 0, m, &cDelay_vvWlW_sendMessage);
}

void Heavy_wakefield::cDelay_vvWlW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_vvWlW, m);
  cMsg_CD9jW_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_woNax_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_vvWlW, 0, m, &cDelay_vvWlW_sendMessage);
}

void Heavy_wakefield::cMsg_CD9jW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1000.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_pq7j9_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cDelay_hmeAQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_hmeAQ, m);
  cMsg_8NBWk_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_EzBUp_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_SxiiV_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_SxiiV_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_hmeAQ, 1, m, &cDelay_hmeAQ_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_nLQqT_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cMsg_SxiiV_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_hmeAQ, 0, m, &cDelay_hmeAQ_sendMessage);
}

void Heavy_wakefield::cCast_nLQqT_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_hmeAQ, 0, m, &cDelay_hmeAQ_sendMessage);
}

void Heavy_wakefield::cBinop_N3n9E_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cUnop_onMessage(_c, HV_UNOP_FLOOR, m, &cUnop_deatz_sendMessage);
}

void Heavy_wakefield::cUnop_deatz_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 220.0f, 0, m, &cBinop_tdYxW_sendMessage);
}

void Heavy_wakefield::cRandom_vnUT7_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MULTIPLY, 440.0f, 0, m, &cBinop_N3n9E_sendMessage);
}

void Heavy_wakefield::cBinop_tdYxW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sPhasor_k_onMessage(_c, &Context(_c)->sPhasor_HIn0f, 0, m);
}

void Heavy_wakefield::cMsg_8NBWk_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_pq7j9_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_30tyo_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_pq7j9_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cVar_KHwPZ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
}

void Heavy_wakefield::cBinop_KtpV7_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_p6nlH, HV_BINOP_SUBTRACT, 1, m, &cBinop_p6nlH_sendMessage);
}

void Heavy_wakefield::cBinop_5nVJA_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_43xC9, 1, m, &cVar_43xC9_sendMessage);
}

void Heavy_wakefield::cSlice_PETJs_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cMsg_EDi7Y_sendMessage(_c, 0, m);
      break;
    }
    case 1: {
      cMsg_EDi7Y_sendMessage(_c, 0, m);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_FQfEY_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_nOKwK_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_Aat7f_sendMessage);
      break;
    }
    case 1: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_nOKwK_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_Aat7f_sendMessage);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSwitchcase_pq7j9_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cSlice_onMessage(_c, &Context(_c)->cSlice_PETJs, 0, m, &cSlice_PETJs_sendMessage);
      break;
    }
    case 0x3E004DAB: { // "set"
      cSlice_onMessage(_c, &Context(_c)->cSlice_FQfEY, 0, m, &cSlice_FQfEY_sendMessage);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_3s7w3_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_jFrtB, 0, m, &cSlice_jFrtB_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_BUtG2, 0, m, &cSlice_BUtG2_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_lp8ED_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_tL7BH_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cMsg_aoST8_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cVar_onMessage(_c, &Context(_c)->cVar_pTuc0, 1, m, &cVar_pTuc0_sendMessage);
}

void Heavy_wakefield::cMsg_YdkMW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_9xFF3_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_SYnR3_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_F6U3X, 0, m, &cVar_F6U3X_sendMessage);
}

void Heavy_wakefield::cBinop_LJxxJ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_gNXqo, HV_BINOP_DIVIDE, 0, m, &cBinop_gNXqo_sendMessage);
}

void Heavy_wakefield::cBinop_lS1jG_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_2fSK1, 1, m, &cVar_2fSK1_sendMessage);
}

void Heavy_wakefield::cMsg_nZa0h_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 20.0f);
  cBinop_onMessage(_c, &Context(_c)->cBinop_tXFLZ, HV_BINOP_MULTIPLY, 0, m, &cBinop_tXFLZ_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_0TVSM, HV_BINOP_DIVIDE, 1, m, &cBinop_0TVSM_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_mSpPd, 0, m, &cVar_mSpPd_sendMessage);
}

void Heavy_wakefield::cBinop_p6nlH_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_43xC9, 1, m, &cVar_43xC9_sendMessage);
}

void Heavy_wakefield::cCast_kO3fi_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_WASwT, 0, m, &cVar_WASwT_sendMessage);
}

void Heavy_wakefield::cCast_6a3qv_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_LJxxJ, HV_BINOP_SUBTRACT, 0, m, &cBinop_LJxxJ_sendMessage);
}

void Heavy_wakefield::cVar_txZAV_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_TQH1H_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_H8AIB_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_i9MY7_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_bFC0w_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_nQRfc_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_F6U3X_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_LJxxJ, HV_BINOP_SUBTRACT, 1, m, &cBinop_LJxxJ_sendMessage);
}

void Heavy_wakefield::cBinop_0TVSM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_gNXqo, HV_BINOP_DIVIDE, 1, m, &cBinop_gNXqo_sendMessage);
}

void Heavy_wakefield::cBinop_GVCLx_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_5nVJA_sendMessage);
}

void Heavy_wakefield::cSlice_jFrtB_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_8cvGR_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_VDx3q_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_BUtG2_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_k2pHu_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_6a3qv_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cCast_tL7BH_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_aoST8_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_oXUl9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_nQRfc_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_lFIc3_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_oXUl9_sendMessage);
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_kO3fi_sendMessage);
}

void Heavy_wakefield::cCast_s9jSC_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_2fSK1, 0, m, &cVar_2fSK1_sendMessage);
}

void Heavy_wakefield::cSwitchcase_i9MY7_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_s9jSC_sendMessage);
      break;
    }
    case 0x3F800000: { // "1.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_lFIc3_sendMessage);
      break;
    }
    default: {
      break;
    }
  }
}

void Heavy_wakefield::cCast_8cvGR_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_GVCLx, HV_BINOP_MULTIPLY, 0, m, &cBinop_GVCLx_sendMessage);
}

void Heavy_wakefield::cCast_VDx3q_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_0TVSM, HV_BINOP_DIVIDE, 0, m, &cBinop_0TVSM_sendMessage);
}

void Heavy_wakefield::cCast_IdRcN_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_nZa0h_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_TQH1H_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_IdRcN_sendMessage);
      break;
    }
    default: {
      cBinop_onMessage(_c, &Context(_c)->cBinop_tXFLZ, HV_BINOP_MULTIPLY, 0, m, &cBinop_tXFLZ_sendMessage);
      cBinop_onMessage(_c, &Context(_c)->cBinop_0TVSM, HV_BINOP_DIVIDE, 1, m, &cBinop_0TVSM_sendMessage);
      cVar_onMessage(_c, &Context(_c)->cVar_mSpPd, 0, m, &cVar_mSpPd_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cCast_lp8ED_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_YdkMW_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_2fSK1_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_lS1jG, HV_BINOP_ADD, 0, m, &cBinop_lS1jG_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_SYnR3, HV_BINOP_ADD, 0, m, &cBinop_SYnR3_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_RFAxd_sendMessage);
}

void Heavy_wakefield::cCast_Aat7f_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_bFC0w_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_SYnR3, HV_BINOP_ADD, 0, m, &cBinop_SYnR3_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_2fSK1, 1, m, &cVar_2fSK1_sendMessage);
}

void Heavy_wakefield::cMsg_EDi7Y_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_9xFF3_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_gNXqo_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_SYnR3, HV_BINOP_ADD, 1, m, &cBinop_SYnR3_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_lS1jG, HV_BINOP_ADD, 1, m, &cBinop_lS1jG_sendMessage);
}

void Heavy_wakefield::cCast_k2pHu_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_WASwT, 1, m, &cVar_WASwT_sendMessage);
}

void Heavy_wakefield::cMsg_nQRfc_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_9xFF3_onMessage(_c, NULL, 0, m, NULL);
  cBinop_onMessage(_c, &Context(_c)->cBinop_SYnR3, HV_BINOP_ADD, 1, m, &cBinop_SYnR3_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_lS1jG, HV_BINOP_ADD, 1, m, &cBinop_lS1jG_sendMessage);
}

void Heavy_wakefield::cCast_3s7w3_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_pTuc0, 0, m, &cVar_pTuc0_sendMessage);
}

void Heavy_wakefield::cVar_pTuc0_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_8cvGR_sendMessage);
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_VDx3q_sendMessage);
}

void Heavy_wakefield::cVar_43xC9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_p6nlH, HV_BINOP_SUBTRACT, 0, m, &cBinop_p6nlH_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_LESS_THAN_EQL, 0.0f, 0, m, &cBinop_H8AIB_sendMessage);
}

void Heavy_wakefield::cVar_WASwT_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_2fSK1, 0, m, &cVar_2fSK1_sendMessage);
}

void Heavy_wakefield::cBinop_tXFLZ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_KtpV7_sendMessage);
}

void Heavy_wakefield::cSystem_6zM26_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_tXFLZ, HV_BINOP_MULTIPLY, 1, m, &cBinop_tXFLZ_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_GVCLx, HV_BINOP_MULTIPLY, 1, m, &cBinop_GVCLx_sendMessage);
}

void Heavy_wakefield::cMsg_ksn5B_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_6zM26_sendMessage);
}

void Heavy_wakefield::cCast_nOKwK_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_EDi7Y_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_Ntlfx_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_L6lfd_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_HA4FC, 0, m, &cDelay_HA4FC_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_43xC9, 0, m, &cVar_43xC9_sendMessage);
}

void Heavy_wakefield::cDelay_HA4FC_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_HA4FC, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_HA4FC, 0, m, &cDelay_HA4FC_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_43xC9, 0, m, &cVar_43xC9_sendMessage);
}

void Heavy_wakefield::cBinop_mBJlg_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_D1exW_sendMessage);
}

void Heavy_wakefield::cBinop_ckd7z_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_mBJlg, HV_BINOP_MULTIPLY, 1, m, &cBinop_mBJlg_sendMessage);
}

void Heavy_wakefield::cVar_mSpPd_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_mBJlg, HV_BINOP_MULTIPLY, 0, m, &cBinop_mBJlg_sendMessage);
}

void Heavy_wakefield::cSwitchcase_9xFF3_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_L6lfd_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_L6lfd_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Ntlfx_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cSystem_pgCpI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_ckd7z_sendMessage);
}

void Heavy_wakefield::cMsg_w58iy_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_pgCpI_sendMessage);
}

void Heavy_wakefield::cMsg_L6lfd_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_HA4FC, 0, m, &cDelay_HA4FC_sendMessage);
}

void Heavy_wakefield::cBinop_D1exW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_HA4FC, 2, m, &cDelay_HA4FC_sendMessage);
}

void Heavy_wakefield::cCast_ZbAaP_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_mLNoD_sendMessage(_c, 0, m);
  cRandom_onMessage(_c, &Context(_c)->cRandom_q0zlZ, 0, m, &cRandom_q0zlZ_sendMessage);
  cSwitchcase_TwGmR_onMessage(_c, NULL, 0, m, NULL);
  cSwitchcase_rXmsW_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_9Vdyx_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_tP4LJ_sendMessage(_c, 0, m);
  cRandom_onMessage(_c, &Context(_c)->cRandom_DRWVZ, 0, m, &cRandom_DRWVZ_sendMessage);
  cSwitchcase_xqeAn_onMessage(_c, NULL, 0, m, NULL);
  cSwitchcase_NHifJ_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_CzfRr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_pWUI2_sendMessage(_c, 0, m);
  cRandom_onMessage(_c, &Context(_c)->cRandom_zpe8E, 0, m, &cRandom_zpe8E_sendMessage);
  cSwitchcase_rvY7N_onMessage(_c, NULL, 0, m, NULL);
  cSwitchcase_gAqMN_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_fgwcu_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_30tyo_sendMessage(_c, 0, m);
  cRandom_onMessage(_c, &Context(_c)->cRandom_vnUT7, 0, m, &cRandom_vnUT7_sendMessage);
  cSwitchcase_lubKV_onMessage(_c, NULL, 0, m, NULL);
  cSwitchcase_EzBUp_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cSwitchcase_BvpO4_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_fgwcu_sendMessage);
      break;
    }
    case 0x3F800000: { // "1.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_CzfRr_sendMessage);
      break;
    }
    case 0x40000000: { // "2.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_9Vdyx_sendMessage);
      break;
    }
    case 0x40400000: { // "3.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_ZbAaP_sendMessage);
      break;
    }
    default: {
      break;
    }
  }
}




/*
 * Context Process Implementation
 */

int Heavy_wakefield::process(float **inputBuffers, float **outputBuffers, int n) {
  while (hLp_hasData(&inQueue)) {
    hv_uint32_t numBytes = 0;
    ReceiverMessagePair *p = reinterpret_cast<ReceiverMessagePair *>(hLp_getReadBuffer(&inQueue, &numBytes));
    hv_assert(numBytes >= sizeof(ReceiverMessagePair));
    scheduleMessageForReceiver(p->receiverHash, &p->msg);
    hLp_consume(&inQueue);
  }
  const int n4 = n & ~HV_N_SIMD_MASK; // ensure that the block size is a multiple of HV_N_SIMD

  // temporary signal vars
  hv_bufferf_t Bf0, Bf1, Bf2, Bf3, Bf4, Bf5, Bf6, Bf7;

  // input and output vars
  hv_bufferf_t O0, O1;

  // declare and init the zero buffer
  hv_bufferf_t ZERO; __hv_zero_f(VOf(ZERO));

  hv_uint32_t nextBlock = blockStartTimestamp;
  for (int n = 0; n < n4; n += HV_N_SIMD) {

    // process all of the messages for this block
    nextBlock += HV_N_SIMD;
    while (mq_hasMessageBefore(&mq, nextBlock)) {
      MessageNode *const node = mq_peek(&mq);
      node->sendMessage(this, node->let, node->m);
      mq_pop(&mq);
    }

    

    // zero output buffers
    __hv_zero_f(VOf(O0));
    __hv_zero_f(VOf(O1));

    // process all signal functions
    __hv_phasor_k_f(&sPhasor_ftsRB, VOf(Bf0));
    __hv_varread_f(&sVarf_Xa5rC, VOf(Bf1));
    __hv_mul_f(VIf(Bf0), VIf(Bf1), VOf(Bf1));
    __hv_phasor_k_f(&sPhasor_Q8cNj, VOf(Bf0));
    __hv_varread_f(&sVarf_cZQaS, VOf(Bf2));
    __hv_mul_f(VIf(Bf0), VIf(Bf2), VOf(Bf2));
    __hv_add_f(VIf(Bf1), VIf(Bf2), VOf(Bf2));
    __hv_phasor_k_f(&sPhasor_xdUes, VOf(Bf1));
    __hv_varread_f(&sVarf_JAzpx, VOf(Bf0));
    __hv_mul_f(VIf(Bf1), VIf(Bf0), VOf(Bf0));
    __hv_add_f(VIf(Bf2), VIf(Bf0), VOf(Bf0));
    __hv_phasor_k_f(&sPhasor_HIn0f, VOf(Bf2));
    __hv_varread_f(&sVarf_Pg8kc, VOf(Bf1));
    __hv_mul_f(VIf(Bf2), VIf(Bf1), VOf(Bf1));
    __hv_add_f(VIf(Bf0), VIf(Bf1), VOf(Bf1));
    __hv_phasor_k_f(&sPhasor_hOSTE, VOf(Bf0));
    __hv_var_k_f(VOf(Bf2), 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f);
    __hv_sub_f(VIf(Bf0), VIf(Bf2), VOf(Bf2));
    __hv_abs_f(VIf(Bf2), VOf(Bf2));
    __hv_var_k_f(VOf(Bf0), 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f);
    __hv_sub_f(VIf(Bf2), VIf(Bf0), VOf(Bf0));
    __hv_var_k_f(VOf(Bf2), 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f);
    __hv_mul_f(VIf(Bf0), VIf(Bf2), VOf(Bf2));
    __hv_mul_f(VIf(Bf2), VIf(Bf2), VOf(Bf0));
    __hv_mul_f(VIf(Bf2), VIf(Bf0), VOf(Bf3));
    __hv_mul_f(VIf(Bf3), VIf(Bf0), VOf(Bf0));
    __hv_var_k_f(VOf(Bf4), 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f);
    __hv_var_k_f(VOf(Bf5), 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f);
    __hv_mul_f(VIf(Bf3), VIf(Bf5), VOf(Bf5));
    __hv_sub_f(VIf(Bf2), VIf(Bf5), VOf(Bf5));
    __hv_fma_f(VIf(Bf0), VIf(Bf4), VIf(Bf5), VOf(Bf5));
    __hv_var_k_f(VOf(Bf4), 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f);
    __hv_add_f(VIf(Bf5), VIf(Bf4), VOf(Bf4));
    __hv_var_k_f(VOf(Bf5), 1500.0f, 1500.0f, 1500.0f, 1500.0f, 1500.0f, 1500.0f, 1500.0f, 1500.0f);
    __hv_mul_f(VIf(Bf4), VIf(Bf5), VOf(Bf5));
    __hv_var_k_f(VOf(Bf4), 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f);
    __hv_zero_f(VOf(Bf0));
    __hv_max_f(VIf(Bf5), VIf(Bf0), VOf(Bf0));
    __hv_varread_f(&sVarf_F2I5S, VOf(Bf5));
    __hv_mul_f(VIf(Bf0), VIf(Bf5), VOf(Bf5));
    __hv_var_k_f(VOf(Bf0), 6.28318f, 6.28318f, 6.28318f, 6.28318f, 6.28318f, 6.28318f, 6.28318f, 6.28318f);
    __hv_mul_f(VIf(Bf5), VIf(Bf0), VOf(Bf0));
    __hv_varread_f(&sVarf_Ybc5G, VOf(Bf2));
    __hv_mul_f(VIf(Bf0), VIf(Bf2), VOf(Bf2));
    __hv_sub_f(VIf(Bf2), VIf(Bf4), VOf(Bf2));
    __hv_varread_f(&sVarf_uBN1s, VOf(Bf0));
    __hv_zero_f(VOf(Bf3));
    __hv_neq_f(VIf(Bf0), VIf(Bf3), VOf(Bf3));
    __hv_and_f(VIf(Bf2), VIf(Bf3), VOf(Bf3));
    __hv_zero_f(VOf(Bf2));
    __hv_min_f(VIf(Bf3), VIf(Bf2), VOf(Bf2));
    __hv_add_f(VIf(Bf4), VIf(Bf2), VOf(Bf4));
    __hv_varread_f(&sVarf_3eq55, VOf(Bf3));
    __hv_mul_f(VIf(Bf4), VIf(Bf3), VOf(Bf3));
    __hv_mul_f(VIf(Bf1), VIf(Bf3), VOf(Bf3));
    __hv_floor_f(VIf(Bf5), VOf(Bf1));
    __hv_sub_f(VIf(Bf5), VIf(Bf1), VOf(Bf1));
    __hv_var_k_f(VOf(Bf4), 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f);
    __hv_sub_f(VIf(Bf1), VIf(Bf4), VOf(Bf4));
    __hv_abs_f(VIf(Bf4), VOf(Bf4));
    __hv_var_k_f(VOf(Bf1), 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f);
    __hv_sub_f(VIf(Bf4), VIf(Bf1), VOf(Bf1));
    __hv_var_k_f(VOf(Bf4), 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f);
    __hv_mul_f(VIf(Bf1), VIf(Bf4), VOf(Bf4));
    __hv_mul_f(VIf(Bf4), VIf(Bf4), VOf(Bf1));
    __hv_mul_f(VIf(Bf4), VIf(Bf1), VOf(Bf0));
    __hv_mul_f(VIf(Bf0), VIf(Bf1), VOf(Bf1));
    __hv_var_k_f(VOf(Bf6), 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f);
    __hv_var_k_f(VOf(Bf7), 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f);
    __hv_mul_f(VIf(Bf0), VIf(Bf7), VOf(Bf7));
    __hv_sub_f(VIf(Bf4), VIf(Bf7), VOf(Bf7));
    __hv_fma_f(VIf(Bf1), VIf(Bf6), VIf(Bf7), VOf(Bf7));
    __hv_mul_f(VIf(Bf2), VIf(Bf7), VOf(Bf7));
    __hv_var_k_f(VOf(Bf6), 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f);
    __hv_sub_f(VIf(Bf5), VIf(Bf6), VOf(Bf6));
    __hv_floor_f(VIf(Bf6), VOf(Bf5));
    __hv_sub_f(VIf(Bf6), VIf(Bf5), VOf(Bf5));
    __hv_var_k_f(VOf(Bf6), 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f);
    __hv_sub_f(VIf(Bf5), VIf(Bf6), VOf(Bf6));
    __hv_abs_f(VIf(Bf6), VOf(Bf6));
    __hv_var_k_f(VOf(Bf5), 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f);
    __hv_sub_f(VIf(Bf6), VIf(Bf5), VOf(Bf5));
    __hv_var_k_f(VOf(Bf6), 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f);
    __hv_mul_f(VIf(Bf5), VIf(Bf6), VOf(Bf6));
    __hv_mul_f(VIf(Bf6), VIf(Bf6), VOf(Bf5));
    __hv_mul_f(VIf(Bf6), VIf(Bf5), VOf(Bf1));
    __hv_mul_f(VIf(Bf1), VIf(Bf5), VOf(Bf5));
    __hv_var_k_f(VOf(Bf4), 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f);
    __hv_var_k_f(VOf(Bf0), 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f);
    __hv_mul_f(VIf(Bf1), VIf(Bf0), VOf(Bf0));
    __hv_sub_f(VIf(Bf6), VIf(Bf0), VOf(Bf0));
    __hv_fma_f(VIf(Bf5), VIf(Bf4), VIf(Bf0), VOf(Bf0));
    __hv_mul_f(VIf(Bf2), VIf(Bf0), VOf(Bf0));
    __hv_cpole_f(&sCPole_B0Kyn, VIf(Bf3), VIf(ZERO), VIf(Bf7), VIf(Bf0), VOf(Bf0), VOf(Bf7));
    __hv_add_f(VIf(Bf0), VIf(O1), VOf(O1));
    __hv_add_f(VIf(Bf0), VIf(O0), VOf(O0));

    // save output vars to output buffer
    __hv_store_f(outputBuffers[0]+n, VIf(O0));
    __hv_store_f(outputBuffers[1]+n, VIf(O1));
  }

  blockStartTimestamp = nextBlock;

  return n4; // return the number of frames processed
}

int Heavy_wakefield::processInline(float *inputBuffers, float *outputBuffers, int n4) {
  hv_assert(!(n4 & HV_N_SIMD_MASK)); // ensure that n4 is a multiple of HV_N_SIMD

  // define the heavy input buffer for 0 channel(s)
  float **const bIn = NULL;

  // define the heavy output buffer for 2 channel(s)
  float **const bOut = reinterpret_cast<float **>(hv_alloca(2*sizeof(float *)));
  bOut[0] = outputBuffers+(0*n4);
  bOut[1] = outputBuffers+(1*n4);

  int n = process(bIn, bOut, n4);
  return n;
}

int Heavy_wakefield::processInlineInterleaved(float *inputBuffers, float *outputBuffers, int n4) {
  hv_assert(n4 & ~HV_N_SIMD_MASK); // ensure that n4 is a multiple of HV_N_SIMD

  // define the heavy input buffer for 0 channel(s), uninterleave
  float *const bIn = NULL;

  // define the heavy output buffer for 2 channel(s)
  float *const bOut = reinterpret_cast<float *>(hv_alloca(2*n4*sizeof(float)));

  int n = processInline(bIn, bOut, n4);

  // interleave the heavy output into the output buffer
  #if HV_SIMD_AVX
  for (int i = 0, j = 0; j < n4; j += 8, i += 16) {
    __m256 x = _mm256_load_ps(bOut+j);    // LLLLLLLL
    __m256 y = _mm256_load_ps(bOut+n4+j); // RRRRRRRR
    __m256 a = _mm256_unpacklo_ps(x, y);  // LRLRLRLR
    __m256 b = _mm256_unpackhi_ps(x, y);  // LRLRLRLR
    _mm256_store_ps(outputBuffers+i, a);
    _mm256_store_ps(outputBuffers+8+i, b);
  }
  #elif HV_SIMD_SSE
  for (int i = 0, j = 0; j < n4; j += 4, i += 8) {
    __m128 x = _mm_load_ps(bOut+j);    // LLLL
    __m128 y = _mm_load_ps(bOut+n4+j); // RRRR
    __m128 a = _mm_unpacklo_ps(x, y);  // LRLR
    __m128 b = _mm_unpackhi_ps(x, y);  // LRLR
    _mm_store_ps(outputBuffers+i, a);
    _mm_store_ps(outputBuffers+4+i, b);
  }
  #elif HV_SIMD_NEON
  // https://community.arm.com/groups/processors/blog/2012/03/13/coding-for-neon--part-5-rearranging-vectors
  for (int i = 0, j = 0; j < n4; j += 4, i += 8) {
    float32x4_t x = vld1q_f32(bOut+j);
    float32x4_t y = vld1q_f32(bOut+n4+j);
    float32x4x2_t z = {x, y};
    vst2q_f32(outputBuffers+i, z); // interleave and store
  }
  #else // HV_SIMD_NONE
  for (int i = 0; i < 2; ++i) {
    for (int j = 0; j < n4; ++j) {
      outputBuffers[i+2*j] = bOut[i*n4+j];
    }
  }
  #endif

  return n;
}
