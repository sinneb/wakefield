/**
 * Copyright (c) 2017 Enzien Audio, Ltd.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, and/or
 * sublicense copies of the Software, strictly on a non-commercial basis,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 * 
 * DO NOT MODIFY. THIS CODE IS MACHINE GENERATED BY THE ENZIEN AUDIO HEAVY COMPILER
 */

#include "Heavy_wakefield.hpp"

#define Context(_c) reinterpret_cast<Heavy_wakefield *>(_c)



/*
 * C Functions
 */

extern "C" {
  HV_EXPORT HeavyContextInterface *hv_wakefield_new(double sampleRate) {
    return new Heavy_wakefield(sampleRate);
  }

  HV_EXPORT HeavyContextInterface *hv_wakefield_new_with_options(double sampleRate,
      int poolKb, int inQueueKb, int outQueueKb) {
    return new Heavy_wakefield(sampleRate, poolKb, inQueueKb, outQueueKb);
  }
} // extern "C"







/*
 * Class Functions
 */

Heavy_wakefield::Heavy_wakefield(double sampleRate, int poolKb, int inQueueKb, int outQueueKb)
    : HeavyContext(sampleRate, poolKb, inQueueKb, outQueueKb) {
  numBytes += sPhasor_k_init(&sPhasor_glGom, 0.0f, sampleRate);
  numBytes += sPhasor_k_init(&sPhasor_HQdaM, 0.0f, sampleRate);
  numBytes += sPhasor_k_init(&sPhasor_I1U7T, 0.0f, sampleRate);
  numBytes += sPhasor_k_init(&sPhasor_wILZr, 0.0f, sampleRate);
  numBytes += sPhasor_k_init(&sPhasor_gqPkj, 0.1f, sampleRate);
  numBytes += sPhasor_init(&sPhasor_5rxoq, sampleRate);
  numBytes += sCPole_init(&sCPole_Z5bbj);
  numBytes += cVar_init_f(&cVar_zBK0C, 0.0f);
  numBytes += cVar_init_f(&cVar_R4iik, 0.0f);
  numBytes += cVar_init_f(&cVar_kcC6M, 0.0f);
  numBytes += cDelay_init(this, &cDelay_3Gyyb, 1.0f);
  numBytes += sVarf_init(&sVarf_RGOBs, 0.0f, 0.0f, false);
  numBytes += cSlice_init(&cSlice_7JVSB, 0, 1);
  numBytes += cSlice_init(&cSlice_HKAHd, 1, 1);
  numBytes += cBinop_init(&cBinop_Ylu4t, 0.0f); // __add
  numBytes += cBinop_init(&cBinop_rmFnu, 0.0f); // __add
  numBytes += cVar_init_f(&cVar_X6suP, 0.0f);
  numBytes += cBinop_init(&cBinop_Eoqjn, 20.0f); // __div
  numBytes += cBinop_init(&cBinop_tPg4N, 0.0f); // __mul
  numBytes += cBinop_init(&cBinop_tubrP, 0.0f); // __div
  numBytes += cSlice_init(&cSlice_BhCmf, 1, -1);
  numBytes += cSlice_init(&cSlice_vkDEK, 1, -1);
  numBytes += cVar_init_f(&cVar_oOIxF, 0.0f);
  numBytes += cVar_init_f(&cVar_6EvqE, 0.0f);
  numBytes += cBinop_init(&cBinop_4Udpn, 0.0f); // __sub
  numBytes += cVar_init_f(&cVar_wZEg9, 20.0f);
  numBytes += cBinop_init(&cBinop_mhcmP, 0.0f); // __sub
  numBytes += cVar_init_f(&cVar_hNATR, 0.0f);
  numBytes += cBinop_init(&cBinop_4aoNT, 0.0f); // __mul
  numBytes += cDelay_init(this, &cDelay_zA4F2, 0.0f);
  numBytes += cVar_init_f(&cVar_KsTNI, 20.0f);
  numBytes += cVar_init_f(&cVar_SdPBQ, 0.0f);
  numBytes += cBinop_init(&cBinop_ysq9K, 0.0f); // __mul
  numBytes += cVar_init_f(&cVar_yqjbJ, 0.0f);
  numBytes += cDelay_init(this, &cDelay_bwFoI, 1500.0f);
  numBytes += cRandom_init(&cRandom_SvyhU, 496168529);
  numBytes += cVar_init_f(&cVar_3QVSU, 0.0f);
  numBytes += cVar_init_f(&cVar_50wkU, 20.0f);
  numBytes += cSlice_init(&cSlice_kpgL5, 1, 1);
  numBytes += cSlice_init(&cSlice_eXTrH, 0, 1);
  numBytes += cDelay_init(this, &cDelay_ts0cK, 0.0f);
  numBytes += cVar_init_f(&cVar_BnNJO, 20.0f);
  numBytes += cBinop_init(&cBinop_XvBL5, 0.0f); // __mul
  numBytes += cBinop_init(&cBinop_xIRaK, 0.0f); // __add
  numBytes += cBinop_init(&cBinop_tjiYt, 0.0f); // __div
  numBytes += cBinop_init(&cBinop_ybjbn, 20.0f); // __div
  numBytes += cVar_init_f(&cVar_MSoVQ, 0.0f);
  numBytes += cBinop_init(&cBinop_BQ2m2, 0.0f); // __sub
  numBytes += cVar_init_f(&cVar_TyYI9, 0.0f);
  numBytes += cVar_init_f(&cVar_4Wg4Q, 0.0f);
  numBytes += cBinop_init(&cBinop_m4O86, 0.0f); // __sub
  numBytes += cBinop_init(&cBinop_kZS4C, 0.0f); // __mul
  numBytes += cBinop_init(&cBinop_v5m3C, 0.0f); // __add
  numBytes += cVar_init_f(&cVar_iT95N, 0.0f);
  numBytes += cSlice_init(&cSlice_4TIzN, 1, -1);
  numBytes += cSlice_init(&cSlice_sVisa, 1, -1);
  numBytes += cBinop_init(&cBinop_MpTgp, 0.0f); // __mul
  numBytes += sVarf_init(&sVarf_BUAZD, 0.0f, 0.0f, false);
  numBytes += cDelay_init(this, &cDelay_j0CAL, 1500.0f);
  numBytes += cRandom_init(&cRandom_sg4gK, -820003981);
  numBytes += cDelay_init(this, &cDelay_YUSvi, 1.0f);
  numBytes += cVar_init_f(&cVar_05DMw, 0.0f);
  numBytes += cVar_init_f(&cVar_j8ss1, 0.0f);
  numBytes += cBinop_init(&cBinop_2fjof, 0.0f); // __mul
  numBytes += cDelay_init(this, &cDelay_Ixl9n, 0.0f);
  numBytes += cVar_init_f(&cVar_cSaym, 1000.0f);
  numBytes += cVar_init_f(&cVar_CmD2J, 0.0f);
  numBytes += cVar_init_f(&cVar_Ele0d, 0.0f);
  numBytes += sVarf_init(&sVarf_jbMVY, 0.0f, 0.0f, false);
  numBytes += cVar_init_f(&cVar_G7Z8e, 0.0f);
  numBytes += cVar_init_f(&cVar_XnUkR, 1.0f);
  numBytes += sVarf_init(&sVarf_Jzfbm, 1.0f, 0.0f, false);
  numBytes += cIf_init(&cIf_WXyBp, false);
  numBytes += sVarf_init(&sVarf_yUml6, 0.0f, 0.0f, false);
  numBytes += sVarf_init(&sVarf_UC8By, 0.0f, 0.0f, false);
  numBytes += sVarf_init(&sVarf_G5TJv, 0.0f, 0.0f, false);
  numBytes += cDelay_init(this, &cDelay_9bkIH, 1500.0f);
  numBytes += cRandom_init(&cRandom_3Spj7, 1975806771);
  numBytes += cDelay_init(this, &cDelay_Lt71x, 1.0f);
  numBytes += cBinop_init(&cBinop_UJFtt, 0.0f); // __sub
  numBytes += cBinop_init(&cBinop_KvLz1, 20.0f); // __div
  numBytes += cBinop_init(&cBinop_7rIaR, 0.0f); // __sub
  numBytes += cVar_init_f(&cVar_j9gmk, 0.0f);
  numBytes += cVar_init_f(&cVar_1aLPc, 0.0f);
  numBytes += cVar_init_f(&cVar_H01Uf, 0.0f);
  numBytes += cBinop_init(&cBinop_eIP2f, 0.0f); // __add
  numBytes += cDelay_init(this, &cDelay_sgkx1, 0.0f);
  numBytes += cBinop_init(&cBinop_7lchN, 0.0f); // __mul
  numBytes += cVar_init_f(&cVar_pwv2m, 20.0f);
  numBytes += cBinop_init(&cBinop_a7cgX, 0.0f); // __mul
  numBytes += cVar_init_f(&cVar_8s88m, 0.0f);
  numBytes += cBinop_init(&cBinop_5hZwI, 0.0f); // __add
  numBytes += cBinop_init(&cBinop_7X4ku, 0.0f); // __div
  numBytes += cBinop_init(&cBinop_A5SMf, 0.0f); // __mul
  numBytes += cSlice_init(&cSlice_7KgAW, 0, 1);
  numBytes += cSlice_init(&cSlice_3gdId, 1, 1);
  numBytes += cVar_init_f(&cVar_n96Mv, 20.0f);
  numBytes += cSlice_init(&cSlice_WvKHm, 1, -1);
  numBytes += cSlice_init(&cSlice_rXhJY, 1, -1);
  numBytes += cVar_init_f(&cVar_VlTJq, 0.0f);
  numBytes += cVar_init_f(&cVar_FJLEK, 0.0f);
  numBytes += sVarf_init(&sVarf_EFrNu, 0.0f, 0.0f, false);
  numBytes += sVarf_init(&sVarf_mUiG1, 0.0f, 0.0f, false);
  numBytes += cVar_init_f(&cVar_rNYNo, 0.0f);
  numBytes += cBinop_init(&cBinop_lHHV3, 0.0f); // __mul
  numBytes += cBinop_init(&cBinop_cmkWQ, 0.0f); // __div
  numBytes += cVar_init_f(&cVar_byNRW, 0.0f);
  numBytes += cSlice_init(&cSlice_gcHBP, 0, 1);
  numBytes += cSlice_init(&cSlice_OyogB, 1, 1);
  numBytes += cBinop_init(&cBinop_kLqaS, 0.0f); // __mul
  numBytes += cBinop_init(&cBinop_l1Byy, 0.0f); // __add
  numBytes += cBinop_init(&cBinop_ZWxm6, 0.0f); // __mul
  numBytes += cVar_init_f(&cVar_bTbnT, 20.0f);
  numBytes += cDelay_init(this, &cDelay_9SshR, 0.0f);
  numBytes += cBinop_init(&cBinop_ZeMfa, 0.0f); // __add
  numBytes += cVar_init_f(&cVar_YdSRB, 0.0f);
  numBytes += cVar_init_f(&cVar_EtTaV, 0.0f);
  numBytes += cVar_init_f(&cVar_3ZRvH, 0.0f);
  numBytes += cBinop_init(&cBinop_zd81i, 20.0f); // __div
  numBytes += cVar_init_f(&cVar_LNsr3, 0.0f);
  numBytes += cBinop_init(&cBinop_IgSko, 0.0f); // __sub
  numBytes += cBinop_init(&cBinop_bYuha, 0.0f); // __sub
  numBytes += cSlice_init(&cSlice_e6YyH, 1, -1);
  numBytes += cSlice_init(&cSlice_OLrKi, 1, -1);
  numBytes += cVar_init_f(&cVar_cj6bc, 20.0f);
  numBytes += cVar_init_f(&cVar_aG4s0, 0.0f);
  numBytes += sVarf_init(&sVarf_gHznS, 0.0f, 0.0f, false);
  numBytes += cDelay_init(this, &cDelay_KIy0R, 1500.0f);
  numBytes += cDelay_init(this, &cDelay_TlVsM, 1.0f);
  numBytes += cRandom_init(&cRandom_oJOzq, -1796638987);
  numBytes += cVar_init_f(&cVar_WdVel, 0.0f);
  
  // schedule a message to trigger all loadbangs via the __hv_init receiver
  scheduleMessageForReceiver(0xCE5CC65B, msg_initWithBang(HV_MESSAGE_ON_STACK(1), 0));
}

Heavy_wakefield::~Heavy_wakefield() {
  // nothing to free
}

HvTable *Heavy_wakefield::getTableForHash(hv_uint32_t tableHash) {
  return nullptr;
}

void Heavy_wakefield::scheduleMessageForReceiver(hv_uint32_t receiverHash, HvMessage *m) {
  switch (receiverHash) {
    case 0xCE5CC65B: { // __hv_init
      mq_addMessageByTimestamp(&mq, m, 0, &cReceive_okwor_sendMessage);
      break;
    }
    case 0x3075BDE4: { // thefloat1
      mq_addMessageByTimestamp(&mq, m, 0, &cReceive_uh1tz_sendMessage);
      break;
    }
    case 0xCCF12A5A: { // thefloat2
      mq_addMessageByTimestamp(&mq, m, 0, &cReceive_SrG4p_sendMessage);
      break;
    }
    case 0xD68AF3C4: { // thefloat3
      mq_addMessageByTimestamp(&mq, m, 0, &cReceive_LPH05_sendMessage);
      break;
    }
    default: return;
  }
}

int Heavy_wakefield::getParameterInfo(int index, HvParameterInfo *info) {
  if (info != nullptr) {
    switch (index) {
      default: {
        info->name = "invalid parameter index";
        info->hash = 0;
        info->type = HvParameterType::HV_PARAM_TYPE_PARAMETER;
        info->minVal = 0.0f;
        info->maxVal = 0.0f;
        info->defaultVal = 0.0f;
        break;
      }
    }
  }
  return 0;
}



/*
 * Send Function Implementations
 */


void Heavy_wakefield::cVar_zBK0C_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
}

void Heavy_wakefield::cVar_R4iik_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sPhasor_k_onMessage(_c, &Context(_c)->sPhasor_gqPkj, 0, m);
}

void Heavy_wakefield::cVar_kcC6M_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sVarf_onMessage(_c, &Context(_c)->sVarf_mUiG1, m);
}

void Heavy_wakefield::cSend_ZGaxK_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  if (_c->getSendHook() != nullptr) _c->getSendHook()(_c, "thefloat2", 0xCCF12A5A, m);
  cReceive_SrG4p_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSend_A6c8w_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  if (_c->getSendHook() != nullptr) _c->getSendHook()(_c, "thefloat3", 0xD68AF3C4, m);
  cReceive_LPH05_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_NsieA_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_Hihv0_sendMessage(_c, 0, m);
  cSwitchcase_7x2xi_onMessage(_c, NULL, 0, m, NULL);
  cSwitchcase_Mykg8_onMessage(_c, NULL, 0, m, NULL);
  cRandom_onMessage(_c, &Context(_c)->cRandom_SvyhU, 0, m, &cRandom_SvyhU_sendMessage);
}

void Heavy_wakefield::cCast_nW93z_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_DwW0q_sendMessage(_c, 0, m);
  cSwitchcase_6lgaE_onMessage(_c, NULL, 0, m, NULL);
  cSwitchcase_pL9zd_onMessage(_c, NULL, 0, m, NULL);
  cRandom_onMessage(_c, &Context(_c)->cRandom_sg4gK, 0, m, &cRandom_sg4gK_sendMessage);
}

void Heavy_wakefield::cCast_W3Hx5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_FLxyL_sendMessage(_c, 0, m);
  cSwitchcase_VtrS4_onMessage(_c, NULL, 0, m, NULL);
  cSwitchcase_J5CZX_onMessage(_c, NULL, 0, m, NULL);
  cRandom_onMessage(_c, &Context(_c)->cRandom_oJOzq, 0, m, &cRandom_oJOzq_sendMessage);
}

void Heavy_wakefield::cCast_JIIDg_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_ZWjYZ_sendMessage(_c, 0, m);
  cSwitchcase_cYL1p_onMessage(_c, NULL, 0, m, NULL);
  cSwitchcase_89H8e_onMessage(_c, NULL, 0, m, NULL);
  cRandom_onMessage(_c, &Context(_c)->cRandom_3Spj7, 0, m, &cRandom_3Spj7_sendMessage);
}

void Heavy_wakefield::cSwitchcase_XtwxH_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_JIIDg_sendMessage);
      break;
    }
    case 0x3F800000: { // "1.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_W3Hx5_sendMessage);
      break;
    }
    case 0x40000000: { // "2.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_nW93z_sendMessage);
      break;
    }
    case 0x40400000: { // "3.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_NsieA_sendMessage);
      break;
    }
    default: {
      break;
    }
  }
}

void Heavy_wakefield::cReceive_uh1tz_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_kcC6M, 0, m, &cVar_kcC6M_sendMessage);
}

void Heavy_wakefield::cSwitchcase_7x2xi_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_L5qlf_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_L5qlf_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_3Gyyb, 1, m, &cDelay_3Gyyb_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_WlKQp_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cCast_WlKQp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_3Gyyb, 0, m, &cDelay_3Gyyb_sendMessage);
}

void Heavy_wakefield::cMsg_L5qlf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_3Gyyb, 0, m, &cDelay_3Gyyb_sendMessage);
}

void Heavy_wakefield::cDelay_3Gyyb_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_3Gyyb, m);
  cMsg_sAIql_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_Hihv0_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_GhS9t_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_rXwy9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sPhasor_k_onMessage(_c, &Context(_c)->sPhasor_wILZr, 0, m);
}

void Heavy_wakefield::cMsg_sAIql_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1000.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_GhS9t_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_Bsnqf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_GhS9t_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_BVFAC_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_yqjbJ, 0, m, &cVar_yqjbJ_sendMessage);
  sVarf_onMessage(_c, &Context(_c)->sVarf_RGOBs, m);
}

void Heavy_wakefield::cBinop_zK4gJ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_a9YT3_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_VbgGw_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_ZeI1T_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_kLHt8_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_SdPBQ, 1, m, &cVar_SdPBQ_sendMessage);
}

void Heavy_wakefield::cCast_XRlGo_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_X6suP, 0, m, &cVar_X6suP_sendMessage);
}

void Heavy_wakefield::cCast_bChbl_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_ysq9K, HV_BINOP_MULTIPLY, 0, m, &cBinop_ysq9K_sendMessage);
}

void Heavy_wakefield::cSlice_7JVSB_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_kLHt8_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_IiTyS_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_HKAHd_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_bChbl_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_Irurq_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cBinop_Ylu4t_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_6EvqE, 1, m, &cVar_6EvqE_sendMessage);
}

void Heavy_wakefield::cBinop_rmFnu_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_oOIxF, 0, m, &cVar_oOIxF_sendMessage);
}

void Heavy_wakefield::cVar_X6suP_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_bChbl_sendMessage);
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_Irurq_sendMessage);
}

void Heavy_wakefield::cCast_MVUOI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_PuPTF_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_Eoqjn_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_tubrP, HV_BINOP_DIVIDE, 1, m, &cBinop_tubrP_sendMessage);
}

void Heavy_wakefield::cMsg_zPeLH_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_ZeI1T_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_R6H8T_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_PuPTF_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_bpbX5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 20.0f);
  cBinop_onMessage(_c, &Context(_c)->cBinop_tPg4N, HV_BINOP_MULTIPLY, 0, m, &cBinop_tPg4N_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_Eoqjn, HV_BINOP_DIVIDE, 1, m, &cBinop_Eoqjn_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_KsTNI, 0, m, &cVar_KsTNI_sendMessage);
}

void Heavy_wakefield::cBinop_9UcpM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_4Udpn, HV_BINOP_SUBTRACT, 1, m, &cBinop_4Udpn_sendMessage);
}

void Heavy_wakefield::cCast_tGnyr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_MVUOI_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_rmFnu, HV_BINOP_ADD, 0, m, &cBinop_rmFnu_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_6EvqE, 1, m, &cVar_6EvqE_sendMessage);
}

void Heavy_wakefield::cBinop_tPg4N_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_9UcpM_sendMessage);
}

void Heavy_wakefield::cCast_jCZU9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_VbgGw_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_tubrP_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_rmFnu, HV_BINOP_ADD, 1, m, &cBinop_rmFnu_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_Ylu4t, HV_BINOP_ADD, 1, m, &cBinop_Ylu4t_sendMessage);
}

void Heavy_wakefield::cSlice_BhCmf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cMsg_VbgGw_sendMessage(_c, 0, m);
      break;
    }
    case 1: {
      cMsg_VbgGw_sendMessage(_c, 0, m);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_vkDEK_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_jCZU9_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_tGnyr_sendMessage);
      break;
    }
    case 1: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_jCZU9_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_tGnyr_sendMessage);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSwitchcase_GhS9t_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cSlice_onMessage(_c, &Context(_c)->cSlice_BhCmf, 0, m, &cSlice_BhCmf_sendMessage);
      break;
    }
    case 0x3E004DAB: { // "set"
      cSlice_onMessage(_c, &Context(_c)->cSlice_vkDEK, 0, m, &cSlice_vkDEK_sendMessage);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_XRlGo_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_HKAHd, 0, m, &cSlice_HKAHd_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_7JVSB, 0, m, &cSlice_7JVSB_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_LVnPT_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_b8oh7_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cMsg_ttSqd_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_YCM2N_sendMessage);
}

void Heavy_wakefield::cSystem_YCM2N_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_tPg4N, HV_BINOP_MULTIPLY, 1, m, &cBinop_tPg4N_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_ysq9K, HV_BINOP_MULTIPLY, 1, m, &cBinop_ysq9K_sendMessage);
}

void Heavy_wakefield::cCast_VdVQS_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_SdPBQ, 0, m, &cVar_SdPBQ_sendMessage);
}

void Heavy_wakefield::cVar_oOIxF_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_mhcmP, HV_BINOP_SUBTRACT, 1, m, &cBinop_mhcmP_sendMessage);
}

void Heavy_wakefield::cVar_6EvqE_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_Ylu4t, HV_BINOP_ADD, 0, m, &cBinop_Ylu4t_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_rmFnu, HV_BINOP_ADD, 0, m, &cBinop_rmFnu_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_BVFAC_sendMessage);
}

void Heavy_wakefield::cBinop_4Udpn_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_hNATR, 1, m, &cVar_hNATR_sendMessage);
}

void Heavy_wakefield::cVar_wZEg9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_K3KPw_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_b8oh7_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_Wh4Y6_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_PuPTF_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_ZeI1T_onMessage(_c, NULL, 0, m, NULL);
  cBinop_onMessage(_c, &Context(_c)->cBinop_rmFnu, HV_BINOP_ADD, 1, m, &cBinop_rmFnu_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_Ylu4t, HV_BINOP_ADD, 1, m, &cBinop_Ylu4t_sendMessage);
}

void Heavy_wakefield::cBinop_mhcmP_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_tubrP, HV_BINOP_DIVIDE, 0, m, &cBinop_tubrP_sendMessage);
}

void Heavy_wakefield::cVar_hNATR_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_4Udpn, HV_BINOP_SUBTRACT, 0, m, &cBinop_4Udpn_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_LESS_THAN_EQL, 0.0f, 0, m, &cBinop_zK4gJ_sendMessage);
}

void Heavy_wakefield::cBinop_4aoNT_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_kOSFx_sendMessage);
}

void Heavy_wakefield::cDelay_zA4F2_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_zA4F2, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_zA4F2, 0, m, &cDelay_zA4F2_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_hNATR, 0, m, &cVar_hNATR_sendMessage);
}

void Heavy_wakefield::cCast_bl4b4_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_EmE14_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_zA4F2, 0, m, &cDelay_zA4F2_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_hNATR, 0, m, &cVar_hNATR_sendMessage);
}

void Heavy_wakefield::cMsg_D00Ye_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_8cl4A_sendMessage);
}

void Heavy_wakefield::cSystem_8cl4A_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_tDzHk_sendMessage);
}

void Heavy_wakefield::cBinop_tDzHk_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_4aoNT, HV_BINOP_MULTIPLY, 1, m, &cBinop_4aoNT_sendMessage);
}

void Heavy_wakefield::cVar_KsTNI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_4aoNT, HV_BINOP_MULTIPLY, 0, m, &cBinop_4aoNT_sendMessage);
}

void Heavy_wakefield::cMsg_EmE14_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_zA4F2, 0, m, &cDelay_zA4F2_sendMessage);
}

void Heavy_wakefield::cSwitchcase_ZeI1T_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_EmE14_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_EmE14_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_bl4b4_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cBinop_kOSFx_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_zA4F2, 2, m, &cDelay_zA4F2_sendMessage);
}

void Heavy_wakefield::cCast_5ecej_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_R6H8T_sendMessage);
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_VdVQS_sendMessage);
}

void Heavy_wakefield::cCast_6aYoE_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_6EvqE, 0, m, &cVar_6EvqE_sendMessage);
}

void Heavy_wakefield::cSwitchcase_a9YT3_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_6aYoE_sendMessage);
      break;
    }
    case 0x3F800000: { // "1.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_5ecej_sendMessage);
      break;
    }
    default: {
      break;
    }
  }
}

void Heavy_wakefield::cCast_Irurq_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_Eoqjn, HV_BINOP_DIVIDE, 0, m, &cBinop_Eoqjn_sendMessage);
}

void Heavy_wakefield::cCast_IiTyS_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_mhcmP, HV_BINOP_SUBTRACT, 0, m, &cBinop_mhcmP_sendMessage);
}

void Heavy_wakefield::cBinop_NbA8a_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_hNATR, 1, m, &cVar_hNATR_sendMessage);
}

void Heavy_wakefield::cMsg_Wh4Y6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cVar_onMessage(_c, &Context(_c)->cVar_X6suP, 1, m, &cVar_X6suP_sendMessage);
}

void Heavy_wakefield::cVar_SdPBQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_6EvqE, 0, m, &cVar_6EvqE_sendMessage);
}

void Heavy_wakefield::cCast_7G8JG_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_bpbX5_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_K3KPw_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_7G8JG_sendMessage);
      break;
    }
    default: {
      cBinop_onMessage(_c, &Context(_c)->cBinop_tPg4N, HV_BINOP_MULTIPLY, 0, m, &cBinop_tPg4N_sendMessage);
      cBinop_onMessage(_c, &Context(_c)->cBinop_Eoqjn, HV_BINOP_DIVIDE, 1, m, &cBinop_Eoqjn_sendMessage);
      cVar_onMessage(_c, &Context(_c)->cVar_KsTNI, 0, m, &cVar_KsTNI_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cBinop_ysq9K_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_NbA8a_sendMessage);
}

void Heavy_wakefield::cCast_LVnPT_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_zPeLH_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_yqjbJ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
}

void Heavy_wakefield::cDelay_bwFoI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_bwFoI, m);
  cMsg_Bsnqf_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_DMxjb_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_bwFoI, 0, m, &cDelay_bwFoI_sendMessage);
}

void Heavy_wakefield::cMsg_a2u1u_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_bwFoI, 0, m, &cDelay_bwFoI_sendMessage);
}

void Heavy_wakefield::cSwitchcase_Mykg8_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_a2u1u_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_a2u1u_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_bwFoI, 1, m, &cDelay_bwFoI_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_DMxjb_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cRandom_SvyhU_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MULTIPLY, 220.0f, 0, m, &cBinop_TA5g6_sendMessage);
}

void Heavy_wakefield::cBinop_TA5g6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cUnop_onMessage(_c, HV_UNOP_FLOOR, m, &cUnop_VSzGF_sendMessage);
}

void Heavy_wakefield::cUnop_VSzGF_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 40.0f, 0, m, &cBinop_rXwy9_sendMessage);
}

void Heavy_wakefield::cVar_3QVSU_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_BQ2m2, HV_BINOP_SUBTRACT, 0, m, &cBinop_BQ2m2_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_LESS_THAN_EQL, 0.0f, 0, m, &cBinop_DFJvZ_sendMessage);
}

void Heavy_wakefield::cCast_EPGLU_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_61Si7_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_50wkU_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_mmir6_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_czN1q_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_m4O86, HV_BINOP_SUBTRACT, 0, m, &cBinop_m4O86_sendMessage);
}

void Heavy_wakefield::cSlice_kpgL5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_cC9v0_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_VOJqT_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_eXTrH_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_6WTgM_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_czN1q_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cCast_FPfO1_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_T3B23_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_mmir6_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_FPfO1_sendMessage);
      break;
    }
    default: {
      cBinop_onMessage(_c, &Context(_c)->cBinop_MpTgp, HV_BINOP_MULTIPLY, 0, m, &cBinop_MpTgp_sendMessage);
      cBinop_onMessage(_c, &Context(_c)->cBinop_ybjbn, HV_BINOP_DIVIDE, 1, m, &cBinop_ybjbn_sendMessage);
      cVar_onMessage(_c, &Context(_c)->cVar_BnNJO, 0, m, &cVar_BnNJO_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cCast_Ayv2z_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_2lByX_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_s1QG2_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_D2VOB_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_v5m3C, HV_BINOP_ADD, 0, m, &cBinop_v5m3C_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_MSoVQ, 1, m, &cVar_MSoVQ_sendMessage);
}

void Heavy_wakefield::cMsg_bXrcf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_ts0cK, 0, m, &cDelay_ts0cK_sendMessage);
}

void Heavy_wakefield::cMsg_KHXtC_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_NzclX_sendMessage);
}

void Heavy_wakefield::cSystem_NzclX_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_w7kkI_sendMessage);
}

void Heavy_wakefield::cSwitchcase_gj8rW_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_bXrcf_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_bXrcf_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_kXEy9_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cDelay_ts0cK_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_ts0cK, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_ts0cK, 0, m, &cDelay_ts0cK_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_3QVSU, 0, m, &cVar_3QVSU_sendMessage);
}

void Heavy_wakefield::cBinop_WcMS2_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_ts0cK, 2, m, &cDelay_ts0cK_sendMessage);
}

void Heavy_wakefield::cBinop_w7kkI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_XvBL5, HV_BINOP_MULTIPLY, 1, m, &cBinop_XvBL5_sendMessage);
}

void Heavy_wakefield::cCast_kXEy9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_bXrcf_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_ts0cK, 0, m, &cDelay_ts0cK_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_3QVSU, 0, m, &cVar_3QVSU_sendMessage);
}

void Heavy_wakefield::cVar_BnNJO_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_XvBL5, HV_BINOP_MULTIPLY, 0, m, &cBinop_XvBL5_sendMessage);
}

void Heavy_wakefield::cBinop_XvBL5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_WcMS2_sendMessage);
}

void Heavy_wakefield::cBinop_xIRaK_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_MSoVQ, 1, m, &cVar_MSoVQ_sendMessage);
}

void Heavy_wakefield::cBinop_tjiYt_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_v5m3C, HV_BINOP_ADD, 1, m, &cBinop_v5m3C_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_xIRaK, HV_BINOP_ADD, 1, m, &cBinop_xIRaK_sendMessage);
}

void Heavy_wakefield::cCast_6WTgM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_iT95N, 1, m, &cVar_iT95N_sendMessage);
}

void Heavy_wakefield::cCast_VI9yJ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_TyYI9, 0, m, &cVar_TyYI9_sendMessage);
}

void Heavy_wakefield::cBinop_ybjbn_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_tjiYt, HV_BINOP_DIVIDE, 1, m, &cBinop_tjiYt_sendMessage);
}

void Heavy_wakefield::cCast_ADDIM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_iT95N, 0, m, &cVar_iT95N_sendMessage);
}

void Heavy_wakefield::cCast_y4fEc_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_42QRe_sendMessage);
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_ADDIM_sendMessage);
}

void Heavy_wakefield::cCast_nwG2M_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_MSoVQ, 0, m, &cVar_MSoVQ_sendMessage);
}

void Heavy_wakefield::cSwitchcase_6XvgS_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_nwG2M_sendMessage);
      break;
    }
    case 0x3F800000: { // "1.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_y4fEc_sendMessage);
      break;
    }
    default: {
      break;
    }
  }
}

void Heavy_wakefield::cCast_42QRe_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_H2sYI_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_MSoVQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_xIRaK, HV_BINOP_ADD, 0, m, &cBinop_xIRaK_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_v5m3C, HV_BINOP_ADD, 0, m, &cBinop_v5m3C_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_tFHe1_sendMessage);
}

void Heavy_wakefield::cBinop_BQ2m2_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_3QVSU, 1, m, &cVar_3QVSU_sendMessage);
}

void Heavy_wakefield::cCast_VOJqT_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_ybjbn, HV_BINOP_DIVIDE, 0, m, &cBinop_ybjbn_sendMessage);
}

void Heavy_wakefield::cMsg_H2sYI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_gj8rW_onMessage(_c, NULL, 0, m, NULL);
  cBinop_onMessage(_c, &Context(_c)->cBinop_v5m3C, HV_BINOP_ADD, 1, m, &cBinop_v5m3C_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_xIRaK, HV_BINOP_ADD, 1, m, &cBinop_xIRaK_sendMessage);
}

void Heavy_wakefield::cMsg_61Si7_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_gj8rW_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cVar_TyYI9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_cC9v0_sendMessage);
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_VOJqT_sendMessage);
}

void Heavy_wakefield::cBinop_DFJvZ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_6XvgS_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_rE1eD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_CduV2_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_4Wg4Q_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_m4O86, HV_BINOP_SUBTRACT, 1, m, &cBinop_m4O86_sendMessage);
}

void Heavy_wakefield::cMsg_T3B23_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 20.0f);
  cBinop_onMessage(_c, &Context(_c)->cBinop_MpTgp, HV_BINOP_MULTIPLY, 0, m, &cBinop_MpTgp_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_ybjbn, HV_BINOP_DIVIDE, 1, m, &cBinop_ybjbn_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_BnNJO, 0, m, &cVar_BnNJO_sendMessage);
}

void Heavy_wakefield::cMsg_CduV2_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cVar_onMessage(_c, &Context(_c)->cVar_TyYI9, 1, m, &cVar_TyYI9_sendMessage);
}

void Heavy_wakefield::cCast_cC9v0_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_kZS4C, HV_BINOP_MULTIPLY, 0, m, &cBinop_kZS4C_sendMessage);
}

void Heavy_wakefield::cBinop_m4O86_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_tjiYt, HV_BINOP_DIVIDE, 0, m, &cBinop_tjiYt_sendMessage);
}

void Heavy_wakefield::cBinop_kZS4C_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_Pzd8i_sendMessage);
}

void Heavy_wakefield::cBinop_nreyz_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_BQ2m2, HV_BINOP_SUBTRACT, 1, m, &cBinop_BQ2m2_sendMessage);
}

void Heavy_wakefield::cCast_D2VOB_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_H2sYI_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_v5m3C_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_4Wg4Q, 0, m, &cVar_4Wg4Q_sendMessage);
}

void Heavy_wakefield::cMsg_2lByX_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_gj8rW_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cVar_iT95N_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_MSoVQ, 0, m, &cVar_MSoVQ_sendMessage);
}

void Heavy_wakefield::cBinop_Pzd8i_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_3QVSU, 1, m, &cVar_3QVSU_sendMessage);
}

void Heavy_wakefield::cSlice_4TIzN_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cMsg_2lByX_sendMessage(_c, 0, m);
      break;
    }
    case 1: {
      cMsg_2lByX_sendMessage(_c, 0, m);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_sVisa_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Ayv2z_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_s1QG2_sendMessage);
      break;
    }
    case 1: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Ayv2z_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_s1QG2_sendMessage);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSwitchcase_NxdJl_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cSlice_onMessage(_c, &Context(_c)->cSlice_4TIzN, 0, m, &cSlice_4TIzN_sendMessage);
      break;
    }
    case 0x3E004DAB: { // "set"
      cSlice_onMessage(_c, &Context(_c)->cSlice_sVisa, 0, m, &cSlice_sVisa_sendMessage);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_VI9yJ_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_kpgL5, 0, m, &cSlice_kpgL5_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_eXTrH, 0, m, &cSlice_eXTrH_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_EPGLU_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_rE1eD_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cSystem_Nw1t6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_MpTgp, HV_BINOP_MULTIPLY, 1, m, &cBinop_MpTgp_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_kZS4C, HV_BINOP_MULTIPLY, 1, m, &cBinop_kZS4C_sendMessage);
}

void Heavy_wakefield::cMsg_ekCJn_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_Nw1t6_sendMessage);
}

void Heavy_wakefield::cBinop_MpTgp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_nreyz_sendMessage);
}

void Heavy_wakefield::cSwitchcase_pL9zd_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_vx6Rm_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_vx6Rm_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_j0CAL, 1, m, &cDelay_j0CAL_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_oKCyb_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cMsg_vx6Rm_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_j0CAL, 0, m, &cDelay_j0CAL_sendMessage);
}

void Heavy_wakefield::cCast_oKCyb_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_j0CAL, 0, m, &cDelay_j0CAL_sendMessage);
}

void Heavy_wakefield::cDelay_j0CAL_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_j0CAL, m);
  cMsg_PWOKb_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_MYGUE_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sPhasor_k_onMessage(_c, &Context(_c)->sPhasor_I1U7T, 0, m);
}

void Heavy_wakefield::cBinop_tFHe1_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_05DMw, 0, m, &cVar_05DMw_sendMessage);
  sVarf_onMessage(_c, &Context(_c)->sVarf_BUAZD, m);
}

void Heavy_wakefield::cMsg_PWOKb_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_NxdJl_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_XZm3l_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1000.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_NxdJl_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_DwW0q_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_NxdJl_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cUnop_fai4H_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 40.0f, 0, m, &cBinop_MYGUE_sendMessage);
}

void Heavy_wakefield::cRandom_sg4gK_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MULTIPLY, 220.0f, 0, m, &cBinop_oVj2i_sendMessage);
}

void Heavy_wakefield::cBinop_oVj2i_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cUnop_onMessage(_c, HV_UNOP_FLOOR, m, &cUnop_fai4H_sendMessage);
}

void Heavy_wakefield::cCast_t2yG8_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_YUSvi, 0, m, &cDelay_YUSvi_sendMessage);
}

void Heavy_wakefield::cMsg_1Bzrq_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_YUSvi, 0, m, &cDelay_YUSvi_sendMessage);
}

void Heavy_wakefield::cSwitchcase_6lgaE_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_1Bzrq_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_1Bzrq_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_YUSvi, 1, m, &cDelay_YUSvi_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_t2yG8_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cDelay_YUSvi_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_YUSvi, m);
  cMsg_XZm3l_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_05DMw_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
}

void Heavy_wakefield::cVar_j8ss1_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSend_ZGaxK_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_2fjof_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_1LuGZ_sendMessage);
}

void Heavy_wakefield::cDelay_Ixl9n_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_Ixl9n, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_Ixl9n, 0, m, &cDelay_Ixl9n_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_rNYNo, 0, m, &cVar_rNYNo_sendMessage);
}

void Heavy_wakefield::cBinop_1LuGZ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_Ixl9n, 2, m, &cDelay_Ixl9n_sendMessage);
}

void Heavy_wakefield::cVar_cSaym_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_2fjof, HV_BINOP_MULTIPLY, 0, m, &cBinop_2fjof_sendMessage);
}

void Heavy_wakefield::cMsg_Ryfrz_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_Ixl9n, 0, m, &cDelay_Ixl9n_sendMessage);
}

void Heavy_wakefield::cCast_RT3Ch_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_Ryfrz_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_Ixl9n, 0, m, &cDelay_Ixl9n_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_rNYNo, 0, m, &cVar_rNYNo_sendMessage);
}

void Heavy_wakefield::cSwitchcase_njUCP_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_Ryfrz_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_Ryfrz_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_RT3Ch_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cBinop_HtUnI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_2fjof, HV_BINOP_MULTIPLY, 1, m, &cBinop_2fjof_sendMessage);
}

void Heavy_wakefield::cSystem_W0JTy_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_HtUnI_sendMessage);
}

void Heavy_wakefield::cMsg_0ICae_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_W0JTy_sendMessage);
}

void Heavy_wakefield::cVar_CmD2J_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSend_Xwe2X_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_Ele0d_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_XnUkR, 0, m, &cVar_XnUkR_sendMessage);
}

void Heavy_wakefield::cVar_G7Z8e_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSend_A6c8w_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cReceive_LPH05_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_R4iik, 0, m, &cVar_R4iik_sendMessage);
}

void Heavy_wakefield::cReceive_okwor_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_U3nhW_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_pwv2m, 0, m, &cVar_pwv2m_sendMessage);
  cMsg_zkqgW_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_bTbnT, 0, m, &cVar_bTbnT_sendMessage);
  cMsg_KHXtC_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_BnNJO, 0, m, &cVar_BnNJO_sendMessage);
  cMsg_D00Ye_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_KsTNI, 0, m, &cVar_KsTNI_sendMessage);
  cMsg_Wbuel_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_8s88m, 0, m, &cVar_8s88m_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_n96Mv, 0, m, &cVar_n96Mv_sendMessage);
  cMsg_FUAew_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_3ZRvH, 0, m, &cVar_3ZRvH_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_cj6bc, 0, m, &cVar_cj6bc_sendMessage);
  cMsg_ekCJn_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_4Wg4Q, 0, m, &cVar_4Wg4Q_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_50wkU, 0, m, &cVar_50wkU_sendMessage);
  cMsg_ttSqd_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_oOIxF, 0, m, &cVar_oOIxF_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_wZEg9, 0, m, &cVar_wZEg9_sendMessage);
  cMsg_0ICae_sendMessage(_c, 0, m);
  cVar_onMessage(_c, &Context(_c)->cVar_cSaym, 0, m, &cVar_cSaym_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_XnUkR, 0, m, &cVar_XnUkR_sendMessage);
  cMsg_qK6KQ_sendMessage(_c, 0, m);
  cSwitchcase_njUCP_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_IZCUn_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 2.0f);
  msg_setElementToFrom(m, 1, n, 0);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_SUBTRACT, 0.0f, 0, m, &cBinop_NZ8W6_sendMessage);
}

void Heavy_wakefield::cVar_XnUkR_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_GREATER_THAN_EQL, 1e-05f, 0, m, &cBinop_0EBQ6_sendMessage);
  cIf_onMessage(_c, &Context(_c)->cIf_WXyBp, 0, m, &cIf_WXyBp_sendMessage);
}

void Heavy_wakefield::cMsg_jkcg6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setElementToFrom(m, 1, n, 0);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 0.0f, 0, m, &cBinop_xYcWL_sendMessage);
}

void Heavy_wakefield::cMsg_qK6KQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_pze9F_sendMessage);
}

void Heavy_wakefield::cSystem_pze9F_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_jkcg6_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_0EBQ6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cIf_onMessage(_c, &Context(_c)->cIf_WXyBp, 1, m, &cIf_WXyBp_sendMessage);
}

void Heavy_wakefield::cIf_WXyBp_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cMsg_opQcJ_sendMessage(_c, 0, m);
      break;
    }
    case 1: {
      cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 2.0f, 0, m, &cBinop_CVRsN_sendMessage);
      cMsg_E83By_sendMessage(_c, 0, m);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cBinop_FehQd_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sVarf_onMessage(_c, &Context(_c)->sVarf_Jzfbm, m);
  sVarf_onMessage(_c, &Context(_c)->sVarf_UC8By, m);
}

void Heavy_wakefield::cBinop_CVRsN_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_nFpFV_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_opQcJ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 2.0f, 0, m, &cBinop_CVRsN_sendMessage);
  sVarf_onMessage(_c, &Context(_c)->sVarf_Jzfbm, m);
  sVarf_onMessage(_c, &Context(_c)->sVarf_UC8By, m);
}

void Heavy_wakefield::cBinop_xYcWL_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sVarf_onMessage(_c, &Context(_c)->sVarf_yUml6, m);
}

void Heavy_wakefield::cMsg_E83By_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setElementToFrom(m, 1, n, 0);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 0.0f, 0, m, &cBinop_FehQd_sendMessage);
}

void Heavy_wakefield::cMsg_nFpFV_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 2.0f);
  msg_setElementToFrom(m, 1, n, 0);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 0.0f, 0, m, &cBinop_W60pM_sendMessage);
}

void Heavy_wakefield::cBinop_W60pM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_IZCUn_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_NZ8W6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sVarf_onMessage(_c, &Context(_c)->sVarf_G5TJv, m);
}

void Heavy_wakefield::cDelay_9bkIH_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_9bkIH, m);
  cMsg_7VTTN_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_89H8e_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_D4jLi_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_D4jLi_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_9bkIH, 1, m, &cDelay_9bkIH_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_cEreX_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cCast_cEreX_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_9bkIH, 0, m, &cDelay_9bkIH_sendMessage);
}

void Heavy_wakefield::cMsg_D4jLi_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_9bkIH, 0, m, &cDelay_9bkIH_sendMessage);
}

void Heavy_wakefield::cBinop_NaG9f_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cUnop_onMessage(_c, HV_UNOP_FLOOR, m, &cUnop_rDDt3_sendMessage);
}

void Heavy_wakefield::cUnop_rDDt3_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 40.0f, 0, m, &cBinop_87rGm_sendMessage);
}

void Heavy_wakefield::cRandom_3Spj7_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MULTIPLY, 220.0f, 0, m, &cBinop_NaG9f_sendMessage);
}

void Heavy_wakefield::cDelay_Lt71x_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_Lt71x, m);
  cMsg_3xj3A_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_NlSzA_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_Lt71x, 0, m, &cDelay_Lt71x_sendMessage);
}

void Heavy_wakefield::cSwitchcase_cYL1p_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_KxkUe_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_KxkUe_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_Lt71x, 1, m, &cDelay_Lt71x_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_NlSzA_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cMsg_KxkUe_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_Lt71x, 0, m, &cDelay_Lt71x_sendMessage);
}

void Heavy_wakefield::cCast_mpZor_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_EMTwz_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_eIP2f, HV_BINOP_ADD, 0, m, &cBinop_eIP2f_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_VlTJq, 1, m, &cVar_VlTJq_sendMessage);
}

void Heavy_wakefield::cBinop_UJFtt_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_j9gmk, 1, m, &cVar_j9gmk_sendMessage);
}

void Heavy_wakefield::cCast_f0Pks_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_1aLPc, 1, m, &cVar_1aLPc_sendMessage);
}

void Heavy_wakefield::cCast_GAXHy_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_7rIaR, HV_BINOP_SUBTRACT, 0, m, &cBinop_7rIaR_sendMessage);
}

void Heavy_wakefield::cCast_rLKie_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_KvLz1, HV_BINOP_DIVIDE, 0, m, &cBinop_KvLz1_sendMessage);
}

void Heavy_wakefield::cBinop_KvLz1_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_7X4ku, HV_BINOP_DIVIDE, 1, m, &cBinop_7X4ku_sendMessage);
}

void Heavy_wakefield::cBinop_7rIaR_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_7X4ku, HV_BINOP_DIVIDE, 0, m, &cBinop_7X4ku_sendMessage);
}

void Heavy_wakefield::cVar_j9gmk_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_UJFtt, HV_BINOP_SUBTRACT, 0, m, &cBinop_UJFtt_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_LESS_THAN_EQL, 0.0f, 0, m, &cBinop_2d8kY_sendMessage);
}

void Heavy_wakefield::cVar_1aLPc_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_VlTJq, 0, m, &cVar_VlTJq_sendMessage);
}

void Heavy_wakefield::cVar_H01Uf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_iIqsH_sendMessage);
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_rLKie_sendMessage);
}

void Heavy_wakefield::cBinop_eIP2f_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_8s88m, 0, m, &cVar_8s88m_sendMessage);
}

void Heavy_wakefield::cCast_stCbS_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_KPv2h_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cMsg_CfPwW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 20.0f);
  cBinop_onMessage(_c, &Context(_c)->cBinop_a7cgX, HV_BINOP_MULTIPLY, 0, m, &cBinop_a7cgX_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_KvLz1, HV_BINOP_DIVIDE, 1, m, &cBinop_KvLz1_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_pwv2m, 0, m, &cVar_pwv2m_sendMessage);
}

void Heavy_wakefield::cMsg_KPv2h_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_5AJYN_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cDelay_sgkx1_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_sgkx1, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_sgkx1, 0, m, &cDelay_sgkx1_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_j9gmk, 0, m, &cVar_j9gmk_sendMessage);
}

void Heavy_wakefield::cSwitchcase_5AJYN_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_D3vtt_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_D3vtt_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_KPeAz_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cCast_KPeAz_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_D3vtt_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_sgkx1, 0, m, &cDelay_sgkx1_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_j9gmk, 0, m, &cVar_j9gmk_sendMessage);
}

void Heavy_wakefield::cBinop_7lchN_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_fYuea_sendMessage);
}

void Heavy_wakefield::cBinop_fYuea_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_sgkx1, 2, m, &cDelay_sgkx1_sendMessage);
}

void Heavy_wakefield::cMsg_D3vtt_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_sgkx1, 0, m, &cDelay_sgkx1_sendMessage);
}

void Heavy_wakefield::cBinop_yeQkv_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_7lchN, HV_BINOP_MULTIPLY, 1, m, &cBinop_7lchN_sendMessage);
}

void Heavy_wakefield::cMsg_U3nhW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_3VegM_sendMessage);
}

void Heavy_wakefield::cSystem_3VegM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_yeQkv_sendMessage);
}

void Heavy_wakefield::cVar_pwv2m_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_7lchN, HV_BINOP_MULTIPLY, 0, m, &cBinop_7lchN_sendMessage);
}

void Heavy_wakefield::cCast_VDaCy_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_H01Uf, 0, m, &cVar_H01Uf_sendMessage);
}

void Heavy_wakefield::cBinop_a7cgX_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_3iVnT_sendMessage);
}

void Heavy_wakefield::cMsg_E3vuk_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_5AJYN_onMessage(_c, NULL, 0, m, NULL);
  cBinop_onMessage(_c, &Context(_c)->cBinop_eIP2f, HV_BINOP_ADD, 1, m, &cBinop_eIP2f_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_5hZwI, HV_BINOP_ADD, 1, m, &cBinop_5hZwI_sendMessage);
}

void Heavy_wakefield::cSystem_ILYxk_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_a7cgX, HV_BINOP_MULTIPLY, 1, m, &cBinop_a7cgX_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_A5SMf, HV_BINOP_MULTIPLY, 1, m, &cBinop_A5SMf_sendMessage);
}

void Heavy_wakefield::cMsg_Wbuel_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_ILYxk_sendMessage);
}

void Heavy_wakefield::cVar_8s88m_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_7rIaR, HV_BINOP_SUBTRACT, 1, m, &cBinop_7rIaR_sendMessage);
}

void Heavy_wakefield::cCast_y6imH_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_OD1Pa_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_Ez1hh_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_E3vuk_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_iIqsH_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_A5SMf, HV_BINOP_MULTIPLY, 0, m, &cBinop_A5SMf_sendMessage);
}

void Heavy_wakefield::cCast_D7YgK_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_CfPwW_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_YIhH3_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_D7YgK_sendMessage);
      break;
    }
    default: {
      cBinop_onMessage(_c, &Context(_c)->cBinop_a7cgX, HV_BINOP_MULTIPLY, 0, m, &cBinop_a7cgX_sendMessage);
      cBinop_onMessage(_c, &Context(_c)->cBinop_KvLz1, HV_BINOP_DIVIDE, 1, m, &cBinop_KvLz1_sendMessage);
      cVar_onMessage(_c, &Context(_c)->cVar_pwv2m, 0, m, &cVar_pwv2m_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cBinop_5hZwI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_VlTJq, 1, m, &cVar_VlTJq_sendMessage);
}

void Heavy_wakefield::cCast_tptmQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_1aLPc, 0, m, &cVar_1aLPc_sendMessage);
}

void Heavy_wakefield::cMsg_OD1Pa_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cVar_onMessage(_c, &Context(_c)->cVar_H01Uf, 1, m, &cVar_H01Uf_sendMessage);
}

void Heavy_wakefield::cBinop_7X4ku_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_eIP2f, HV_BINOP_ADD, 1, m, &cBinop_eIP2f_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_5hZwI, HV_BINOP_ADD, 1, m, &cBinop_5hZwI_sendMessage);
}

void Heavy_wakefield::cBinop_A5SMf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_1MVQc_sendMessage);
}

void Heavy_wakefield::cSlice_7KgAW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_f0Pks_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_GAXHy_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_3gdId_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_iIqsH_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_rLKie_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cCast_mSJeg_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_Ez1hh_sendMessage);
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_tptmQ_sendMessage);
}

void Heavy_wakefield::cCast_uL6pD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_VlTJq, 0, m, &cVar_VlTJq_sendMessage);
}

void Heavy_wakefield::cSwitchcase_j9ATE_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_uL6pD_sendMessage);
      break;
    }
    case 0x3F800000: { // "1.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_mSJeg_sendMessage);
      break;
    }
    default: {
      break;
    }
  }
}

void Heavy_wakefield::cCast_ZYcbU_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_SIYL6_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_3iVnT_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_UJFtt, HV_BINOP_SUBTRACT, 1, m, &cBinop_UJFtt_sendMessage);
}

void Heavy_wakefield::cVar_n96Mv_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_YIhH3_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cSlice_WvKHm_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cMsg_SIYL6_sendMessage(_c, 0, m);
      break;
    }
    case 1: {
      cMsg_SIYL6_sendMessage(_c, 0, m);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_rXhJY_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_ZYcbU_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_mpZor_sendMessage);
      break;
    }
    case 1: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_ZYcbU_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_mpZor_sendMessage);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSwitchcase_7gAUS_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cSlice_onMessage(_c, &Context(_c)->cSlice_WvKHm, 0, m, &cSlice_WvKHm_sendMessage);
      break;
    }
    case 0x3E004DAB: { // "set"
      cSlice_onMessage(_c, &Context(_c)->cSlice_rXhJY, 0, m, &cSlice_rXhJY_sendMessage);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_VDaCy_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_3gdId, 0, m, &cSlice_3gdId_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_7KgAW, 0, m, &cSlice_7KgAW_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_stCbS_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_y6imH_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cVar_VlTJq_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_5hZwI, HV_BINOP_ADD, 0, m, &cBinop_5hZwI_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_eIP2f, HV_BINOP_ADD, 0, m, &cBinop_eIP2f_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_M9dwY_sendMessage);
}

void Heavy_wakefield::cMsg_SIYL6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_5AJYN_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_1MVQc_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_j9gmk, 1, m, &cVar_j9gmk_sendMessage);
}

void Heavy_wakefield::cBinop_2d8kY_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_j9ATE_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_EMTwz_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_E3vuk_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_M9dwY_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_FJLEK, 0, m, &cVar_FJLEK_sendMessage);
  sVarf_onMessage(_c, &Context(_c)->sVarf_EFrNu, m);
}

void Heavy_wakefield::cVar_FJLEK_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
}

void Heavy_wakefield::cMsg_ZWjYZ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_7gAUS_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_7VTTN_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_7gAUS_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_87rGm_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sPhasor_k_onMessage(_c, &Context(_c)->sPhasor_glGom, 0, m);
}

void Heavy_wakefield::cMsg_3xj3A_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1000.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_7gAUS_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_7JGxQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_rNYNo, 1, m, &cVar_rNYNo_sendMessage);
}

void Heavy_wakefield::cReceive_SrG4p_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_WdVel, 0, m, &cVar_WdVel_sendMessage);
}

void Heavy_wakefield::cBinop_qBrvs_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_zBK0C, 0, m, &cVar_zBK0C_sendMessage);
  cSwitchcase_XtwxH_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cVar_rNYNo_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 1.0f, 0, m, &cBinop_7JGxQ_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MOD_UNIPOLAR, 4.0f, 0, m, &cBinop_qBrvs_sendMessage);
}

void Heavy_wakefield::cMsg_H1wPx_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1000.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_UzJ2a_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_lHHV3_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_sVLmy_sendMessage);
}

void Heavy_wakefield::cBinop_sVLmy_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_bYuha, HV_BINOP_SUBTRACT, 1, m, &cBinop_bYuha_sendMessage);
}

void Heavy_wakefield::cMsg_feL8j_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 20.0f);
  cBinop_onMessage(_c, &Context(_c)->cBinop_lHHV3, HV_BINOP_MULTIPLY, 0, m, &cBinop_lHHV3_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_zd81i, HV_BINOP_DIVIDE, 1, m, &cBinop_zd81i_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_bTbnT, 0, m, &cVar_bTbnT_sendMessage);
}

void Heavy_wakefield::cCast_ehk1J_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_BCTyA_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_ZeMfa, HV_BINOP_ADD, 0, m, &cBinop_ZeMfa_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_EtTaV, 1, m, &cVar_EtTaV_sendMessage);
}

void Heavy_wakefield::cBinop_iBm7R_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_byNRW, 1, m, &cVar_byNRW_sendMessage);
}

void Heavy_wakefield::cBinop_cmkWQ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_ZeMfa, HV_BINOP_ADD, 1, m, &cBinop_ZeMfa_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_l1Byy, HV_BINOP_ADD, 1, m, &cBinop_l1Byy_sendMessage);
}

void Heavy_wakefield::cCast_CXcfR_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_LNsr3, 0, m, &cVar_LNsr3_sendMessage);
}

void Heavy_wakefield::cVar_byNRW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_bYuha, HV_BINOP_SUBTRACT, 0, m, &cBinop_bYuha_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_LESS_THAN_EQL, 0.0f, 0, m, &cBinop_DuPh9_sendMessage);
}

void Heavy_wakefield::cCast_SgiuY_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_bJpS5_sendMessage);
  cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_VmGgg_sendMessage);
}

void Heavy_wakefield::cCast_8UPwr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_EtTaV, 0, m, &cVar_EtTaV_sendMessage);
}

void Heavy_wakefield::cSwitchcase_SGUKN_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_8UPwr_sendMessage);
      break;
    }
    case 0x3F800000: { // "1.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_SgiuY_sendMessage);
      break;
    }
    default: {
      break;
    }
  }
}

void Heavy_wakefield::cCast_bJpS5_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_rUCDi_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_rjyTy_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_feL8j_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_2e0q9_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_rjyTy_sendMessage);
      break;
    }
    default: {
      cBinop_onMessage(_c, &Context(_c)->cBinop_lHHV3, HV_BINOP_MULTIPLY, 0, m, &cBinop_lHHV3_sendMessage);
      cBinop_onMessage(_c, &Context(_c)->cBinop_zd81i, HV_BINOP_DIVIDE, 1, m, &cBinop_zd81i_sendMessage);
      cVar_onMessage(_c, &Context(_c)->cVar_bTbnT, 0, m, &cVar_bTbnT_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cCast_Ux2VG_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_kLqaS, HV_BINOP_MULTIPLY, 0, m, &cBinop_kLqaS_sendMessage);
}

void Heavy_wakefield::cCast_VmGgg_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_YdSRB, 0, m, &cVar_YdSRB_sendMessage);
}

void Heavy_wakefield::cSlice_gcHBP_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_gUD2J_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_SNZ05_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_OyogB_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_Ux2VG_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_dK59m_sendMessage);
      break;
    }
    case 1: {
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cBinop_kLqaS_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_iBm7R_sendMessage);
}

void Heavy_wakefield::cCast_NemP4_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_JEsrZ_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_dK59m_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_zd81i, HV_BINOP_DIVIDE, 0, m, &cBinop_zd81i_sendMessage);
}

void Heavy_wakefield::cBinop_l1Byy_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_EtTaV, 1, m, &cVar_EtTaV_sendMessage);
}

void Heavy_wakefield::cBinop_DuPh9_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_SGUKN_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cSwitchcase_wtH6F_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x0: { // "0.0"
      cMsg_otdNI_sendMessage(_c, 0, m);
      break;
    }
    case 0x7A5B032D: { // "stop"
      cMsg_otdNI_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_7g8Y4_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cMsg_otdNI_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_9SshR, 0, m, &cDelay_9SshR_sendMessage);
}

void Heavy_wakefield::cCast_7g8Y4_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_otdNI_sendMessage(_c, 0, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_9SshR, 0, m, &cDelay_9SshR_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_byNRW, 0, m, &cVar_byNRW_sendMessage);
}

void Heavy_wakefield::cBinop_ZWxm6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MAX, 1.0f, 0, m, &cBinop_yCnjb_sendMessage);
}

void Heavy_wakefield::cMsg_zkqgW_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_C3XzC_sendMessage);
}

void Heavy_wakefield::cSystem_C3XzC_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_aqs7U_sendMessage);
}

void Heavy_wakefield::cVar_bTbnT_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_ZWxm6, HV_BINOP_MULTIPLY, 0, m, &cBinop_ZWxm6_sendMessage);
}

void Heavy_wakefield::cDelay_9SshR_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_9SshR, m);
  cDelay_onMessage(_c, &Context(_c)->cDelay_9SshR, 0, m, &cDelay_9SshR_sendMessage);
  cVar_onMessage(_c, &Context(_c)->cVar_byNRW, 0, m, &cVar_byNRW_sendMessage);
}

void Heavy_wakefield::cBinop_aqs7U_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_ZWxm6, HV_BINOP_MULTIPLY, 1, m, &cBinop_ZWxm6_sendMessage);
}

void Heavy_wakefield::cBinop_yCnjb_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_9SshR, 2, m, &cDelay_9SshR_sendMessage);
}

void Heavy_wakefield::cBinop_ZeMfa_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_3ZRvH, 0, m, &cVar_3ZRvH_sendMessage);
}

void Heavy_wakefield::cVar_YdSRB_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_EtTaV, 0, m, &cVar_EtTaV_sendMessage);
}

void Heavy_wakefield::cMsg_lxc8c_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_wtH6F_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cMsg_JEsrZ_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_wtH6F_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cCast_gUD2J_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_YdSRB, 1, m, &cVar_YdSRB_sendMessage);
}

void Heavy_wakefield::cCast_SNZ05_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_IgSko, HV_BINOP_SUBTRACT, 0, m, &cBinop_IgSko_sendMessage);
}

void Heavy_wakefield::cMsg_FUAew_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "samplerate");
  cSystem_onMessage(_c, NULL, 0, m, &cSystem_434hu_sendMessage);
}

void Heavy_wakefield::cSystem_434hu_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_lHHV3, HV_BINOP_MULTIPLY, 1, m, &cBinop_lHHV3_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_kLqaS, HV_BINOP_MULTIPLY, 1, m, &cBinop_kLqaS_sendMessage);
}

void Heavy_wakefield::cVar_EtTaV_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_l1Byy, HV_BINOP_ADD, 0, m, &cBinop_l1Byy_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_ZeMfa, HV_BINOP_ADD, 0, m, &cBinop_ZeMfa_sendMessage);
  cBinop_k_onMessage(_c, NULL, HV_BINOP_DIVIDE, 1000.0f, 0, m, &cBinop_RmCWR_sendMessage);
}

void Heavy_wakefield::cVar_3ZRvH_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_IgSko, HV_BINOP_SUBTRACT, 1, m, &cBinop_IgSko_sendMessage);
}

void Heavy_wakefield::cMsg_rUCDi_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cSwitchcase_wtH6F_onMessage(_c, NULL, 0, m, NULL);
  cBinop_onMessage(_c, &Context(_c)->cBinop_ZeMfa, HV_BINOP_ADD, 1, m, &cBinop_ZeMfa_sendMessage);
  cBinop_onMessage(_c, &Context(_c)->cBinop_l1Byy, HV_BINOP_ADD, 1, m, &cBinop_l1Byy_sendMessage);
}

void Heavy_wakefield::cBinop_zd81i_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_cmkWQ, HV_BINOP_DIVIDE, 1, m, &cBinop_cmkWQ_sendMessage);
}

void Heavy_wakefield::cCast_OLwWU_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_lxc8c_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_LNsr3_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_Ux2VG_sendMessage);
  cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_dK59m_sendMessage);
}

void Heavy_wakefield::cCast_freWP_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_EdB4a_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cBinop_IgSko_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_onMessage(_c, &Context(_c)->cBinop_cmkWQ, HV_BINOP_DIVIDE, 0, m, &cBinop_cmkWQ_sendMessage);
}

void Heavy_wakefield::cMsg_EdB4a_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 0.0f);
  cVar_onMessage(_c, &Context(_c)->cVar_LNsr3, 1, m, &cVar_LNsr3_sendMessage);
}

void Heavy_wakefield::cBinop_bYuha_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_byNRW, 1, m, &cVar_byNRW_sendMessage);
}

void Heavy_wakefield::cSlice_e6YyH_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_OLwWU_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_ehk1J_sendMessage);
      break;
    }
    case 1: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_OLwWU_sendMessage);
      cCast_onMessage(_c, HV_CAST_FLOAT, 0, m, &cCast_ehk1J_sendMessage);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSlice_OLrKi_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  switch (letIn) {
    case 0: {
      cMsg_lxc8c_sendMessage(_c, 0, m);
      break;
    }
    case 1: {
      cMsg_lxc8c_sendMessage(_c, 0, m);
      break;
    }
    default: return;
  }
}

void Heavy_wakefield::cSwitchcase_UzJ2a_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cSlice_onMessage(_c, &Context(_c)->cSlice_OLrKi, 0, m, &cSlice_OLrKi_sendMessage);
      break;
    }
    case 0x3E004DAB: { // "set"
      cSlice_onMessage(_c, &Context(_c)->cSlice_e6YyH, 0, m, &cSlice_e6YyH_sendMessage);
      break;
    }
    default: {
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_CXcfR_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_OyogB, 0, m, &cSlice_OyogB_sendMessage);
      cSlice_onMessage(_c, &Context(_c)->cSlice_gcHBP, 0, m, &cSlice_gcHBP_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_NemP4_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_freWP_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cCast_BCTyA_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cMsg_rUCDi_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_cj6bc_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cSwitchcase_2e0q9_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_L0tZf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sPhasor_k_onMessage(_c, &Context(_c)->sPhasor_HQdaM, 0, m);
}

void Heavy_wakefield::cVar_aG4s0_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
}

void Heavy_wakefield::cSwitchcase_J5CZX_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_QdeRD_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_QdeRD_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_KIy0R, 1, m, &cDelay_KIy0R_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_K8KD6_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cMsg_QdeRD_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_KIy0R, 0, m, &cDelay_KIy0R_sendMessage);
}

void Heavy_wakefield::cDelay_KIy0R_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_KIy0R, m);
  cMsg_v7dOR_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cCast_K8KD6_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_KIy0R, 0, m, &cDelay_KIy0R_sendMessage);
}

void Heavy_wakefield::cDelay_TlVsM_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const m) {
  cDelay_clearExecutingMessage(&Context(_c)->cDelay_TlVsM, m);
  cMsg_H1wPx_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cSwitchcase_VtrS4_onMessage(HeavyContextInterface *_c, void *o, int letIn, const HvMessage *const m, void *sendMessage) {
  switch (msg_getHash(m, 0)) {
    case 0x7A5B032D: { // "stop"
      cMsg_jX0Wf_sendMessage(_c, 0, m);
      break;
    }
    default: {
      cMsg_jX0Wf_sendMessage(_c, 0, m);
      cDelay_onMessage(_c, &Context(_c)->cDelay_TlVsM, 1, m, &cDelay_TlVsM_sendMessage);
      cCast_onMessage(_c, HV_CAST_BANG, 0, m, &cCast_0SGgL_sendMessage);
      break;
    }
  }
}

void Heavy_wakefield::cCast_0SGgL_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cDelay_onMessage(_c, &Context(_c)->cDelay_TlVsM, 0, m, &cDelay_TlVsM_sendMessage);
}

void Heavy_wakefield::cMsg_jX0Wf_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setSymbol(m, 0, "clear");
  cDelay_onMessage(_c, &Context(_c)->cDelay_TlVsM, 0, m, &cDelay_TlVsM_sendMessage);
}

void Heavy_wakefield::cMsg_v7dOR_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(2);
  msg_init(m, 2, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  msg_setFloat(m, 1, 1000.0f);
  cSwitchcase_UzJ2a_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cBinop_RmCWR_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cVar_onMessage(_c, &Context(_c)->cVar_aG4s0, 0, m, &cVar_aG4s0_sendMessage);
  sVarf_onMessage(_c, &Context(_c)->sVarf_gHznS, m);
}

void Heavy_wakefield::cMsg_FLxyL_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *const n) {
  HvMessage *m = nullptr;
  m = HV_MESSAGE_ON_STACK(1);
  msg_init(m, 1, msg_getTimestamp(n));
  msg_setFloat(m, 0, 1.0f);
  cSwitchcase_UzJ2a_onMessage(_c, NULL, 0, m, NULL);
}

void Heavy_wakefield::cUnop_lOueF_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_ADD, 40.0f, 0, m, &cBinop_L0tZf_sendMessage);
}

void Heavy_wakefield::cRandom_oJOzq_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cBinop_k_onMessage(_c, NULL, HV_BINOP_MULTIPLY, 220.0f, 0, m, &cBinop_h9rdr_sendMessage);
}

void Heavy_wakefield::cBinop_h9rdr_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  cUnop_onMessage(_c, HV_UNOP_FLOOR, m, &cUnop_lOueF_sendMessage);
}

void Heavy_wakefield::cSend_Xwe2X_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  if (_c->getSendHook() != nullptr) _c->getSendHook()(_c, "thefloat1", 0x3075BDE4, m);
  cReceive_uh1tz_sendMessage(_c, 0, m);
}

void Heavy_wakefield::cVar_WdVel_sendMessage(HeavyContextInterface *_c, int letIn, const HvMessage *m) {
  sVarf_onMessage(_c, &Context(_c)->sVarf_jbMVY, m);
}




/*
 * Context Process Implementation
 */

int Heavy_wakefield::process(float **inputBuffers, float **outputBuffers, int n) {
  while (hLp_hasData(&inQueue)) {
    hv_uint32_t numBytes = 0;
    ReceiverMessagePair *p = reinterpret_cast<ReceiverMessagePair *>(hLp_getReadBuffer(&inQueue, &numBytes));
    hv_assert(numBytes >= sizeof(ReceiverMessagePair));
    scheduleMessageForReceiver(p->receiverHash, &p->msg);
    hLp_consume(&inQueue);
  }
  const int n4 = n & ~HV_N_SIMD_MASK; // ensure that the block size is a multiple of HV_N_SIMD

  // temporary signal vars
  hv_bufferf_t Bf0, Bf1, Bf2, Bf3, Bf4, Bf5, Bf6, Bf7;

  // input and output vars
  hv_bufferf_t O0, O1;

  // declare and init the zero buffer
  hv_bufferf_t ZERO; __hv_zero_f(VOf(ZERO));

  hv_uint32_t nextBlock = blockStartTimestamp;
  for (int n = 0; n < n4; n += HV_N_SIMD) {

    // process all of the messages for this block
    nextBlock += HV_N_SIMD;
    while (mq_hasMessageBefore(&mq, nextBlock)) {
      MessageNode *const node = mq_peek(&mq);
      node->sendMessage(this, node->let, node->m);
      mq_pop(&mq);
    }

    

    // zero output buffers
    __hv_zero_f(VOf(O0));
    __hv_zero_f(VOf(O1));

    // process all signal functions
    __hv_phasor_k_f(&sPhasor_glGom, VOf(Bf0));
    __hv_varread_f(&sVarf_EFrNu, VOf(Bf1));
    __hv_mul_f(VIf(Bf0), VIf(Bf1), VOf(Bf1));
    __hv_phasor_k_f(&sPhasor_HQdaM, VOf(Bf0));
    __hv_varread_f(&sVarf_gHznS, VOf(Bf2));
    __hv_mul_f(VIf(Bf0), VIf(Bf2), VOf(Bf2));
    __hv_add_f(VIf(Bf1), VIf(Bf2), VOf(Bf2));
    __hv_phasor_k_f(&sPhasor_I1U7T, VOf(Bf1));
    __hv_varread_f(&sVarf_BUAZD, VOf(Bf0));
    __hv_mul_f(VIf(Bf1), VIf(Bf0), VOf(Bf0));
    __hv_add_f(VIf(Bf2), VIf(Bf0), VOf(Bf0));
    __hv_phasor_k_f(&sPhasor_wILZr, VOf(Bf2));
    __hv_varread_f(&sVarf_RGOBs, VOf(Bf1));
    __hv_mul_f(VIf(Bf2), VIf(Bf1), VOf(Bf1));
    __hv_add_f(VIf(Bf0), VIf(Bf1), VOf(Bf1));
    __hv_phasor_k_f(&sPhasor_gqPkj, VOf(Bf0));
    __hv_var_k_f(VOf(Bf2), 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f);
    __hv_sub_f(VIf(Bf0), VIf(Bf2), VOf(Bf2));
    __hv_abs_f(VIf(Bf2), VOf(Bf2));
    __hv_var_k_f(VOf(Bf0), 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f);
    __hv_sub_f(VIf(Bf2), VIf(Bf0), VOf(Bf0));
    __hv_var_k_f(VOf(Bf2), 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f);
    __hv_mul_f(VIf(Bf0), VIf(Bf2), VOf(Bf2));
    __hv_mul_f(VIf(Bf2), VIf(Bf2), VOf(Bf0));
    __hv_mul_f(VIf(Bf2), VIf(Bf0), VOf(Bf3));
    __hv_mul_f(VIf(Bf3), VIf(Bf0), VOf(Bf0));
    __hv_var_k_f(VOf(Bf4), 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f);
    __hv_var_k_f(VOf(Bf5), 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f);
    __hv_mul_f(VIf(Bf3), VIf(Bf5), VOf(Bf5));
    __hv_sub_f(VIf(Bf2), VIf(Bf5), VOf(Bf5));
    __hv_fma_f(VIf(Bf0), VIf(Bf4), VIf(Bf5), VOf(Bf5));
    __hv_varread_f(&sVarf_jbMVY, VOf(Bf4));
    __hv_varread_f(&sVarf_mUiG1, VOf(Bf0));
    __hv_fma_f(VIf(Bf5), VIf(Bf4), VIf(Bf0), VOf(Bf0));
    __hv_phasor_f(&sPhasor_5rxoq, VIf(Bf0), VOf(Bf0));
    __hv_var_k_f(VOf(Bf4), 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f);
    __hv_sub_f(VIf(Bf0), VIf(Bf4), VOf(Bf4));
    __hv_abs_f(VIf(Bf4), VOf(Bf4));
    __hv_var_k_f(VOf(Bf0), 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f);
    __hv_sub_f(VIf(Bf4), VIf(Bf0), VOf(Bf0));
    __hv_var_k_f(VOf(Bf4), 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f);
    __hv_mul_f(VIf(Bf0), VIf(Bf4), VOf(Bf4));
    __hv_mul_f(VIf(Bf4), VIf(Bf4), VOf(Bf0));
    __hv_mul_f(VIf(Bf4), VIf(Bf0), VOf(Bf5));
    __hv_mul_f(VIf(Bf5), VIf(Bf0), VOf(Bf0));
    __hv_var_k_f(VOf(Bf2), 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f);
    __hv_var_k_f(VOf(Bf3), 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f);
    __hv_mul_f(VIf(Bf5), VIf(Bf3), VOf(Bf3));
    __hv_sub_f(VIf(Bf4), VIf(Bf3), VOf(Bf3));
    __hv_fma_f(VIf(Bf0), VIf(Bf2), VIf(Bf3), VOf(Bf3));
    __hv_var_k_f(VOf(Bf2), 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f);
    __hv_add_f(VIf(Bf3), VIf(Bf2), VOf(Bf2));
    __hv_var_k_f(VOf(Bf3), 1500.0f, 1500.0f, 1500.0f, 1500.0f, 1500.0f, 1500.0f, 1500.0f, 1500.0f);
    __hv_mul_f(VIf(Bf2), VIf(Bf3), VOf(Bf3));
    __hv_var_k_f(VOf(Bf2), 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f);
    __hv_zero_f(VOf(Bf0));
    __hv_max_f(VIf(Bf3), VIf(Bf0), VOf(Bf0));
    __hv_varread_f(&sVarf_yUml6, VOf(Bf3));
    __hv_mul_f(VIf(Bf0), VIf(Bf3), VOf(Bf3));
    __hv_var_k_f(VOf(Bf0), 6.28318f, 6.28318f, 6.28318f, 6.28318f, 6.28318f, 6.28318f, 6.28318f, 6.28318f);
    __hv_mul_f(VIf(Bf3), VIf(Bf0), VOf(Bf0));
    __hv_varread_f(&sVarf_UC8By, VOf(Bf4));
    __hv_mul_f(VIf(Bf0), VIf(Bf4), VOf(Bf4));
    __hv_sub_f(VIf(Bf4), VIf(Bf2), VOf(Bf4));
    __hv_varread_f(&sVarf_Jzfbm, VOf(Bf0));
    __hv_zero_f(VOf(Bf5));
    __hv_neq_f(VIf(Bf0), VIf(Bf5), VOf(Bf5));
    __hv_and_f(VIf(Bf4), VIf(Bf5), VOf(Bf5));
    __hv_zero_f(VOf(Bf4));
    __hv_min_f(VIf(Bf5), VIf(Bf4), VOf(Bf4));
    __hv_add_f(VIf(Bf2), VIf(Bf4), VOf(Bf2));
    __hv_varread_f(&sVarf_G5TJv, VOf(Bf5));
    __hv_mul_f(VIf(Bf2), VIf(Bf5), VOf(Bf5));
    __hv_mul_f(VIf(Bf1), VIf(Bf5), VOf(Bf5));
    __hv_floor_f(VIf(Bf3), VOf(Bf1));
    __hv_sub_f(VIf(Bf3), VIf(Bf1), VOf(Bf1));
    __hv_var_k_f(VOf(Bf2), 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f);
    __hv_sub_f(VIf(Bf1), VIf(Bf2), VOf(Bf2));
    __hv_abs_f(VIf(Bf2), VOf(Bf2));
    __hv_var_k_f(VOf(Bf1), 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f);
    __hv_sub_f(VIf(Bf2), VIf(Bf1), VOf(Bf1));
    __hv_var_k_f(VOf(Bf2), 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f);
    __hv_mul_f(VIf(Bf1), VIf(Bf2), VOf(Bf2));
    __hv_mul_f(VIf(Bf2), VIf(Bf2), VOf(Bf1));
    __hv_mul_f(VIf(Bf2), VIf(Bf1), VOf(Bf0));
    __hv_mul_f(VIf(Bf0), VIf(Bf1), VOf(Bf1));
    __hv_var_k_f(VOf(Bf6), 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f);
    __hv_var_k_f(VOf(Bf7), 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f);
    __hv_mul_f(VIf(Bf0), VIf(Bf7), VOf(Bf7));
    __hv_sub_f(VIf(Bf2), VIf(Bf7), VOf(Bf7));
    __hv_fma_f(VIf(Bf1), VIf(Bf6), VIf(Bf7), VOf(Bf7));
    __hv_mul_f(VIf(Bf4), VIf(Bf7), VOf(Bf7));
    __hv_var_k_f(VOf(Bf6), 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f);
    __hv_sub_f(VIf(Bf3), VIf(Bf6), VOf(Bf6));
    __hv_floor_f(VIf(Bf6), VOf(Bf3));
    __hv_sub_f(VIf(Bf6), VIf(Bf3), VOf(Bf3));
    __hv_var_k_f(VOf(Bf6), 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f, 0.5f);
    __hv_sub_f(VIf(Bf3), VIf(Bf6), VOf(Bf6));
    __hv_abs_f(VIf(Bf6), VOf(Bf6));
    __hv_var_k_f(VOf(Bf3), 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f, 0.25f);
    __hv_sub_f(VIf(Bf6), VIf(Bf3), VOf(Bf3));
    __hv_var_k_f(VOf(Bf6), 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f, 6.28319f);
    __hv_mul_f(VIf(Bf3), VIf(Bf6), VOf(Bf6));
    __hv_mul_f(VIf(Bf6), VIf(Bf6), VOf(Bf3));
    __hv_mul_f(VIf(Bf6), VIf(Bf3), VOf(Bf1));
    __hv_mul_f(VIf(Bf1), VIf(Bf3), VOf(Bf3));
    __hv_var_k_f(VOf(Bf2), 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f, 0.00784314f);
    __hv_var_k_f(VOf(Bf0), 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f, 0.166667f);
    __hv_mul_f(VIf(Bf1), VIf(Bf0), VOf(Bf0));
    __hv_sub_f(VIf(Bf6), VIf(Bf0), VOf(Bf0));
    __hv_fma_f(VIf(Bf3), VIf(Bf2), VIf(Bf0), VOf(Bf0));
    __hv_mul_f(VIf(Bf4), VIf(Bf0), VOf(Bf0));
    __hv_cpole_f(&sCPole_Z5bbj, VIf(Bf5), VIf(ZERO), VIf(Bf7), VIf(Bf0), VOf(Bf0), VOf(Bf7));
    __hv_add_f(VIf(Bf7), VIf(O0), VOf(O0));
    __hv_add_f(VIf(Bf7), VIf(O1), VOf(O1));

    // save output vars to output buffer
    __hv_store_f(outputBuffers[0]+n, VIf(O0));
    __hv_store_f(outputBuffers[1]+n, VIf(O1));
  }

  blockStartTimestamp = nextBlock;

  return n4; // return the number of frames processed
}

int Heavy_wakefield::processInline(float *inputBuffers, float *outputBuffers, int n4) {
  hv_assert(!(n4 & HV_N_SIMD_MASK)); // ensure that n4 is a multiple of HV_N_SIMD

  // define the heavy input buffer for 0 channel(s)
  float **const bIn = NULL;

  // define the heavy output buffer for 2 channel(s)
  float **const bOut = reinterpret_cast<float **>(hv_alloca(2*sizeof(float *)));
  bOut[0] = outputBuffers+(0*n4);
  bOut[1] = outputBuffers+(1*n4);

  int n = process(bIn, bOut, n4);
  return n;
}

int Heavy_wakefield::processInlineInterleaved(float *inputBuffers, float *outputBuffers, int n4) {
  hv_assert(n4 & ~HV_N_SIMD_MASK); // ensure that n4 is a multiple of HV_N_SIMD

  // define the heavy input buffer for 0 channel(s), uninterleave
  float *const bIn = NULL;

  // define the heavy output buffer for 2 channel(s)
  float *const bOut = reinterpret_cast<float *>(hv_alloca(2*n4*sizeof(float)));

  int n = processInline(bIn, bOut, n4);

  // interleave the heavy output into the output buffer
  #if HV_SIMD_AVX
  for (int i = 0, j = 0; j < n4; j += 8, i += 16) {
    __m256 x = _mm256_load_ps(bOut+j);    // LLLLLLLL
    __m256 y = _mm256_load_ps(bOut+n4+j); // RRRRRRRR
    __m256 a = _mm256_unpacklo_ps(x, y);  // LRLRLRLR
    __m256 b = _mm256_unpackhi_ps(x, y);  // LRLRLRLR
    _mm256_store_ps(outputBuffers+i, a);
    _mm256_store_ps(outputBuffers+8+i, b);
  }
  #elif HV_SIMD_SSE
  for (int i = 0, j = 0; j < n4; j += 4, i += 8) {
    __m128 x = _mm_load_ps(bOut+j);    // LLLL
    __m128 y = _mm_load_ps(bOut+n4+j); // RRRR
    __m128 a = _mm_unpacklo_ps(x, y);  // LRLR
    __m128 b = _mm_unpackhi_ps(x, y);  // LRLR
    _mm_store_ps(outputBuffers+i, a);
    _mm_store_ps(outputBuffers+4+i, b);
  }
  #elif HV_SIMD_NEON
  // https://community.arm.com/groups/processors/blog/2012/03/13/coding-for-neon--part-5-rearranging-vectors
  for (int i = 0, j = 0; j < n4; j += 4, i += 8) {
    float32x4_t x = vld1q_f32(bOut+j);
    float32x4_t y = vld1q_f32(bOut+n4+j);
    float32x4x2_t z = {x, y};
    vst2q_f32(outputBuffers+i, z); // interleave and store
  }
  #else // HV_SIMD_NONE
  for (int i = 0; i < 2; ++i) {
    for (int j = 0; j < n4; ++j) {
      outputBuffers[i+2*j] = bOut[i*n4+j];
    }
  }
  #endif

  return n;
}
